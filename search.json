[{"title":"C语言学习","url":"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index.html","content":"<p>  学习资源：<a href=\"https://www.bilibili.com/video/BV1XZ4y1G7No?p=30\">https://www.bilibili.com/video/BV1XZ4y1G7No?p=30</a></p>\n<p>简单示例</p>\n<ul>\n<li>main.c</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>  <span class=\"comment\">// 引用包， .h 为头文件，声明同名.c文件中的方法</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;crypt.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义宏，建议大写，与变量进行区分</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI 3.14</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a+b=%d\\n&quot;</span>, Add(<span class=\"number\">3</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello, World!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> r=<span class=\"number\">0.0f</span>;  <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入圆的半径：&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>, &amp;r);  <span class=\"comment\">//键盘输入并赋值给r，相当于python的input</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp; 在C语言中为 1.取地址 2.逻辑运算符：与</span></span><br><span class=\"line\">    <span class=\"type\">float</span> s = area(r);  <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s=%f\\n&quot;</span>, s);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;圆的面积：%.2f\\n&quot;</span>, area(r));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> data1=<span class=\"number\">0</span>, data2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入两个数字：&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;data1, &amp;data2);  <span class=\"comment\">//多个数据输入，格式与python的input相同</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%d:%d&quot;, &amp;data1, &amp;data2);</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%d#%d&quot;, &amp;data1, &amp;data2);</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data1 = %d , data2 = %d \\n&quot;</span>, data1, data2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;两数之和为：%d&quot;</span>, Add(data1, data2));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>crypt.h</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> DEMO_CRYPT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEMO_CRYPT_H</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"title function_\">area</span><span class=\"params\">(<span class=\"type\">float</span> r)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//DEMO_CRYPT_H</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>crypt.c</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;crypt.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义宏，建议大写，与变量进行区分</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI 3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"title function_\">area</span><span class=\"params\">(<span class=\"type\">float</span> r)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PI * r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p>char、short、int、long、float、double、</p>\n<p>unsigned、signed、struct、union、enum、void</p>\n</li>\n<li><p>结构体struct   共用体union</p>\n<ul>\n<li>结构体成员拥有独立的内存空间</li>\n<li>共用体成员共用同一内存空间</li>\n</ul>\n</li>\n<li><p>enum枚举  void 无类型</p>\n</li>\n<li><p>auto 自动类型</p>\n</li>\n<li><p>register 寄存器变量</p>\n<ul>\n<li><p>显式定义寄存器变量，将变量存入寄存器中</p>\n<p>未声明寄存器类型，系统会将频繁使用的变量存入寄存器中</p>\n</li>\n<li><p>寄存器类型变量 没有内存地址， 取地址符&amp;</p>\n</li>\n</ul>\n</li>\n<li><p>static 静态变量</p>\n</li>\n<li><p>const 只读变量</p>\n</li>\n<li><p>sizeof  测类型大小</p>\n</li>\n<li><p>typedef  为已有类型 起别名   相当于python的as</p>\n</li>\n<li><p>volatile 防止编译器优化</p>\n<p>每次变量取值均从内存中获取，不存入编译器</p>\n</li>\n<li><p>不以f结尾的浮点数 为double类型，如3.14</p>\n<p>已f结尾的浮点数  weifloat类型，如3.14f</p>\n</li>\n</ul>\n<h4 id=\"char类型说明\"><a href=\"#char类型说明\" class=\"headerlink\" title=\"char类型说明\"></a>char类型说明</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">&#x27;a&#x27;</span>));  <span class=\"comment\">// 4字节</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));  <span class=\"comment\">// 1字节</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>字符在内存中是以ASCII码形式存储，而ASCII码是int类型</p>\n</blockquote>\n<p><strong>接收输入</strong></p>\n<ul>\n<li>scanf()</li>\n<li>getchar()</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取一个字符：&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> ch1, ch2;</span><br><span class=\"line\"><span class=\"comment\">//    scanf(&quot;%c&quot;, &amp;ch);  只能获取第一个字符</span></span><br><span class=\"line\">    ch1 = getchar();     <span class=\"comment\">//按顺序获取字符</span></span><br><span class=\"line\">    getchar();           <span class=\"comment\">//舍弃一个字符</span></span><br><span class=\"line\">    ch2 = getchar();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ch1=%c\\n&quot;</span>, ch1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ch1=%d\\n&quot;</span>, ch1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ch1=%c\\n&quot;</span>, ch2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ch1=%d\\n&quot;</span>, ch2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>转义字符</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;##%c##\\n&quot;</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;##%90##\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;##%%90##\\n&quot;</span>);  <span class=\"comment\">// 两个%号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A:%d\\n&quot;</span>, <span class=\"string\">&#x27;0&#x27;</span>);  <span class=\"comment\">// 单引号代表字符</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B:%d\\n&quot;</span>, <span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;C:%d\\n&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;D:%d\\n&quot;</span>, <span class=\"string\">&quot;0&quot;</span>);  <span class=\"comment\">// 双引号代表字符串，读取的是字符串首字符在内存中的地址，字符串在内存中以\\0结尾</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">&#x27;a&#x27;</span>)); <span class=\"comment\">// 4  存储的是ASCII码，int类型</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">&quot;a&quot;</span>)); <span class=\"comment\">// 2  字符串占用内存存储单元数量，结尾存在\\0</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">&quot;ab&quot;</span>)); <span class=\"comment\">// 3  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">##\\##</span><br><span class=\"line\">####</span><br><span class=\"line\">##%<span class=\"number\">90</span>##</span><br><span class=\"line\">A:<span class=\"number\">48</span></span><br><span class=\"line\">B:<span class=\"number\">0</span></span><br><span class=\"line\">C:<span class=\"number\">0</span></span><br><span class=\"line\">D:<span class=\"number\">4210733</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>“ab” 字符串作为类型 ，代表的是字符串占空间的大小</p>\n<p>“ab”字符串作为地址， 代表的是字符串首元素的内存地址</p>\n</blockquote>\n<h4 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data1 = <span class=\"number\">-20</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> data2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, data1 + data2);  <span class=\"comment\">//转换为无符号数参加计算，输出结果为什么是有符号整数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(data1 + data2));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有符号与无符号整数参加计算，将有符号数转换为无符号数</span></span><br><span class=\"line\">    <span class=\"comment\">//data1转换为无符号数（-20的补码，为正数）</span></span><br><span class=\"line\">    <span class=\"comment\">// -20的补码 + 10  = 正数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data1 + data2 &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;大于&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;小于&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">short</span> data = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ch + ch));  <span class=\"comment\">//4</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(ch + data));  <span class=\"comment\">//4</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(data + data));  <span class=\"comment\">//4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>char类型与short类型进行计算时均会转换为int类型</p>\n</blockquote>\n<ul>\n<li>强制类型转换</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//float x = 3.14;</span></span><br><span class=\"line\">    <span class=\"type\">float</span> x = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//j = x;  //强制将float类型转换为int类型</span></span><br><span class=\"line\">    j = (<span class=\"type\">int</span>)x;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;j=%d\\n&quot;</span>, j);  <span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><h5 id=\"左移运算符\"><a href=\"#左移运算符\" class=\"headerlink\" title=\"左移运算符\"></a>左移运算符</h5><ul>\n<li>左边丢弃，右边补0</li>\n</ul>\n<h5 id=\"右移运算符\"><a href=\"#右移运算符\" class=\"headerlink\" title=\"右移运算符\"></a>右移运算符</h5><ul>\n<li>逻辑右移：右边丢弃，左边补0</li>\n<li>算数右移<ul>\n<li>无符号数：右边丢弃，左边补0</li>\n<li>有符号数：<ul>\n<li>正数：右边丢弃，左边补0</li>\n<li>负数：右边丢弃，左边补1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"与\"><a href=\"#与\" class=\"headerlink\" title=\"与 &amp;\"></a>与 &amp;</h5><ul>\n<li>同and ：同True 为True</li>\n</ul>\n<h5 id=\"或\"><a href=\"#或\" class=\"headerlink\" title=\"或 |\"></a>或 |</h5><ul>\n<li>同or： 同False 为False</li>\n</ul>\n<h5 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或 ^\"></a>异或 ^</h5><ul>\n<li>同为False  异为True</li>\n</ul>\n<h5 id=\"非\"><a href=\"#非\" class=\"headerlink\" title=\"非 ~\"></a>非 ~</h5><ul>\n<li>取反</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1606837294804.png\" alt=\"1606837294804\"></p>\n<p>按位置0</p>\n<ul>\n<li><code>data &amp; ~(0x01&lt;&lt;5 | 0x01&lt;&lt;1)</code></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/Users\\神秘的张少爷\\AppData\\Roaming\\Typora\\typora-user-images\\1606837549579.png\" alt=\"1606837549579\"></p>\n<p>按位置1</p>\n<ul>\n<li><code>data | (0x01&lt;&lt;4 | 0x01&lt;&lt;3)</code></li>\n</ul>\n<h4 id=\"条件运算符（三目运算符）\"><a href=\"#条件运算符（三目运算符）\" class=\"headerlink\" title=\"条件运算符（三目运算符）\"></a>条件运算符（三目运算符）</h4><ul>\n<li><p><code>表达式 ？ 值1：值2</code></p>\n<p>与if-else类似，表达式为True，取值1；否则取值2</p>\n</li>\n</ul>\n<h4 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h4><ul>\n<li><pre><code>int data1 = 0;\nint data2 = 0;\ndata1 = 3,4,5,6;  // 3 赋值运算符优先级大于逗号运算符，data1 = 3被优先执行\ndata2 = (3,4,5,6);  //6 （）优先级最高，最后的值赋值给data2\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 复合运算符</span><br><span class=\"line\"></span><br><span class=\"line\">- `+=  -=  /=  %=`</span><br><span class=\"line\"></span><br><span class=\"line\">#### 自增、自减运算符</span><br><span class=\"line\"></span><br><span class=\"line\">- `++i   --i`  先加、减，后使用 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nint i = 3;\nint j = 0;\nj = ++i;  //先加、减 i+=1， 后使用j=i\n// i = 4, j = 4\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">- `i++  i--`  先使用，后加、减</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nint i = 3;\nint j = 0;\nj = i++;  //先使用j=i，后加、减 i+=1， \n// i = 4, j = 3\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```</span><br><span class=\"line\">  <span class=\"built_in\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> j = <span class=\"number\">3</span>;</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">  ++j;</span><br><span class=\"line\">  <span class=\"comment\">// i == j</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li></li>\n</ul>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><ul>\n<li><code>for(初始语句；条件语句；步进语句)&#123;&#125;</code></li>\n</ul>\n<h4 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h4><h4 id=\"do-while\"><a href=\"#do-while\" class=\"headerlink\" title=\"do while\"></a>do while</h4><h4 id=\"goto\"><a href=\"#goto\" class=\"headerlink\" title=\"goto\"></a>goto</h4><ul>\n<li><p>需要有标记</p>\n</li>\n<li><pre><code class=\"c\">goto here;\n...\nhere:\n  ...\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- </span><br><span class=\"line\"></span><br><span class=\"line\">### 数组</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607244181497</span>](C语言学习\\<span class=\"number\">1607244181497.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607243977057</span>](C语言学习\\<span class=\"number\">1607243977057.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607244111066</span>](C语言学习\\<span class=\"number\">1607244111066.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 字符数组</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607261099907</span>](C语言学习\\<span class=\"number\">1607261099907.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607262653762</span>](C语言学习\\<span class=\"number\">1607262653762.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; %s 格式化输出字符数组，容易因为结尾没有‘\\<span class=\"number\">0</span>’而造成内存溢出 出现乱码</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607262690877</span>](C语言学习\\<span class=\"number\">1607262690877.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607261485428</span>](C语言学习\\<span class=\"number\">1607261485428.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607263503498</span>](C语言学习\\<span class=\"number\">1607263503498.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607265819739</span>](C语言学习\\<span class=\"number\">1607265819739.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607266552102</span>](C语言学习\\<span class=\"number\">1607266552102.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607266727637</span>](C语言学习\\<span class=\"number\">1607266727637.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607267031558</span>](C语言学习\\<span class=\"number\">1607267031558.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607267204278</span>](C语言学习\\<span class=\"number\">1607267204278.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607267233986</span>](C语言学习\\<span class=\"number\">1607267233986.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 只接收字符数组元素数量 - <span class=\"number\">1</span> 个输入的字符</span><br><span class=\"line\"></span><br><span class=\"line\">**字符大小写转换**</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607271049077</span>](C语言学习\\<span class=\"number\">1607271049077.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 二位字符数组</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607272133619</span>](C语言学习\\<span class=\"number\">1607272133619.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607272599937</span>](C语言学习\\<span class=\"number\">1607272599937.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607272578037</span>](C语言学习\\<span class=\"number\">1607272578037.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 函数</span><br><span class=\"line\"></span><br><span class=\"line\">- 函数返回值类型 函数名 形参名 形参类型</span><br><span class=\"line\"></span><br><span class=\"line\">**定义无参函数**</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607619229810</span>](C语言学习\\<span class=\"number\">1607619229810.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607870440160</span>](C语言学习\\<span class=\"number\">1607870440160.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607870517891</span>](C语言学习\\<span class=\"number\">1607870517891.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 内存</span><br><span class=\"line\"></span><br><span class=\"line\">- 内存布局</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1607875274102</span>](C语言学习\\<span class=\"number\">1607875274102.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 静态变量</span><br><span class=\"line\"></span><br><span class=\"line\">#### 普通局部变量</span><br><span class=\"line\"></span><br><span class=\"line\">- 未初始化，则内容不确定</span><br><span class=\"line\"></span><br><span class=\"line\">#### 普通全局变量</span><br><span class=\"line\"></span><br><span class=\"line\">- 未初始化，则内容为<span class=\"number\">0</span></span><br><span class=\"line\">- 使用全局变量时，加extern声明</span><br><span class=\"line\"></span><br><span class=\"line\">#### 静态局部变量</span><br><span class=\"line\"></span><br><span class=\"line\">- static修饰</span><br><span class=\"line\">- 作用范围：离他最近的&#123;&#125;中有效</span><br><span class=\"line\">- 生命周期：整个进程，程序结束后才被释放；脱离最近局部代码块后虽不可识别，但内存未被释放</span><br><span class=\"line\">- 存储在 全局区</span><br><span class=\"line\">- 未初始化，则内容为<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608223319449</span>](C语言学习\\<span class=\"number\">1608223319449.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 静态全局变量</span><br><span class=\"line\"></span><br><span class=\"line\">- 作用范围：当前源文件有效，不能在其他文件中使用</span><br><span class=\"line\">- 生命周期：整个进程</span><br><span class=\"line\">- 存储在 全局区</span><br><span class=\"line\">- 未初始化，则内容为<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">### 全局函数（普通函数）  静态函数（局部函数）</span><br><span class=\"line\"></span><br><span class=\"line\">#### 全局函数</span><br><span class=\"line\"></span><br><span class=\"line\">- 其他文件可以使用，加extern</span><br><span class=\"line\"></span><br><span class=\"line\">#### 静态函数</span><br><span class=\"line\"></span><br><span class=\"line\">- 只能在当前文件中使用</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 如果想在其他文件中调用静态函数，需要将静态函数封装在同一文件的全局函数中。</span><br><span class=\"line\"></span><br><span class=\"line\">### 预处理</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608225098348</span>](C语言学习\\<span class=\"number\">1608225098348.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608225478865</span>](C语言学习\\<span class=\"number\">1608225478865.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 宏（define）</span><br><span class=\"line\"></span><br><span class=\"line\">##### 不带参数的宏</span><br><span class=\"line\"></span><br><span class=\"line\">- 定义 `#define PI <span class=\"number\">3.14</span>f`</span><br><span class=\"line\">- 只在当前文件有效</span><br><span class=\"line\">- 终止宏的作用范围   `undef PI`</span><br><span class=\"line\"></span><br><span class=\"line\">##### 带参数的宏（宏函数）</span><br><span class=\"line\"></span><br><span class=\"line\">- 在预处理阶段进行替换</span><br><span class=\"line\">- 在执行代码的时候没有函数调用的过程，不需要函数的出入栈，节约时间</span><br><span class=\"line\">- 空间 替换 时间， 在所有调用的位置进行宏的展开，浪费空间，节约时间</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608384787549</span>](C语言学习\\<span class=\"number\">1608384787549.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608396106145</span>](C语言学习\\<span class=\"number\">1608396106145.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608397970594</span>](C语言学习\\<span class=\"number\">1608397970594.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 条件编译</span><br><span class=\"line\"></span><br><span class=\"line\">- 一般情况下，源程序中所有的行都要参加编译，但有时希望对部分源程序行只在满足一定条件时才编译，即对这部分源程序行指定编译条件。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 测试存在  ifdef</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608446635064</span>](C语言学习\\<span class=\"number\">1608446635064.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 测试不存在   ifndef</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608446668407</span>](C语言学习\\<span class=\"number\">1608446668407.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 根据表达式定义</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608446689040</span>](C语言学习\\<span class=\"number\">1608446689040.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">**通过条件编译控字符串大小写转换**</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608458866921</span>](C语言学习\\<span class=\"number\">1608458866921.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1608458908294</span>](C语言学习\\<span class=\"number\">1608458908294.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 防止头文件重复包含</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> `#pragma once` 所有文件首行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> C/C++的标准制定</span><br><span class=\"line\"></span><br><span class=\"line\">   - ```c</span><br><span class=\"line\">     #ifndef 宏</span><br><span class=\"line\">     #define 宏</span><br><span class=\"line\">      头文件具体内容</span><br><span class=\"line\">     #endif</span><br></pre></td></tr></table></figure>\n\n - ![1608470598938](C语言学习\\1608470598938.png)\n</code></pre>\n</li>\n</ul>\n<h3 id=\"原码-反码-补码\"><a href=\"#原码-反码-补码\" class=\"headerlink\" title=\"原码 反码 补码\"></a>原码 反码 补码</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608475726689.png\" alt=\"1608475726689\"></p>\n<blockquote>\n<p><font color=\"red\">无符号数的正数</font> ：原码 &#x3D; 反码 &#x3D; 补码</p>\n<p>任何数据在计算机中都是以<font color=\"red\">补码</font>的形式存储的</p>\n</blockquote>\n<p><strong>计算机为什么使用补码</strong>：</p>\n<ul>\n<li>将减法运算变为加法运算</li>\n<li>统一了0的编码（-0 与 +0）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608476674688.png\" alt=\"1608476674688\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608481254024.png\" alt=\"1608481254024\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608481282244.png\" alt=\"1608481282244\"></p>\n<h4 id=\"存储-读取\"><a href=\"#存储-读取\" class=\"headerlink\" title=\"存储 读取\"></a>存储 读取</h4><ul>\n<li><p>存</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608483319025.png\" alt=\"1608483319025\"></p>\n<blockquote>\n<p>16进制：若提前声明为有符号数，则首字符小于8为正，大于等于8（即8到F）为负</p>\n</blockquote>\n</li>\n<li><p>取</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608484025200.png\" alt=\"1608484025200\"></p>\n</li>\n</ul>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><ul>\n<li>指针即地址</li>\n</ul>\n<h4 id=\"指针变量\"><a href=\"#指针变量\" class=\"headerlink\" title=\"指针变量\"></a>指针变量</h4><ul>\n<li><p>本质是变量， 存放的是内存地址，在32位平台 内存地址为4字节</p>\n</li>\n<li><p>*p 是 指针变量p的解引用</p>\n</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608651473443.png\" alt=\"1608651473443\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608651563083.png\" alt=\"1608651563083\"></p>\n<h4 id=\"指针变量的类型\"><a href=\"#指针变量的类型\" class=\"headerlink\" title=\"指针变量的类型\"></a>指针变量的类型</h4><p>int *p</p>\n<ul>\n<li>指针变量 自身类型  <code>int *</code></li>\n<li>指针变量 指向的类型  <code>int</code></li>\n</ul>\n<p>有两种存储方式：（由系统决定，只使用一种）</p>\n<ul>\n<li><p>正向存储</p>\n</li>\n<li><p>反向存储 （绝大多数系统）</p>\n<p>由低位向高位存储   int  123456  高位（1） –&gt; 低位（6）</p>\n</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608652448811.png\" alt=\"1608652448811\"></p>\n<h4 id=\"指针变量的宽度\"><a href=\"#指针变量的宽度\" class=\"headerlink\" title=\"指针变量的宽度\"></a>指针变量的宽度</h4><ul>\n<li>由指向的类型  的长度决定</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608652781547.png\" alt=\"1608652781547\"></p>\n<blockquote>\n<p>p : 0x01020304</p>\n<p>p2: 0x0304</p>\n<p>p3: 0x04</p>\n</blockquote>\n<h4 id=\"指针变量的跨度\"><a href=\"#指针变量的跨度\" class=\"headerlink\" title=\"指针变量的跨度\"></a>指针变量的跨度</h4><ul>\n<li>由指向的类型  的长度决定</li>\n<li>下一个相同类型 值的地址</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653323759.png\" alt=\"1608653323759\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653600141.png\" alt=\"1608653600141\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653646644.png\" alt=\"1608653646644\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653880272.png\" alt=\"1608653880272\"></p>\n<h4 id=\"指针变量的初始化\"><a href=\"#指针变量的初始化\" class=\"headerlink\" title=\"指针变量的初始化\"></a>指针变量的初始化</h4><blockquote>\n<p>未初始化的后果: 因访问非法内存，会主动杀死进程，不会抛出异常</p>\n</blockquote>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614514160173.png\" alt=\"1614514160173\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614516967359.png\" alt=\"1614516967359\"></p>\n<blockquote>\n<p>int num &#x3D; 10;</p>\n<p>num的类型是int类型</p>\n<p>&amp;num的类型是int *类型   int *p &#x3D; &amp;num</p>\n<p>int *p;</p>\n<p>&amp;p –&gt; int **</p>\n</blockquote>\n<h4 id=\"指针注意事项\"><a href=\"#指针注意事项\" class=\"headerlink\" title=\"指针注意事项\"></a>指针注意事项</h4><ol>\n<li><p>void num; 错误，不能定义变量空间大小， 不能开辟有效空间</p>\n</li>\n<li><p>void *p； 正确，void *为指针变量，能够正确开辟4字节空间</p>\n<p>p可以保存任意一级指针， 任意类型</p>\n</li>\n</ol>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614525130058.png\" alt=\"1614525130058\"></p>\n<blockquote>\n<p>指针类型为void *，无指针宽度， 无法读取指针指向值</p>\n</blockquote>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528807601.png\" alt=\"1614528807601\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528888660.png\" alt=\"1614528888660\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528967534.png\" alt=\"1614528967534\"></p>\n<h3 id=\"数组元素的指针\"><a href=\"#数组元素的指针\" class=\"headerlink\" title=\"数组元素的指针\"></a>数组元素的指针</h3><ul>\n<li><p>arr[i]   arr(arr为首元素地址) + i </p>\n<p>arr[3][-2] &#x3D; arr[1]       arr + 3 + (-2)</p>\n</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614875309724.png\" alt=\"1614875309724\"></p>\n<h4 id=\"arr-与-arr的区别\"><a href=\"#arr-与-arr的区别\" class=\"headerlink\" title=\"arr 与 &amp;arr的区别\"></a>arr 与 &amp;arr的区别</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614876238015.png\" alt=\"1614876238015\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614876416343.png\" alt=\"1614876416343\"></p>\n<h4 id=\"指向同一数组的两个指针变量之间的关系\"><a href=\"#指向同一数组的两个指针变量之间的关系\" class=\"headerlink\" title=\"指向同一数组的两个指针变量之间的关系\"></a>指向同一数组的两个指针变量之间的关系</h4><ul>\n<li>指向同一数组的两个指针变量相减  返回的是相差的元素个数</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615010292932.png\" alt=\"1615010292932\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615008207864.png\" alt=\"1615008207864\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615010272100.png\" alt=\"1615010272100\"></p>\n<h3 id=\"数组的-与-的关系\"><a href=\"#数组的-与-的关系\" class=\"headerlink\" title=\"数组的[]与 *() 的关系\"></a>数组的<font color=\"red\">[]</font>与<font color=\"red\"> *() </font>的关系</h3><ul>\n<li>arr[i]  &#x3D;&#x3D;  *(arr + i)</li>\n</ul>\n<h3 id=\"数组的分类\"><a href=\"#数组的分类\" class=\"headerlink\" title=\"数组的分类\"></a>数组的分类</h3><ul>\n<li>静态数组 与 动态数组</li>\n</ul>\n<h3 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针<font color=\"red\">数组</font></h3><ul>\n<li>元素为指针的数组</li>\n<li>int *p[5]  本质：数组p[5]，元素类型 int *</li>\n<li>初始化  int *p[5] &#x3D; [10, 20, 30]</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615032483941.png\" alt=\"1615032483941\"></p>\n<blockquote>\n<p>字符串本质上是数组<br>arr实际上是一个二维数组</p>\n</blockquote>\n<h3 id=\"数组指针\"><a href=\"#数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组<font color=\"red\">指针</font></h3><ul>\n<li>int (*p)[5]   本质：指针p，指向值类型 int arr[5]</li>\n<li>p的指向值类型是数组，指针宽度为数组长度</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615020181846.png\" alt=\"1615020181846\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615021783324.png\" alt=\"1615021783324\"></p>\n<h3 id=\"二维数组分析\"><a href=\"#二维数组分析\" class=\"headerlink\" title=\"二维数组分析\"></a>二维数组分析</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615029770767.png\" alt=\"1615029770767\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615030250630.png\" alt=\"1615030250630\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615031635199.png\" alt=\"1615031635199\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615913563189.png\" alt=\"1615913563189\"></p>\n<h4 id=\"二维数组与一维数组的关系\"><a href=\"#二维数组与一维数组的关系\" class=\"headerlink\" title=\"二维数组与一维数组的关系\"></a>二维数组与一维数组的关系</h4><ul>\n<li><font color=\"red\">任何维度的数组在物理存储上都是一维的</font></li>\n</ul>\n<p>通过一维数组的方式访问二维数组</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615032184224.png\" alt=\"1615032184224\"></p>\n<h3 id=\"多级指针\"><a href=\"#多级指针\" class=\"headerlink\" title=\"多级指针\"></a>多级指针</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615037325544.png\" alt=\"1615037325544\"></p>\n<h3 id=\"指针作为函数参数\"><a href=\"#指针作为函数参数\" class=\"headerlink\" title=\"指针作为函数参数\"></a>指针作为函数参数</h3><ul>\n<li>如果想在<font color=\"blue\">函数内部</font><font color=\"red\">修改</font><font color=\"blue\">外部变量</font>的值，就需要将函数外部变量的地址传递给函数（以指针作为函数的参数）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615038526488.png\" alt=\"1615038526488\"></p>\n<p>修改指针指向</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615046652395.png\" alt=\"1615046652395\"></p>\n<h3 id=\"一维数组名作为函数参数\"><a href=\"#一维数组名作为函数参数\" class=\"headerlink\" title=\"一维数组名作为函数参数\"></a>一维数组名作为函数参数</h3><p> <img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615049857483.png\" alt=\"1615049857483\"></p>\n<h3 id=\"二位数组作为函数参数\"><a href=\"#二位数组作为函数参数\" class=\"headerlink\" title=\"二位数组作为函数参数\"></a>二位数组作为函数参数</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615139054540.png\" alt=\"1615139054540\"></p>\n<h3 id=\"指针作为函数返回值\"><a href=\"#指针作为函数返回值\" class=\"headerlink\" title=\"指针作为函数返回值\"></a>指针作为函数返回值</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141215968.png\" alt=\"1615141215968\"></p>\n<ul>\n<li>使用静态变量 （静态变量在进程执行结束释放）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141331137.png\" alt=\"1615141331137\"></p>\n<h3 id=\"函数名为函数入口地址\"><a href=\"#函数名为函数入口地址\" class=\"headerlink\" title=\"函数名为函数入口地址\"></a>函数名为函数入口地址</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141926710.png\" alt=\"1615141926710\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141991894.png\" alt=\"1615141991894\"></p>\n<h3 id=\"函数名作为参数\"><a href=\"#函数名作为参数\" class=\"headerlink\" title=\"函数名作为参数\"></a>函数名作为参数</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615393707171.png\" alt=\"1615393707171\"></p>\n<h3 id=\"动态内存申请（堆区操作函数）\"><a href=\"#动态内存申请（堆区操作函数）\" class=\"headerlink\" title=\"动态内存申请（堆区操作函数）\"></a>动态内存申请（堆区操作函数）</h3><h4 id=\"分配内存空间函数-malloc\"><a href=\"#分配内存空间函数-malloc\" class=\"headerlink\" title=\"分配内存空间函数 malloc\"></a>分配内存空间函数 malloc</h4><ul>\n<li><code>void *malloc(unsigned int num_bytes);</code>   申请内存地址 存储数据类型不确定  num_size:空间大小的字节数</li>\n<li>调用：<code>(类型说明符 *)malloc(size)</code>   必须做强制类型转换，指定数据类型</li>\n<li>在内存的动态存储器（堆区）中分配长度为size字节的连续区域，用来存储 <strong>类型指定说明符</strong>指定的类型</li>\n<li>函数原型返回<code>void *</code>指针，使用时必须做强制类型转换，指定数据类型</li>\n<li>分配的内存空间内容不确定（原有数据），使用memset初始化</li>\n</ul>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>分配空间的起始地址 （分配成功）</li>\n<li>NULL （分配失败）</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>在调用<code>malloc</code>之后，一定要判断 内存空间是否申请成功</li>\n<li>多次申请的内存，内存地址不一定时连续的</li>\n</ul>\n<h4 id=\"释放内存函数-free函数\"><a href=\"#释放内存函数-free函数\" class=\"headerlink\" title=\"释放内存函数  free函数\"></a>释放内存函数  free函数</h4><ul>\n<li>头文件 ： #include&lt;stdlib.h&gt;</li>\n<li><code>void free(void *ptr)</code></li>\n<li>说明：free函数释放ptr指向的内存</li>\n<li>注意：<strong>ptr指向的内存必须是malloc calloc relloc动态申请的内存</strong>，即只能释放堆区空间</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615482186552.png\" alt=\"1615482186552\"></p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><ol>\n<li>根据用户输入，动态定义数组空间大小</li>\n</ol>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615484129779.png\" alt=\"1615484129779\"></p>\n<h4 id=\"calloc函数\"><a href=\"#calloc函数\" class=\"headerlink\" title=\"calloc函数\"></a>calloc函数</h4><ul>\n<li><code>void *calloc(size_t nmemb, size_t size);</code></li>\n<li>在堆区中，申请nmemb块，每块的大小为size个字节的连续区域</li>\n<li><code>char *p = (char *)calloc(5, 100)</code></li>\n<li><code>calloc</code>函数申请的内存自动初始化为0</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615643898218.png\" alt=\"1615643898218\"></p>\n<h4 id=\"realloc函数\"><a href=\"#realloc函数\" class=\"headerlink\" title=\"realloc函数\"></a>realloc函数</h4><ul>\n<li>动态追加或减少空间</li>\n<li><code>void *realloc(void *s, unsigned int newsize);</code></li>\n<li>在原先s指向的内存基础上重新申请内存，新的内存大小为new_size个字节，如果原先内存后面有足够大的空间，就追加，如果后面的内存空间不足，则realloc函数会在堆区找一个newsize个字节大小的内存申请，将原内存中的内容拷贝过来，然后释放原先的内存，最后返回新内存的地址。</li>\n<li>s：原内存空间首地址； newsize：新申请的空间大小</li>\n<li>返回值：新申请空间的首地址</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615653704339.png\" alt=\"1615653704339\"></p>\n<h4 id=\"堆区空间使用的注意事项\"><a href=\"#堆区空间使用的注意事项\" class=\"headerlink\" title=\"堆区空间使用的注意事项\"></a>堆区空间使用的注意事项</h4><ol>\n<li><p>指向堆区空间的指针变量 不要随便更改指向</p>\n<p><strong>内存泄漏</strong> ： 指针p指向变动，calloc申请的空间无法释放</p>\n<ul>\n<li>进程结束系统会自动释放</li>\n</ul>\n</li>\n<li><p>不要操作已释放的空间</p>\n</li>\n<li><p>不要对堆空间重复释放</p>\n</li>\n</ol>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615657871278.png\" alt=\"1615657871278\"></p>\n<h4 id=\"防止多次释放\"><a href=\"#防止多次释放\" class=\"headerlink\" title=\"防止多次释放\"></a>防止多次释放</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615658148743.png\" alt=\"1615658148743\"></p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"字符串赋值\"><a href=\"#字符串赋值\" class=\"headerlink\" title=\"字符串赋值\"></a>字符串赋值</h4><ul>\n<li>char name[n]  不能“&#x3D;”直接赋值，使用函数strcpy</li>\n</ul>\n<h4 id=\"字符串处理函数\"><a href=\"#字符串处理函数\" class=\"headerlink\" title=\"字符串处理函数\"></a>字符串处理函数</h4><ul>\n<li>只要是以str开头的函数都是字符串处理函数， 遇到‘\\0’结束</li>\n<li><code>#include&lt;string.h&gt;</code></li>\n</ul>\n<h5 id=\"strlen\"><a href=\"#strlen\" class=\"headerlink\" title=\"strlen\"></a>strlen</h5><ul>\n<li><code>int strlen(const char *str)</code>    const：常量</li>\n<li>字符串长度，不包含‘\\0’</li>\n<li>参数：字符串内存空间的首地址</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test19</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">128</span>] = <span class=\"string\">&quot;hahaha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf));  <span class=\"comment\">//128</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf));  <span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf1[] = <span class=\"string\">&quot;hahaha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf1) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf1));  <span class=\"comment\">//7</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf1) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf1));  <span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf2[] = <span class=\"string\">&quot;haha\\0ha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf2) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf2));  <span class=\"comment\">//8</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf2) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf2));  <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf3[] = <span class=\"string\">&quot;haha\\123\\\\ha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf3) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf3));  <span class=\"comment\">//9</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf3) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf3));  <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// \\\\作用和python相同</span></span><br><span class=\"line\">\t<span class=\"comment\">// \\123 代表一个字符  八进制转义 --&gt; 83（十进制,1*8^2 + 2*8^1 +_3*8^0）</span></span><br><span class=\"line\">\t<span class=\"comment\">// ascII码  83为 S</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf3);  <span class=\"comment\">// hahaS\\ha  </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf4[] = <span class=\"string\">&quot;haha\\1234\\\\ha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf4) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf4));  <span class=\"comment\">//10</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf4) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf4));  <span class=\"comment\">//9</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf4);  <span class=\"comment\">// hahaS4\\ha </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf5[] = <span class=\"string\">&quot;haha\\12\\\\ha&quot;</span>;  <span class=\"comment\">// \\12 --&gt; 10(十进制) 为换行符</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf5) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf5));  <span class=\"comment\">//9</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf5) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf5));  <span class=\"comment\">//8</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf5);  <span class=\"comment\">// haha(换行符\\t,换行)\\ha </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf6[] = <span class=\"string\">&quot;haha\\823\\\\ha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// \\823 不是八进制数，所以和python一样‘\\’后第一个字符保持原样输出</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf6) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf6));  <span class=\"comment\">//11</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf6) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf6));  <span class=\"comment\">//10</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf6);  <span class=\"comment\">// haha823\\ha</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf7[] = <span class=\"string\">&quot;haha\\x2fha&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// \\x2f \\x为16进制，转义 --&gt; ‘/’</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(buf7) = %d\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(buf7));  <span class=\"comment\">//8</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;strlen(buf7) = %d\\n&quot;</span>, <span class=\"built_in\">strlen</span>(buf7));  <span class=\"comment\">//7</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf7);  <span class=\"comment\">// haha/ha</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code> char buf8[] = &quot;\\0haha\\0ha&quot;;</code></p>\n</blockquote>\n<p><strong>练习：</strong></p>\n<p>​\t自定义strlen函数测量字符串长度</p>\n<h5 id=\"strcpy-strncpy\"><a href=\"#strcpy-strncpy\" class=\"headerlink\" title=\"strcpy &#x2F; strncpy\"></a>strcpy &#x2F; strncpy</h5><ol>\n<li><p><strong>strcpy</strong> </p>\n<ul>\n<li><code>char *strcpy(char *dest, const char *src)</code></li>\n<li>将src指向的字符串复制到dest指向的空间中</li>\n<li>返回值：返回dest字符串的首地址</li>\n<li><strong>注意：遇到‘\\0’结束拷贝，‘\\0’也会拷贝过去</strong></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615734899331.png\" alt=\"1615734899331\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615735409746.png\" alt=\"1615735409746\"></p>\n</li>\n<li><p><strong>strncpy</strong></p>\n<ul>\n<li><code>char *strncpy(char *dest, const char *src, int num)</code></li>\n<li>将src指向的字符串的前num个 复制到dest所指向的空间中</li>\n<li>返回值：返回dest字符串的首地址</li>\n<li><strong>注意：‘\\0’不拷贝</strong></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736428291.png\" alt=\"1615736428291\"></p>\n</li>\n</ol>\n<h5 id=\"strcat-strncat\"><a href=\"#strcat-strncat\" class=\"headerlink\" title=\"strcat &#x2F; strncat\"></a>strcat &#x2F; strncat</h5><ol>\n<li><strong>strcat</strong></li>\n</ol>\n<ul>\n<li><code>char *strcat(char *dest, const char *src)</code></li>\n<li>将src的字符串拼接到dest的末尾（dest第一个’\\0’的位置）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736675876.png\" alt=\"1615736675876\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736929332.png\" alt=\"1615736929332\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615737269467.png\" alt=\"1615737269467\"></p>\n<ol start=\"2\">\n<li><strong>strncat</strong></li>\n</ol>\n<ul>\n<li><code>char *strncat(char *dest, const char *src, int num)</code></li>\n</ul>\n<h5 id=\"strcmp-strncmp\"><a href=\"#strcmp-strncmp\" class=\"headerlink\" title=\"strcmp &#x2F; strncmp\"></a>strcmp &#x2F; strncmp</h5><ol>\n<li><strong>strcmp</strong></li>\n</ol>\n<ul>\n<li>&#96;int strcmp(const char *s1, const char *s2);</li>\n<li>将s1和s2指向的字符串 逐个字符比较</li>\n<li>返回值：<ul>\n<li>&gt;0 : s1 &gt; s2</li>\n<li>&lt;0 : s1 &lt; s2</li>\n<li>&#x3D;&#x3D;0: s1 &#x3D;&#x3D; s2</li>\n</ul>\n</li>\n</ul>\n<p> <img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615909011144.png\" alt=\"1615909011144\"></p>\n<ol start=\"2\">\n<li><p><strong>strncmp</strong></p>\n<ul>\n<li>局部比较</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615909136851.png\" alt=\"1615909136851\"></p>\n</li>\n</ol>\n<h4 id=\"字符串变换函数\"><a href=\"#字符串变换函数\" class=\"headerlink\" title=\"字符串变换函数\"></a>字符串变换函数</h4><h5 id=\"strchr-字符查找函数\"><a href=\"#strchr-字符查找函数\" class=\"headerlink\" title=\"strchr  字符查找函数\"></a>strchr  字符查找函数</h5><ul>\n<li><code>char *strchr(const char *str1, char ch)</code></li>\n<li>在字符串str1中查找字母ch出现的位置</li>\n<li>返回值：返回第一次出现的地址；如果找不到，返回NULL</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910584152.png\" alt=\"1615910584152\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910767542.png\" alt=\"1615910767542\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910804851.png\" alt=\"1615910804851\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910859033.png\" alt=\"1615910859033\"></p>\n<h5 id=\"strstr-字符串查找函数\"><a href=\"#strstr-字符串查找函数\" class=\"headerlink\" title=\"strstr  字符串查找函数\"></a>strstr  字符串查找函数</h5><ul>\n<li><code>char *strstr(const char *s1, const char *s2)</code></li>\n<li>在字符串str1中查找字符串s2出现的地址</li>\n<li>返回值：返回第一次出现的地址；如果找不到，返回NULL</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615911209801.png\" alt=\"1615911209801\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615911404284.png\" alt=\"1615911404284\"></p>\n<h5 id=\"memset-内存空间设置函数\"><a href=\"#memset-内存空间设置函数\" class=\"headerlink\" title=\"memset  内存空间设置函数\"></a>memset  内存空间设置函数</h5><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616083160090.png\" alt=\"1616083160090\"></p>\n<h5 id=\"atoi-atol-atof-字符串转换功能\"><a href=\"#atoi-atol-atof-字符串转换功能\" class=\"headerlink\" title=\"atoi &#x2F; atol &#x2F; atof  字符串转换功能\"></a>atoi &#x2F; atol &#x2F; atof  字符串转换功能</h5><ul>\n<li>将字符串转换为数值  int、long、float</li>\n<li>头文件： <code>stdlib.h</code></li>\n</ul>\n<h5 id=\"strtok-字符串分割函数\"><a href=\"#strtok-字符串分割函数\" class=\"headerlink\" title=\"strtok  字符串分割函数\"></a>strtok  字符串分割函数</h5><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616258485175.png\" alt=\"1616258485175\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616323911830.png\" alt=\"1616323911830\"></p>\n<blockquote>\n<p>注意：因为是对字符串本体进行替换切割，所以不能切割字符串常量</p>\n</blockquote>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616342668857.png\" alt=\"1616342668857\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343236165.png\" alt=\"1616343236165\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343377352.png\" alt=\"1616343377352\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343485987.png\" alt=\"1616343485987\"></p>\n<p> <img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343707967.png\" alt=\"1616343707967\"></p>\n<h4 id=\"printf组包\"><a href=\"#printf组包\" class=\"headerlink\" title=\"printf组包\"></a>printf组包</h4><h5 id=\"spirntf\"><a href=\"#spirntf\" class=\"headerlink\" title=\"spirntf\"></a>spirntf</h5><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616344622971.png\" alt=\"1616344622971\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616431658516.png\" alt=\"1616431658516\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616431718075.png\" alt=\"1616431718075\"></p>\n<h5 id=\"fprintf\"><a href=\"#fprintf\" class=\"headerlink\" title=\"fprintf\"></a>fprintf</h5><h4 id=\"sscanf解包\"><a href=\"#sscanf解包\" class=\"headerlink\" title=\"sscanf解包\"></a>sscanf解包</h4><h5 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf\"></a>scanf</h5><h5 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf\"></a>sscanf</h5><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616513012763.png\" alt=\"1616513012763\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516177996.png\" alt=\"1616516177996\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516563147.png\" alt=\"1616516563147\"></p>\n<ul>\n<li><strong>使用%*s  %*d 跳过提取的内容</strong></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516793201.png\" alt=\"1616516793201\"></p>\n<ul>\n<li><strong>使用 %[n]s %[n]d 提取指定宽度的字符串或数据</strong></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616517374110.png\" alt=\"1616517374110\"></p>\n<ul>\n<li><strong>%[a-z]</strong> 提取a-z的字符串</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597333338.png\" alt=\"1616597333338\"></p>\n<ul>\n<li><strong>%[aBc]</strong> 只提取a、B、c的字符串</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597741839.png\" alt=\"1616597741839\"></p>\n<ul>\n<li><strong>[^abc]</strong> 提取非a、b、c的字符串</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597884318.png\" alt=\"1616597884318\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616599839803.png\" alt=\"1616599839803\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616600761194.png\" alt=\"1616600761194\"></p>\n<h5 id=\"fscanf\"><a href=\"#fscanf\" class=\"headerlink\" title=\"fscanf\"></a>fscanf</h5><h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><ul>\n<li>修饰变量为只读（限制通过变量名写入，可通过地址写入）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616601488114.png\" alt=\"1616601488114\"></p>\n<ul>\n<li><p>*<em>const int <em>p</em></em></p>\n<ul>\n<li>const在*的左边，表示const修饰的是*, 而不是p</li>\n<li>不能通过<em><strong>p</strong>修改指向空间的内容，但是可以修改p指向的空间地址（</em>p 只读， p可读可写）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616602502316.png\" alt=\"1616602502316\"></p>\n</li>\n<li><p><strong>int * const p</strong></p>\n<ul>\n<li>const在*的右边，便是const修饰的是p，而不是*</li>\n<li>可以通过*p修改指向空间的内容，但不可以修改p指向的空间地址（*P可读可写，p只读）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616603192860.png\" alt=\"1616603192860\"></p>\n</li>\n<li><p><strong>const int * const p</strong></p>\n</li>\n</ul>\n<h3 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509612859.png\" alt=\"1617509612859\"></p>\n<h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616690154204.png\" alt=\"1616690154204\"></p>\n<h4 id=\"结构体定义形式\"><a href=\"#结构体定义形式\" class=\"headerlink\" title=\"结构体定义形式\"></a>结构体定义形式</h4><ol>\n<li>先定义类型 再定义变量</li>\n<li>定义类型的同时定义变量</li>\n<li>定义一次性结构体</li>\n</ol>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616690526011.png\" alt=\"1616690526011\"></p>\n<ul>\n<li>struct 是结构体关键字 </li>\n<li>stu 是结构体类型名</li>\n<li>使用结构体类型 必须是 struct stu</li>\n<li>num name 叫做结构体中的成员</li>\n<li>定义结构体类型时，不要给成员初始化， 并未为结构体分配空间</li>\n<li>结构体成员拥有独立的空间</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616692258085.png\" alt=\"1616692258085\"></p>\n<ul>\n<li><p>结构体变量赋值</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616842826767.png\" alt=\"1616842826767\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616842854956.png\" alt=\"1616842854956\"></p>\n</li>\n<li><p>结构体变量初始化</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616847831688.png\" alt=\"1616847831688\"></p>\n</li>\n<li><p>清空结构体变量</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616847938029.png\" alt=\"1616847938029\"></p>\n</li>\n<li><p>结构体之间的赋值</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616862670293.png\" alt=\"1616862670293\"></p>\n</li>\n</ul>\n<h4 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616865170402.png\" alt=\"1616865170402\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616866581302.png\" alt=\"1616866581302\"></p>\n<h4 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617519519844.png\" alt=\"1617519519844\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617519553547.png\" alt=\"1617519553547\"></p>\n<ul>\n<li>从堆区给结构体申请空间</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524987601.png\" alt=\"1617524987601\"></p>\n<ul>\n<li>结构体指针作为函数参数</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524731011.png\" alt=\"1617524731011\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524747415.png\" alt=\"1617524747415\"></p>\n<ul>\n<li>从堆区申请一个结构体数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">void test27() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;输入结构体数量：&quot;</span>);</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t// 定义结构体指针</span><br><span class=\"line\">\tstruct stu *arr;</span><br><span class=\"line\">\t// 分配空间</span><br><span class=\"line\">\tarr = (struct stu *)calloc(n, sizeof(struct stu));</span><br><span class=\"line\">\t// 初始化</span><br><span class=\"line\">\t// me</span><br><span class=\"line\">    mset(arr, <span class=\"number\">0</span>, sizeof(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t// printf(<span class=\"string\">&quot;%d\\n&quot;</span>, sizeof((*arr).name));</span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;输入%d个学生信息：\\n&quot;</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t// scanf_s(<span class=\"string\">&quot;%d %s %d&quot;</span>, &amp;(*(arr + i)).num, (*(arr + i)).name, sizeof((*arr).name), &amp;(*(arr + i)).age);</span><br><span class=\"line\">\t\tscanf_s(<span class=\"string\">&quot;%d %s %d&quot;</span>, &amp;(arr + i)-&gt;num, (arr + i)-&gt;name, sizeof(arr-&gt;name), &amp;(arr + i)-&gt;age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;-----------------------------\\n&quot;</span>);</span><br><span class=\"line\">\t// 根据年龄排序</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*(arr + j)).age &gt; (*(arr + j + <span class=\"number\">1</span>)).age) &#123;</span><br><span class=\"line\">\t\t\t\tstruct stu temp;</span><br><span class=\"line\">\t\t\t\ttemp = *(arr + j);</span><br><span class=\"line\">\t\t\t\t*(arr + j) = *(arr + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(arr + j + <span class=\"number\">1</span>) = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;%d - %s - %d\\n&quot;</span>, (*(arr + i)).num, (*(arr + i)).name, (*(arr + i)).age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 释放空间</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr != NULL) &#123;</span><br><span class=\"line\">\t\tfree(arr);</span><br><span class=\"line\">\t\tarr = NULL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结构体的内存对齐\"><a href=\"#结构体的内存对齐\" class=\"headerlink\" title=\"结构体的内存对齐\"></a>结构体的内存对齐</h4><ul>\n<li>结构体类型大小 为 对齐后的大小，不等于各成员类型的大小之和</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537010434.png\" alt=\"1617537010434\"></p>\n<ul>\n<li>对齐规则</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537084831.png\" alt=\"1617537084831\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537981571.png\" alt=\"1617537981571\"></p>\n<h4 id=\"结构体嵌套\"><a href=\"#结构体嵌套\" class=\"headerlink\" title=\"结构体嵌套\"></a>结构体嵌套</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617539445731.png\" alt=\"1617539445731\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617543658002.png\" alt=\"1617543658002\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617553525565.png\" alt=\"1617553525565\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617553722780.png\" alt=\"1617553722780\"></p>\n<h4 id=\"指定对齐规则\"><a href=\"#指定对齐规则\" class=\"headerlink\" title=\"指定对齐规则\"></a>指定对齐规则</h4><ul>\n<li><code>#pragma pack (value)</code></li>\n<li>value 值为 2的整数倍</li>\n<li>实际对齐值 &#x3D; min(指定对齐值，默认数据类型对齐值)</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617554702446.png\" alt=\"1617554702446\"></p>\n<h4 id=\"位段\"><a href=\"#位段\" class=\"headerlink\" title=\"位段\"></a>位段</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617611596796.png\" alt=\"1617611596796\"></p>\n<ul>\n<li>位段压缩</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617611932762.png\" alt=\"1617611932762\"></p>\n<ul>\n<li><p>位段不能取地址</p>\n<ul>\n<li>内存地址是按字节编址，最小单位为一个字节</li>\n</ul>\n</li>\n<li><p>位段的赋值</p>\n<ul>\n<li>不要超过位段的大小 ， 只会保留段位大小的数据（数据从低位向高位存储）</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617629878265.png\" alt=\"1617629878265\"></p>\n</li>\n<li><p>无意义位段</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634058730.png\" alt=\"1617634058730\"></p>\n</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634141772.png\" alt=\"1617634141772\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634720640.png\" alt=\"1617634720640\"></p>\n<ul>\n<li><p>另起位段</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617636961478.png\" alt=\"1617636961478\"></p>\n</li>\n</ul>\n<h3 id=\"共用体\"><a href=\"#共用体\" class=\"headerlink\" title=\"共用体\"></a>共用体</h3><ul>\n<li>union</li>\n<li>所有成员共享同一份空间，大小由最大成员决定</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617637566105.png\" alt=\"1617637566105\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617638200226.png\" alt=\"1617638200226\"></p>\n<blockquote>\n<p>求：A.a + A.b + A.c的值    0x01020203</p>\n</blockquote>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617639445772.png\" alt=\"1617639445772\"></p>\n<h3 id=\"结构体-与-共用体-的区别\"><a href=\"#结构体-与-共用体-的区别\" class=\"headerlink\" title=\"结构体 与 共用体 的区别\"></a>结构体 与 共用体 的区别</h3><ul>\n<li>结构体<ul>\n<li>struct</li>\n<li>所有成员拥有独立空间</li>\n</ul>\n</li>\n<li>共用体（联合体）<ul>\n<li>union</li>\n<li>所有成员共享同一份空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><ul>\n<li><p>将变量的值一一列举出来，变量的值只限于列举出来的值的范围内</p>\n</li>\n<li><pre><code class=\"python\">enum 枚举名\n&#123;\n    枚举值（枚举元素）\n&#125;；\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1617640571878</span>](C语言学习\\<span class=\"number\">1617640571878.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 排序算法</span><br><span class=\"line\"></span><br><span class=\"line\">#### 冒泡排序</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">1617035924356</span>](C语言学习\\<span class=\"number\">1617035924356.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"function\">python</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test26</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *arr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;指定数字数量：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf_s</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入%d个数字\\n&quot;</span>, n);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开辟内存空间</span></span><br><span class=\"line\">\tarr = (<span class=\"type\">int</span> *)<span class=\"built_in\">calloc</span>(n, <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">\t<span class=\"comment\">// 判断空间是否开辟成功</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">perror</span>(<span class=\"string\">&quot;calloc&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf_s</span>(<span class=\"string\">&quot;%d&quot;</span>, arr + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 冒泡排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 释放内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(arr);</span><br><span class=\"line\">\t\tarr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617121401672.png\" alt=\"1617121401672\"></p>\n<h4 id=\"结构体数组排序\"><a href=\"#结构体数组排序\" class=\"headerlink\" title=\"结构体数组排序\"></a>结构体数组排序</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 定义结构体</span><br><span class=\"line\">struct stu &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> num;</span><br><span class=\"line\">\tchar name[<span class=\"number\">32</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void test27() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;输入结构体数量：&quot;</span>);</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t// 定义结构体指针</span><br><span class=\"line\">\tstruct stu *arr;</span><br><span class=\"line\">\t// 分配空间</span><br><span class=\"line\">\tarr = (struct stu *)calloc(n, sizeof(struct stu));</span><br><span class=\"line\">\t// 初始化</span><br><span class=\"line\">\t// memset(arr, <span class=\"number\">0</span>, sizeof(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t// printf(<span class=\"string\">&quot;%d\\n&quot;</span>, sizeof((*arr).name));</span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;输入%d个学生信息：\\n&quot;</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tscanf_s(<span class=\"string\">&quot;%d %s %d&quot;</span>, &amp;(*(arr + i)).num, (*(arr + i)).name, sizeof((*arr).name), &amp;(*(arr + i)).age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(<span class=\"string\">&quot;-----------------------------\\n&quot;</span>);</span><br><span class=\"line\">\t// 根据年龄排序</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*(arr + j)).age &gt; (*(arr + j + <span class=\"number\">1</span>)).age) &#123;</span><br><span class=\"line\">\t\t\t\tstruct stu temp;</span><br><span class=\"line\">\t\t\t\ttemp = *(arr + j);</span><br><span class=\"line\">\t\t\t\t*(arr + j) = *(arr + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(arr + j + <span class=\"number\">1</span>) = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">&quot;%d - %s - %d\\n&quot;</span>, (*(arr + i)).num, (*(arr + i)).name, (*(arr + i)).age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 释放空间</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr != NULL) &#123;</span><br><span class=\"line\">\t\tfree(arr);</span><br><span class=\"line\">\t\tarr = NULL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><ul>\n<li><p>使用步骤：</p>\n<ul>\n<li>先用已有类型定义一个变量</li>\n<li>用 别名 替换 变量名</li>\n<li>在表达式前添加 typedef</li>\n</ul>\n</li>\n<li><p>用例</p>\n<ul>\n<li><p>typedef int INT32;</p>\n</li>\n<li><p>typedef int ARR_TYPE[5];</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509321074.png\" alt=\"1617509321074\"></p>\n</li>\n<li><p>typedef int *P_TYPE;</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509452249.png\" alt=\"1617509452249\"></p>\n</li>\n<li><p>typedef int (*FUN_P)(int x, int y);   函数指针类型</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509784618.png\" alt=\"1617509784618\"></p>\n</li>\n<li><p>结构体类型</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617510034360.png\" alt=\"1617510034360\"></p>\n<p>结构体指针类型</p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617510468750.png\" alt=\"1617510468750\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"数组在存储数据上的缺点\"><a href=\"#数组在存储数据上的缺点\" class=\"headerlink\" title=\"数组在存储数据上的缺点\"></a>数组在存储数据上的缺点</h4><ul>\n<li>静态数组必须确定数组大小，不能实现动态的申请、释放</li>\n<li>动态数组不便于局部数据的申请、释放（中间元素的插入、删除）</li>\n<li>优点：便于遍历</li>\n</ul>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>链表是一种物理存储上非连续，数据元素的逻辑顺序通过链表中指针链接次序实现的一种线性存储结构</p>\n</li>\n<li><p>特点：</p>\n<ul>\n<li><p>链表由一系列节点组成，节点在运行时动态生成（molloc),每个节点包括两个部分：</p>\n<ul>\n<li>数据域：存储数据元素</li>\n<li>指针域：存储下一个节点地址</li>\n</ul>\n</li>\n<li><p>节点一般采用 结构体 的组织形式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef struct student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">float</span> score;</span><br><span class=\"line\">    struct student *<span class=\"built_in\">next</span>;</span><br><span class=\"line\">&#125; STU;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642359352.png\" alt=\"1617642359352\"></p>\n</li>\n</ul>\n<h4 id=\"静态链表\"><a href=\"#静态链表\" class=\"headerlink\" title=\"静态链表\"></a>静态链表</h4><p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642765166.png\" alt=\"1617642765166\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642789017.png\" alt=\"1617642789017\"></p>\n<p><img src=\"/2020/09/26/CC++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642831332.png\" alt=\"1617642831332\"></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><h4 id=\"字符存在正负之分\"><a href=\"#字符存在正负之分\" class=\"headerlink\" title=\"字符存在正负之分\"></a>字符存在正负之分</h4><ul>\n<li>字符是一个字节，储存范围 -128~127</li>\n</ul>\n<h4 id=\"int-与-unsigned-int\"><a href=\"#int-与-unsigned-int\" class=\"headerlink\" title=\"int 与 unsigned int\"></a>int 与 unsigned int</h4><ul>\n<li>在内存地址中的存储是相通的，该内存地址的数是有符号数还是无符号数 取决于输出方式  %d（有符号数） %u（无符号数）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">test3</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有符号数与无符号数相乘，先转换为无符号数再计算</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c1=<span class=\"number\">0xFE</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c2=<span class=\"number\">0x02</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> s1=c1*c2;  <span class=\"comment\">//有符号数相乘</span></span><br><span class=\"line\">    <span class=\"comment\">// c1转换为unsigned int 占4个字符 0xFFFFFFFE，c2转换为unsigned char 占1个字符</span></span><br><span class=\"line\">    <span class=\"comment\">// -2 * 2 = -4  两个有符号数相乘，占4字节  有符号：-4  无符号：4294967292</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s2=c1*(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)c2;</span><br><span class=\"line\">    <span class=\"comment\">// c1转换为unsigned char 占1个字符 为254，c2转换为unsigned int 占4个字符0x00000002</span></span><br><span class=\"line\">    <span class=\"comment\">// -2 * 2 = -4  两个有符号数相乘，占1字节  有符号：-4  无符号：508</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s3=(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)c1*c2;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s4=(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)c1*c2;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s5=(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)c1*(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)c2;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,%u,%u,%u,%u\\n&quot;</span>,s1,s2,s3,s4,s5);  <span class=\"comment\">// -4,4294967292,508,4294967292</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%u\\n&quot;</span>, c1);  <span class=\"comment\">// 4294967294</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, s2);</span><br><span class=\"line\">    <span class=\"comment\">// s2 与 s3 有符号数相等  无符号数不同（因为占位数不同）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["C"]},{"title":"G0-运算符","url":"/2020/06/04/Golang/G0-%E8%BF%90%E7%AE%97%E7%AC%A6/index.html","content":"<h4 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h4><ul>\n<li>假定 A 值为 10，B 值为 20。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">相加</td>\n<td align=\"left\">A + B 输出结果 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">相减</td>\n<td align=\"left\">A - B 输出结果 -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">相乘</td>\n<td align=\"left\">A * B 输出结果 200</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">相除</td>\n<td align=\"left\">B &#x2F; A 输出结果 2</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">求余</td>\n<td align=\"left\">B % A 输出结果 0</td>\n</tr>\n<tr>\n<td align=\"left\">++</td>\n<td align=\"left\">自增</td>\n<td align=\"left\">A++ 输出结果 11</td>\n</tr>\n<tr>\n<td align=\"left\">–</td>\n<td align=\"left\">自减</td>\n<td align=\"left\">A– 输出结果 9</td>\n</tr>\n</tbody></table>\n<h4 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h4><ul>\n<li>假定 A 值为 10，B 值为 20。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;&#x3D;</td>\n<td align=\"left\">检查两个值是否相等，如果相等返回 True 否则返回 False。</td>\n<td align=\"left\">(A &#x3D;&#x3D; B) 为 False</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>\n<td align=\"left\">(A !&#x3D; B) 为 True</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>\n<td align=\"left\">(A &gt; B) 为 False</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>\n<td align=\"left\">(A &lt; B) 为 True</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&#x3D;</td>\n<td align=\"left\">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>\n<td align=\"left\">(A &gt;&#x3D; B) 为 False</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&#x3D;</td>\n<td align=\"left\">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>\n<td align=\"left\">(A &lt;&#x3D; B) 为 True</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li>假定 A 值为 True，B 值为 False。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td>\n<td align=\"left\">(A &amp;&amp; B) 为 False</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td>\n<td align=\"left\">(A || B) 为 True</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td>\n<td align=\"left\">!(A &amp;&amp; B) 为 True</td>\n</tr>\n</tbody></table>\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">按位与运算符”&amp;”是双目运算符。 其功能是参与运算的两数各对应的二进位相与。</td>\n<td align=\"left\">(A &amp; B) 结果为 12, 二进制为 0000 1100</td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\">按位或运算符”|”是双目运算符。 其功能是参与运算的两数各对应的二进位相或</td>\n<td align=\"left\">(A | B) 结果为 61, 二进制为 0011 1101</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">按位异或运算符”^”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</td>\n<td align=\"left\">(A ^ B) 结果为 49, 二进制为 0011 0001</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;</td>\n<td align=\"left\">左移运算符”&lt;&lt;”是双目运算符。左移n位就是乘以2的n次方。 其功能把”&lt;&lt;”左边的运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td align=\"left\">A &lt;&lt; 2 结果为 240 ，二进制为 1111 0000</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;</td>\n<td align=\"left\">右移运算符”&gt;&gt;”是双目运算符。右移n位就是除以2的n次方。 其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td>\n<td align=\"left\">A &gt;&gt; 2 结果为 15 ，二进制为 0000 1111</td>\n</tr>\n</tbody></table>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">简单的赋值运算符，将一个表达式的值赋给一个左值</td>\n<td align=\"left\">C &#x3D; A + B 将 A + B 表达式结果赋值给 C</td>\n</tr>\n<tr>\n<td align=\"left\">+&#x3D;</td>\n<td align=\"left\">相加后再赋值</td>\n<td align=\"left\">C +&#x3D; A 等于 C &#x3D; C + A</td>\n</tr>\n<tr>\n<td align=\"left\">-&#x3D;</td>\n<td align=\"left\">相减后再赋值</td>\n<td align=\"left\">C -&#x3D; A 等于 C &#x3D; C - A</td>\n</tr>\n<tr>\n<td align=\"left\">*&#x3D;</td>\n<td align=\"left\">相乘后再赋值</td>\n<td align=\"left\">C *&#x3D; A 等于 C &#x3D; C * A</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;&#x3D;</td>\n<td align=\"left\">相除后再赋值</td>\n<td align=\"left\">C &#x2F;&#x3D; A 等于 C &#x3D; C &#x2F; A</td>\n</tr>\n<tr>\n<td align=\"left\">%&#x3D;</td>\n<td align=\"left\">求余后再赋值</td>\n<td align=\"left\">C %&#x3D; A 等于 C &#x3D; C % A</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;&#x3D;</td>\n<td align=\"left\">左移后赋值</td>\n<td align=\"left\">C &lt;&lt;&#x3D; 2 等于 C &#x3D; C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;&#x3D;</td>\n<td align=\"left\">右移后赋值</td>\n<td align=\"left\">C &gt;&gt;&#x3D; 2 等于 C &#x3D; C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;&#x3D;</td>\n<td align=\"left\">按位与后赋值</td>\n<td align=\"left\">C &amp;&#x3D; 2 等于 C &#x3D; C &amp; 2</td>\n</tr>\n<tr>\n<td align=\"left\">^&#x3D;</td>\n<td align=\"left\">按位异或后赋值</td>\n<td align=\"left\">C ^&#x3D; 2 等于 C &#x3D; C ^ 2</td>\n</tr>\n<tr>\n<td align=\"left\">|&#x3D;</td>\n<td align=\"left\">按位或后赋值</td>\n<td align=\"left\">C |&#x3D; 2 等于 C &#x3D; C | 2</td>\n</tr>\n</tbody></table>\n","tags":["Go"]},{"title":"Go-学习之旅","url":"/2020/06/04/Golang/Go-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/index.html","content":"<h2 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h2><p>学习Go以应对公司业务在区块链上的拓展</p>\n","tags":["Go"]},{"title":"Go-指针","url":"/2020/06/04/Golang/Go-%E6%8C%87%E9%92%88/index.html","content":"<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><ul>\n<li>指针变量:存储地址的变量</li>\n<li>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针。其零值为 <code>nil</code>。</li>\n<li><code>&amp;</code> 操作符会生成一个指向其操作数的指针</li>\n<li><code>*</code> 操作符表示指针指向的底层值。</li>\n</ul>\n<h4 id=\"指针类型-与-解引用\"><a href=\"#指针类型-与-解引用\" class=\"headerlink\" title=\"指针类型 与 解引用\"></a>指针类型 与 解引用</h4><ul>\n<li>解引用 间接引用 或 重定向</li>\n</ul>\n<p><img src=\"/2020/06/04/Golang/Go-%E6%8C%87%E9%92%88/index/1591197431448.jpg\" alt=\"1591197431448\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti, j := <span class=\"number\">42</span>, <span class=\"number\">2701</span></span><br><span class=\"line\">\tp := &amp;i</span><br><span class=\"line\">\tfmt.Println(*p)</span><br><span class=\"line\">\t*p = <span class=\"number\">21</span></span><br><span class=\"line\">\tfmt.Println(i)</span><br><span class=\"line\">\tp = &amp;j</span><br><span class=\"line\">\t*p = *p / <span class=\"number\">37</span></span><br><span class=\"line\">\tfmt.Println(j)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"内存分析-与-栈帧\"><a href=\"#内存分析-与-栈帧\" class=\"headerlink\" title=\"内存分析 与 栈帧\"></a>内存分析 与 栈帧</h4><ul>\n<li>栈帧: <ul>\n<li>用来给函数运行提供内存空间,取内存于stack上</li>\n<li>函数调用 产生栈帧; 调用结束 释放栈帧</li>\n<li>存储:1.局部变量 2.形参 (形参与局部变量存储地位等同) 3.内存字段描述值(存储栈基指针与栈顶指针的地址)</li>\n</ul>\n</li>\n<li><strong>栈顶指针</strong>与<strong>栈基指针</strong>之间为 <strong>栈帧</strong></li>\n</ul>\n<p><img src=\"/2020/06/04/Golang/Go-%E6%8C%87%E9%92%88/index/1591197572373.png\" alt=\"1591197572373\"></p>\n","tags":["Go"]},{"title":"Go基础","url":"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index.html","content":"<h4 id=\"println-与-fmt-println\"><a href=\"#println-与-fmt-println\" class=\"headerlink\" title=\"println() 与 fmt.println()\"></a>println() 与 fmt.println()</h4><ul>\n<li><p>内置<code>print</code>&#x2F;<code>println</code>函数的调用不能接受数组和结构体参数。</p>\n</li>\n<li><p>对于组合类型的参数，内置的<code>print</code>&#x2F;<code>println</code>函数将输出参数的底层值部的地址，而<code>fmt</code>和<code>log</code>标准库包中的打印函数将输出参数的字面值。</p>\n</li>\n<li><p>目前（Go 1.12），对于标准编译器，调用内置的<code>print</code>&#x2F;<code>println</code>函数不会使调用参数引用的值逃逸到堆上，而<code>fmt</code>和<code>log</code>标准库包中的的打印函数将使调用参数引用的值逃逸到堆上。</p>\n</li>\n<li><p>如果一个实参有<code>String() string</code>或<code>Error() string</code>方法，那么<code>fmt</code>和<code>log</code>标准库包里的打印函数在打印参数时会调用这两个方法，而内置的<code>print</code>&#x2F;<code>println</code>函数则会忽略参数的这些方法。</p>\n</li>\n</ul>\n<h4 id=\"rand-Intn-与-rand-Int\"><a href=\"#rand-Intn-与-rand-Int\" class=\"headerlink\" title=\"rand.Intn() 与 rand.Int()\"></a>rand.Intn() 与 rand.Int()</h4><ul>\n<li>rand.Intn () 函数是个伪随机函数，不管运行多少次都只会返回同样的随机数，因为它默认的资源就是单一值，所以必须调用 rand.Seed (), 并且传入一个变化的值作为参数，如 time.Now().UnixNano() , 就是可以生成时刻变化的值.</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;time&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 要得到不同的数字，需为生成器提供不同的种子数</span></span><br><span class=\"line\">\t<span class=\"comment\">// 必须调用 rand.Seed (), 并且传入一个变化的值作为参数，如 time.Now().UnixNano() , 就是可以生成时刻变化的值.</span></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\t<span class=\"comment\">// rand.Intn () 函数是个伪随机函数，不管运行多少次都只会返回同样的随机数</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;My favorite number is&quot;</span>, rand.Intn(<span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;My favorite number is&quot;</span>, rand.Intn(<span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;My favorite number is&quot;</span>, rand.Int())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"和-：\"><a href=\"#和-：\" class=\"headerlink\" title=\"&#x3D; 和 ：&#x3D;\"></a>&#x3D; 和 ：&#x3D;</h4><ul>\n<li>&#x3D; 是赋值，  :&#x3D; 是声明变量并赋值</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// = 使用 必须先var声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a</span><br><span class=\"line\">a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c <span class=\"type\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// := 是声明并赋值，由系统自动推断类型，不需要var关键字</span></span><br><span class=\"line\">d := <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x, y <span class=\"type\">string</span>)</span></span> (<span class=\"type\">string</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> y, x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(swap(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ta, b := swap(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c, d = swap(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(c,d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h4><ul>\n<li>获取变量类型<ul>\n<li><code>%T</code>  : <code>fmt.Printf(&quot;:%T\\n&quot;, z)</code></li>\n<li><code>reflect.TypeOf(z)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(sum <span class=\"type\">int</span>)</span></span> (x, y <span class=\"type\">int</span>)  &#123;</span><br><span class=\"line\">\tx = sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\ty = sum - x</span><br><span class=\"line\">\tz := sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\tfmt.Println(z)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;:%T\\n&quot;</span>, z)</span><br><span class=\"line\">    fmt.Println(reflect.TypeOf(z))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x, y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//7</span></span><br><span class=\"line\"><span class=\"comment\">//:int</span></span><br><span class=\"line\"><span class=\"comment\">//int</span></span><br><span class=\"line\"><span class=\"comment\">//7 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(sum <span class=\"type\">float32</span>)</span></span> (x, y <span class=\"type\">float32</span>)  &#123;</span><br><span class=\"line\">\tx = sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\ty = sum - x</span><br><span class=\"line\">\tz := sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\tfmt.Println(z)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;:%T\\n&quot;</span>, z)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x, y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//7.5555553</span></span><br><span class=\"line\"><span class=\"comment\">//:float32</span></span><br><span class=\"line\"><span class=\"comment\">//7.5555553 9.444445</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(split(<span class=\"number\">17</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常量表达式\"><a href=\"#常量表达式\" class=\"headerlink\" title=\"常量表达式\"></a>常量表达式</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常量表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MaxInt <span class=\"type\">uint64</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">64</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%d&quot;</span>,MaxInt)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\"><span class=\"comment\">//func main() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tvar MaxInt uint64 = 1</span></span><br><span class=\"line\"><span class=\"comment\">//\tMaxInt = MaxInt &lt;&lt;64</span></span><br><span class=\"line\"><span class=\"comment\">//\tMaxInt = MaxInt - 1</span></span><br><span class=\"line\"><span class=\"comment\">//\tfmt.Printf(&quot;%d&quot;,MaxInt)</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误方式：  116：constant 18446744073709551616 overflows uint64</span></span><br><span class=\"line\"><span class=\"comment\">//func main() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tvar MaxInt uint64 = 1 &lt;&lt;64</span></span><br><span class=\"line\"><span class=\"comment\">//\tMaxInt = MaxInt - 1</span></span><br><span class=\"line\"><span class=\"comment\">//\tfmt.Printf(&quot;%d&quot;,MaxInt)</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"次方\"><a href=\"#次方\" class=\"headerlink\" title=\"次方\"></a>次方</h4><p><strong>Go语言中符号 “ ^ ” 不再用于次方，而是表示“按位异或的运算”</strong></p>\n<ul>\n<li><code>math.Pow() </code></li>\n<li>类型：<code>float64</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var MaxInt uint64 = 1&lt;&lt;64 -1  // &lt;&lt; 左移运算符</span></span><br><span class=\"line\">\tMaxInt := math.Pow(<span class=\"number\">2</span>, <span class=\"number\">64</span>)  <span class=\"comment\">// 次方：math.Pow() float64</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%d&quot;</span>, MaxInt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    x, y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//Go 为常规 Go 值的格式化设计提供了多种打印方式。例如，这里打印了 point 结构体的一个实例。</span></span><br><span class=\"line\">    p := point&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%v\\n&quot;</span>, p) <span class=\"comment\">// &#123;1 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//如果值是一个结构体，%+v 的格式化输出内容将包括结构体的字段名。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, p) <span class=\"comment\">// &#123;x:1 y:2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//%#v 形式则输出这个值的 Go 语法表示。例如，值的运行源代码片段。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p) <span class=\"comment\">// main.point&#123;x:1, y:2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//需要打印值的类型，使用 %T。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, p) <span class=\"comment\">// main.point</span></span><br><span class=\"line\"><span class=\"comment\">//格式化布尔值是简单的。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%t\\n&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\">//格式化整形数有多种方式，使用 %d进行标准的十进制格式化。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\">//这个输出二进制表示形式。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%b\\n&quot;</span>, <span class=\"number\">14</span>)</span><br><span class=\"line\">这个输出给定整数的对应字符。</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%c\\n&quot;</span>, <span class=\"number\">33</span>)</span><br><span class=\"line\">%x 提供十六进制编码。</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%x\\n&quot;</span>, <span class=\"number\">456</span>)</span><br><span class=\"line\"><span class=\"comment\">//对于浮点型同样有很多的格式化选项。使用 %f 进行最基本的十进制格式化。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%f\\n&quot;</span>, <span class=\"number\">78.9</span>)</span><br><span class=\"line\"><span class=\"comment\">//%e 和 %E 将浮点型格式化为（稍微有一点不同的）科学技科学记数法表示形式。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%e\\n&quot;</span>, <span class=\"number\">123400000.0</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%E\\n&quot;</span>, <span class=\"number\">123400000.0</span>)</span><br><span class=\"line\"><span class=\"comment\">//使用 %s 进行基本的字符串输出。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, <span class=\"string\">&quot;\\&quot;string\\&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//像 Go 源代码中那样带有双引号的输出，使用 %q。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%q\\n&quot;</span>, <span class=\"string\">&quot;\\&quot;string\\&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//和上面的整形数一样，%x 输出使用 base-16 编码的字符串，每个字节使用 2 个字符表示。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%x\\n&quot;</span>, <span class=\"string\">&quot;hex this&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//要输出一个指针的值，使用 %p。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>, &amp;p)</span><br><span class=\"line\"><span class=\"comment\">//当输出数字的时候，你将经常想要控制输出结果的宽度和精度，可以使用在 % 后面使用数字来控制输出宽度。默认结果使用右对齐并且通过空格来填充空白部分。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;|%6d|%6d|\\n&quot;</span>, <span class=\"number\">12</span>, <span class=\"number\">345</span>)</span><br><span class=\"line\"><span class=\"comment\">//你也可以指定浮点型的输出宽度，同时也可以通过 宽度.精度 的语法来指定输出的精度。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;|%6.2f|%6.2f|\\n&quot;</span>, <span class=\"number\">1.2</span>, <span class=\"number\">3.45</span>)</span><br><span class=\"line\"><span class=\"comment\">//要最对齐，使用 - 标志。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;|%-6.2f|%-6.2f|\\n&quot;</span>, <span class=\"number\">1.2</span>, <span class=\"number\">3.45</span>)</span><br><span class=\"line\"><span class=\"comment\">//你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。这是基本的右对齐宽度表示。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;|%6s|%6s|\\n&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//要左对齐，和数字一样，使用 - 标志。</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;|%-6s|%-6s|\\n&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//到目前为止，我们已经看过 Printf了，它通过 os.Stdout输出格式化的字符串。Sprintf 则格式化并返回一个字符串而不带任何输出。</span></span><br><span class=\"line\">    s := fmt.Sprintf(<span class=\"string\">&quot;a %s&quot;</span>, <span class=\"string\">&quot;string&quot;</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\"><span class=\"comment\">//你可以使用 Fprintf 来格式化并输出到 io.Writers而不是 os.Stdout。</span></span><br><span class=\"line\">    fmt.Fprintf(os.Stderr, <span class=\"string\">&quot;an %s\\n&quot;</span>, <span class=\"string\">&quot;error&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x, y <span class=\"type\">int</span> = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"type\">float64</span> = math.Sqrt(<span class=\"type\">float64</span>(x*x + y*y))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, f)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z <span class=\"type\">uint</span> = <span class=\"type\">uint</span>(f)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, z)</span><br><span class=\"line\">\tfmt.Println(x, y, z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">\tf := math.Sqrt(<span class=\"type\">float64</span>(x*x + y*y))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, f)</span><br><span class=\"line\">\tz := <span class=\"type\">uint</span>(f)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, z)</span><br><span class=\"line\">\tfmt.Println(x, y, z)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h3><h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><ul>\n<li>Go只有一种循环结构：<code>for</code> 循环。</li>\n<li>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：<ul>\n<li>初始化语句：在第一次迭代前执行</li>\n<li>条件表达式：在每次迭代前求值</li>\n<li>后置语句：在每次迭代的结尾执行</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index/1591261769366.png\" alt=\"1591261769366\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; sum &lt; <span class=\"number\">1000</span>; &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可简化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sum &lt; <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误 for循环体中的变量声明仅在 for 语句的作用域中可用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sum := <span class=\"number\">1</span>; sum &lt; <span class=\"number\">1000</span>; &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)  <span class=\"comment\">// undefined: sum</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无限循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t\tfmt.Println(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t\tfmt.Println(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sqrt(-x) + <span class=\"string\">&quot;i&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(math.Sqrt(x))  <span class=\"comment\">//将数值类型转换为string 并输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sqrt(<span class=\"number\">2</span>), sqrt(<span class=\"number\">-4</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if 的简短语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"if-else语句\"><a href=\"#if-else语句\" class=\"headerlink\" title=\"if-else语句\"></a>if-else语句</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// if-else 语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%g &gt;= %g\\n&quot;</span>, v, lim)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里开始就不能使用 v 了</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在 main 的 fmt.Println 调用开始前，两次对 pow 的调用均已执行并返回其各自的结果</span></span><br><span class=\"line\"><span class=\"comment\">//所以先print 27 &gt;= 20</span></span><br><span class=\"line\"><span class=\"comment\">//27 &gt;= 20</span></span><br><span class=\"line\"><span class=\"comment\">//9 20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><figure class=\"highlight llvm\"><table><tr><td class=\"code\"><pre><span class=\"line\">计算机通常使用循环来计算 <span class=\"keyword\">x</span> 的平方根。从某个猜测的值 z 开始，我们可以根据 z² 与 <span class=\"keyword\">x</span> 的近似度来调整 z，产生一个更好的猜测：</span><br><span class=\"line\"></span><br><span class=\"line\">z -<span class=\"operator\">=</span> (z*z - <span class=\"keyword\">x</span>) / (<span class=\"number\">2</span>*z)</span><br><span class=\"line\">重复调整的过程，猜测的结果会越来越精确，得到的答案也会尽可能接近实际的平方根。</span><br><span class=\"line\"></span><br><span class=\"line\">在提供的 func Sqrt 中实现它。无论输入是什么，对 z 的一个恰当的猜测为 <span class=\"number\">1</span>。 要开始，请重复计算 <span class=\"number\">10</span> 次并随之打印每次的 z 值。观察对于不同的值 <span class=\"keyword\">x</span>（<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span> ...）， 你得到的答案是如何逼近结果的，猜测提升的速度有多快。</span><br><span class=\"line\"></span><br><span class=\"line\">提示：用类型转换或浮点数语法来声明并初始化一个浮点数值：</span><br><span class=\"line\"></span><br><span class=\"line\">z :<span class=\"operator\">=</span> <span class=\"number\">1.0</span></span><br><span class=\"line\">z :<span class=\"operator\">=</span> float<span class=\"number\">64</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数大于还是小于 <span class=\"number\">10</span>。 尝试改变 z 的初始猜测，如 <span class=\"keyword\">x</span> 或 <span class=\"keyword\">x</span>/<span class=\"number\">2</span>。你的函数结果与标准库中的 math.Sqrt 接近吗？</span><br><span class=\"line\"></span><br><span class=\"line\">（*注：* 如果你对该算法的细节感兴趣，上面的 z² − <span class=\"keyword\">x</span> 是 z² 到它所要到达的值（即 <span class=\"keyword\">x</span>）的距离， 除以的 <span class=\"number\">2</span>z 为 z² 的导数，我们通过 z² 的变化速度来改变 z 的调整量。 这种通用方法叫做牛顿法。 它对很多函数，特别是平方根而言非常有效。）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\tz := <span class=\"type\">float64</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> m := <span class=\"type\">float64</span>(<span class=\"number\">1</span>); math.Abs(m) &gt; math.Pow(<span class=\"number\">10</span>, <span class=\"number\">-15</span>) ;&#123;</span><br><span class=\"line\">\t\tfmt.Println(m)</span><br><span class=\"line\">\t\tfmt.Println(z)</span><br><span class=\"line\">\t\tm = (z * z - x) / (<span class=\"number\">2</span>*x)</span><br><span class=\"line\">\t\tz -= m</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(Sqrt(<span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(math.Sqrt(2))</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;When&#x27;s Saturday?&quot;</span>)</span><br><span class=\"line\">    today := time.Now().Weekday()  <span class=\"comment\">// 类型:time.Weekday</span></span><br><span class=\"line\">    <span class=\"comment\">// fmt.Println(today)  输出字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// fmt.Printf(&quot;Today is %d&quot;, today) 可被%d格式化为int,Today is 5</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> time.Saturday &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Today&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Tomorrow.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;Today is %v&quot;</span>, today)  <span class=\"comment\">//采用%v格式化输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>逻辑判断</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//没有条件的switch  同switch true</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tt := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">12</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Good morning!&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">17</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Good afternoon!&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Good evening.&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h4><ul>\n<li>defer 语句会将函数推迟到外层函数返回之后执行。</li>\n<li>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</li>\n<li>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;add&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(add(<span class=\"number\">1</span>, <span class=\"number\">3</span>))  <span class=\"comment\">//add函数调用执行, fmt.Println函数最后执行</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;OutPrint&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">//add</span></span><br><span class=\"line\"><span class=\"comment\">//OutPrint</span></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//defer 栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;counting&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">//counting</span></span><br><span class=\"line\"><span class=\"comment\">//done</span></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针、结构体、切片、映射\"><a href=\"#指针、结构体、切片、映射\" class=\"headerlink\" title=\"指针、结构体、切片、映射\"></a>指针、结构体、切片、映射</h3><h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><h4 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><ul>\n<li>一个结构体（<code>struct</code>）就是一组字段（field）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tp := &amp;v</span><br><span class=\"line\">\t<span class=\"comment\">//(*p).X = 1e9</span></span><br><span class=\"line\">\tp.X = <span class=\"number\">1e9</span></span><br><span class=\"line\">\tfmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体文法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体文法通过直接列出字段的值来新分配一个结构体。</span></span><br><span class=\"line\"><span class=\"comment\">//使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）</span></span><br><span class=\"line\"><span class=\"comment\">//特殊的前缀 &amp; 返回一个指向结构体的指针。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tv1 = Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;  <span class=\"comment\">// 创建一个 Vertex 类型的结构体</span></span><br><span class=\"line\">\tv2 = Vertex&#123;X: <span class=\"number\">1</span>&#125;  <span class=\"comment\">// Y:0 被隐式地赋予</span></span><br><span class=\"line\">\tv3 = Vertex&#123;&#125;  <span class=\"comment\">// X:0 Y:0</span></span><br><span class=\"line\">\tp = &amp;Vertex&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;  <span class=\"comment\">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(v1, v2, v3, p, t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><ul>\n<li>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</li>\n<li>数组的长度是其类型的一部分，因此数组不能改变大小</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a [<span class=\"number\">2</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\ta[<span class=\"number\">1</span>] = <span class=\"string\">&quot;World&quot;</span></span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">0</span>], a[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(primes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4><ul>\n<li>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//var s []int = primes[1:4]</span></span><br><span class=\"line\">\t<span class=\"comment\">//s := primes[1:4]</span></span><br><span class=\"line\">\ts := primes[<span class=\"number\">1</span>]</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切片初始化</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种方式创建切片</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> slice []<span class=\"type\">int</span></span><br><span class=\"line\">   fmt.Println(<span class=\"built_in\">len</span>(slice)) <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//第二种方式</span></span><br><span class=\"line\">   sl1 := []<span class=\"type\">int</span>&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>: <span class=\"number\">100</span>&#125;     <span class=\"comment\">// 通过初始化表达式构造，可使⽤索引号。 索引为8的值为100</span></span><br><span class=\"line\">   fmt.Println(sl1, <span class=\"built_in\">len</span>(sl1), <span class=\"built_in\">cap</span>(sl1)) <span class=\"comment\">//[0 1 2 3 0 0 0 0 100] 9 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">   sl2 := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 使⽤ make 创建，省略 cap，相当于 cap = len。</span></span><br><span class=\"line\">   fmt.Println(sl2)       <span class=\"comment\">//[0 0 0 0 0 0 0 0 0 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//第三种方式</span></span><br><span class=\"line\">   num := []<span class=\"type\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">   fmt.Println(num) <span class=\"comment\">//[10 20 30 40 50]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>比较Go与Python在切片上的不同</p>\n<ul>\n<li><p>Go</p>\n<ul>\n<li><p>切片并不存储任何数据，它只是描述了底层数组中的一段。</p>\n</li>\n<li><p>更改切片的元素会修改其底层数组中对应的元素。</p>\n<p>  与它共享底层数组的切片都会观测到这些修改</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := [<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tb := a[<span class=\"number\">1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"comment\">//[2]</span></span><br><span class=\"line\"><span class=\"comment\">//[10]</span></span><br><span class=\"line\"><span class=\"comment\">//[1 10 3 4]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Python<ul>\n<li>将切片数据复制到另一个内存地址</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">b = a[<span class=\"number\">1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"comment\">#[2]</span></span><br><span class=\"line\"><span class=\"comment\">#[10]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">#[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>切片文法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tq := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(q)</span><br><span class=\"line\">\tr := []<span class=\"type\">bool</span>&#123;<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">\tfmt.Println(r)</span><br><span class=\"line\">    <span class=\"comment\">//结构体切片文法</span></span><br><span class=\"line\">\ts := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\ti <span class=\"type\">int</span></span><br><span class=\"line\">\t\tb <span class=\"type\">bool</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">11</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">13</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>切片的长度与容量</p>\n<ul>\n<li><p>长度就是它所包含的元素个数。</p>\n</li>\n<li><p>容量是从它(<code>切片</code>)的第一个元素开始数，到其底层<code>数组(非切片)</code>元素末尾的个数。</p>\n<p>  容量 &#x3D; 数组长度 - 左指针索引</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">14</span>&#125;</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">//len=6 cap=6 [2 3 5 7 11 14]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//截取切片使其长度为0</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">//len=0 cap=6 []</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//拓展长度</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tprintSlice(s) <span class=\"comment\">//len=4 cap=6 [2 3 5 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//舍弃前两个值 **向右移动左指针后,左指针前面的内存被释放了?? 只能向后拓展长度? 只能在容量范围内拓展长度??**</span></span><br><span class=\"line\">\ts = s[<span class=\"number\">2</span>:]</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">//len=2 cap=4 [5 7]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//再次拓展长度</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">//len=4 cap=4 [5 7 11 14]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行过程:</p>\n<p>1.第一个输出为[2,3,5,7,11,13]，长度为6，容量为6；</p>\n<p><img src=\"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index/922928-20180622140355739-646957462.png\" alt=\"img\"></p>\n<p>2，左指针和右指针同时指向s[0]，所以长度为0，容量为6；</p>\n<p><img src=\"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index/922928-20180622140434322-85864318.png\" alt=\"img\"></p>\n<p>3，左指针指向s[0]，右指针指向s[4]，由于切片概念是只包含左边元素不包含右边元素，所以长度为4，但左指针在s[0]处，对于数组s左指针右侧还有6个元素，所以容量仍然为6；</p>\n<p><img src=\"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index/922928-20180622140632355-1673267531.png\" alt=\"img\"></p>\n<p>4，在经历步骤3切片后的基础上，左指针指向s[2]，右指针指向最右边，所以长度为2，由于左指针走过两个元素，离最右边还剩4个元素，所以容量为4。</p>\n<p><img src=\"/2020/06/04/Golang/Go%E5%9F%BA%E7%A1%80/index/922928-20180622140903692-814631683.png\" alt=\"img\"></p>\n<ul>\n<li>切片零值为nil</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切片零值为nil</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;nil!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>make创建切片<ul>\n<li><code>make([]int, len, cap)</code>  容量cap可省略,默认cap&#x3D;len</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">5</span>)  <span class=\"comment\">//len=5 cap=5 [0,0,0,0,0]</span></span><br><span class=\"line\">\tprintSlice(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>)  <span class=\"comment\">//len=0 cap=5 []</span></span><br><span class=\"line\">\tprintSlice(b)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := b[:<span class=\"number\">2</span>]  <span class=\"comment\">//len=2 cap=5 [0,0]</span></span><br><span class=\"line\">\tprintSlice(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\td := c[<span class=\"number\">2</span>:<span class=\"number\">5</span>]  <span class=\"comment\">//len3 cap=3 [0,0,0]</span></span><br><span class=\"line\">\tprintSlice(d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>二维数组</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义board类型为切片,其元素为元素为string的切片,赋值方式</span></span><br><span class=\"line\">\tboard := [][]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>切片追加元素</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">// len=0 cap=0 []</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">// len=1 cap=1 [0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">// len=2 cap=2 [0 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//s = append(s, 2,3, 4)</span></span><br><span class=\"line\">\t<span class=\"comment\">//printSlice(s)  // len=5 cap=6 [0 1 2 3 4]  //int占4个bit,内存存储单元为8bit,容量按内存整单元添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">2</span>,<span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">\tprintSlice(s)  <span class=\"comment\">// len=6 cap=6 [0 1 2 3 4 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for-range\"><a href=\"#for-range\" class=\"headerlink\" title=\"for-range\"></a>for-range</h4><ul>\n<li>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环的range形式可以遍历切片或映射</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>&#125;&#123;</span><br><span class=\"line\">\t\tfmt.Println(index, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>通过将下标或值赋予 <code>_</code> 来忽略它。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> pow</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> pow</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若只需要索引，忽略第二个变量即可。</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pow</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpow := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tpow[i] = <span class=\"number\">1</span> &lt;&lt; <span class=\"type\">uint</span>(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,value := <span class=\"keyword\">range</span> pow&#123;</span><br><span class=\"line\">\t\tfmt.Println(value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习-切片\"><a href=\"#练习-切片\" class=\"headerlink\" title=\"练习:切片\"></a>练习:切片</h4><blockquote>\n<p>实现 <code>Pic</code>。它应当返回一个长度为 <code>dy</code> 的切片，其中每个元素是一个长度为 <code>dx</code>，元素类型为 <code>uint8</code> 的切片。当你运行此程序时，它会将每个整数解释为灰度值（好吧，其实是蓝度值）并显示它所对应的图像。</p>\n<p>图像的选择由你来定。几个有趣的函数包括 <code>(x+y)/2</code>, <code>x*y</code>, <code>x^y</code>, <code>x*log(y)</code> 和 <code>x%(y+1)</code>。</p>\n<p>（提示：需要使用循环来分配 <code>[][]uint8</code> 中的每个 <code>[]uint8</code>；请使用 <code>uint8(intValue)</code> 在类型之间转换；你可能会用到 <code>math</code> 包中的函数。）</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Pic</span><span class=\"params\">(dx, dy <span class=\"type\">int</span>)</span></span> [][]<span class=\"type\">uint8</span> &#123;</span><br><span class=\"line\">\ta := <span class=\"built_in\">make</span>([][]<span class=\"type\">uint8</span>, dy)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\t\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">uint8</span>, dx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"keyword\">range</span> b &#123;</span><br><span class=\"line\">\t\t\tb[y] = <span class=\"type\">uint8</span>(x * y)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[x] = b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpic.Show(Pic)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"映射\"><a href=\"#映射\" class=\"headerlink\" title=\"映射\"></a>映射</h4><ul>\n<li>映射的零值为 <code>nil</code> 。<code>nil</code> 映射既没有键，也不能添加键。</li>\n<li><code>make</code> 函数会返回给定类型的映射，并将其初始化备用。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;Bell Labs&quot;</span>] = Vertex&#123;<span class=\"number\">40.0</span>, <span class=\"number\">-74.0</span>&#125;</span><br><span class=\"line\">\tfmt.Println(m[<span class=\"string\">&quot;Bell Labs&quot;</span>])</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>映射的文法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;Bell Labs&quot;</span>:&#123;<span class=\"number\">40</span>,<span class=\"number\">-73</span>&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;Google&quot;</span>:&#123;<span class=\"number\">70</span>,<span class=\"number\">-73</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改映射</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;Answer&quot;</span>] = <span class=\"number\">42</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;The value:&quot;</span>, m[<span class=\"string\">&quot;Answer&quot;</span>])  <span class=\"comment\">// The value: 42</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改</span></span><br><span class=\"line\">\tm[<span class=\"string\">&quot;Answer&quot;</span>] = <span class=\"number\">48</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;The value:&quot;</span>, m[<span class=\"string\">&quot;Answer&quot;</span>])  <span class=\"comment\">//The value: 48</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//若 key 不在映射中，那么返回映射的元素类型的零值</span></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(m, <span class=\"string\">&quot;Answer&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;The value:&quot;</span>, m[<span class=\"string\">&quot;Answer&quot;</span>])  <span class=\"comment\">//The value: 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断键是否存在</span></span><br><span class=\"line\">\tv, ok := m[<span class=\"string\">&quot;Answer&quot;</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;The value:&quot;</span>, v, ok)  <span class=\"comment\">//The value: 0 false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习-映射\"><a href=\"#练习-映射\" class=\"headerlink\" title=\"练习:映射\"></a>练习:映射</h4><blockquote>\n<p>实现 <code>WordCount</code>。它应当返回一个映射，其中包含字符串 <code>s</code> 中每个“单词”的个数。函数 <code>wc.Test</code> 会对此函数执行一系列测试用例，并输出成功还是失败。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WordCount</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tm := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">\ta := strings.Fields(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, item := <span class=\"keyword\">range</span> a&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := m[item]; ok == <span class=\"literal\">true</span>&#123;</span><br><span class=\"line\">\t\t\tm[item] += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tm[item] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(WordCount(<span class=\"string\">&quot;Hello World&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数值\"><a href=\"#函数值\" class=\"headerlink\" title=\"函数值\"></a>函数值</h4><ul>\n<li>函数值可以用作函数的参数或返回值。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span><span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))  <span class=\"comment\">//13</span></span><br><span class=\"line\">\tfmt.Println(compute(hypot))  <span class=\"comment\">//5</span></span><br><span class=\"line\">\tfmt.Println(compute(math.Pow))  <span class=\"comment\">//81  次幂函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数的闭包\"><a href=\"#函数的闭包\" class=\"headerlink\" title=\"函数的闭包\"></a>函数的闭包</h4><ul>\n<li><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p>\n<p>  例如，函数 <code>adder</code> 返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adder</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\tsum += x</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := adder(), adder()  <span class=\"comment\">//adder函数的返回值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(pos(i),neg(<span class=\"number\">-2</span>*i))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"comment\">//0 0</span></span><br><span class=\"line\"><span class=\"comment\">//1 -2</span></span><br><span class=\"line\"><span class=\"comment\">//3 -6</span></span><br><span class=\"line\"><span class=\"comment\">//6 -12</span></span><br><span class=\"line\"><span class=\"comment\">//10 -20</span></span><br><span class=\"line\"><span class=\"comment\">//15 -30</span></span><br><span class=\"line\"><span class=\"comment\">//21 -42</span></span><br><span class=\"line\"><span class=\"comment\">//28 -56</span></span><br><span class=\"line\"><span class=\"comment\">//36 -72</span></span><br><span class=\"line\"><span class=\"comment\">//45 -90</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习-斐波那契闭包\"><a href=\"#练习-斐波那契闭包\" class=\"headerlink\" title=\"练习:斐波那契闭包\"></a>练习:斐波那契闭包</h4><blockquote>\n<p>实现一个 <code>fibonacci</code> 函数，它返回一个函数（闭包），该闭包返回一个<a href=\"https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\">斐波纳契数列</a> <code>(0, 1, 1, 2, 3, 5, ...)</code>。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\ttemp := x</span><br><span class=\"line\">\t\tx, y = y, x + y</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := fibonacci()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(f())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法和接口\"><a href=\"#方法和接口\" class=\"headerlink\" title=\"方法和接口\"></a>方法和接口</h3><h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><ul>\n<li><p>Go 没有类。可以为结构体类型定义方法。</p>\n</li>\n<li><p>方法即函数</p>\n</li>\n<li><p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数, 写法就是个正常的函数，功能并没有什么变化。</p>\n<p>  方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------------------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Abs(v))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>为非结构体类型声明方法。</p>\n</li>\n<li><p>只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法。</p>\n<p>  (<strong>接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。</strong>)</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tfmt.Println(f.Abs())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"指针接收者\"><a href=\"#指针接收者\" class=\"headerlink\" title=\"指针接收者\"></a>指针接收者</h4><ul>\n<li>为指针接收者声明方法</li>\n<li>对于类型T（不能是指针），该类型方法的接收者的类型可以用<code>*T</code>的文法</li>\n<li>指针接收者的方法可以修改接收者指向的值。值接收者的方法会对值的副本进行操作，而不修改值</li>\n<li>可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</li>\n<li>由于方法经常需要修改它的接受者，指针接收者比值接收者更常用</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span>  &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该类型的指针接收者 v是局部指针变量，在不同内存地址 具有相同的指向（指向同一个内存地址），方法修改的是同一个内存地址的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(v)  <span class=\"comment\">//&#123;30 40&#125;</span></span><br><span class=\"line\">\tfmt.Println(v.Abs())  <span class=\"comment\">//50</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//该类型的值接收者  v是局部值变量，在不同内存地址 具有相同值，方法修改的是该值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(v)  <span class=\"comment\">//&#123;3 4&#125;</span></span><br><span class=\"line\">\tfmt.Println(v.Abs())  <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同python比较</span></span><br><span class=\"line\">v = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">v</span>):</span><br><span class=\"line\">    v = <span class=\"number\">2</span></span><br><span class=\"line\">func(v)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(v)  <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将方法重写为函数</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将Abs和Scale方法重写为函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scale</span><span class=\"params\">(v *Vertex, f <span class=\"type\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tScale(&amp;v, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(Abs(v)) <span class=\"comment\">// 50</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法与指针重定向\"><a href=\"#方法与指针重定向\" class=\"headerlink\" title=\"方法与指针重定向\"></a>方法与指针重定向</h4><h5 id=\"指针接收者-1\"><a href=\"#指针接收者-1\" class=\"headerlink\" title=\"指针接收者\"></a>指针接收者</h5><ol>\n<li><p>带有指针参数的函数,必须接受指针</p>\n</li>\n<li><p>以指针为接收者的方法, 接受者既能为值 又能为指针</p>\n<blockquote>\n<p>v为值, 由于方法有一个指针接收者, Go会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code></p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"值接收者\"><a href=\"#值接收者\" class=\"headerlink\" title=\"值接收者\"></a>值接收者</h5><ol>\n<li><p>接受值作为参数的函数, 必须接受指定类型的值</p>\n</li>\n<li><p>以值为接收者的方法, 接收者既能为值 也能为指针</p>\n<blockquote>\n<p>p为指针, 方法调用<code>p.Abs()</code> ,会解释为 <code>(*p).Abs()</code></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li>接口类型 是由一组方法签名定义的集合</li>\n<li>接口类型的变量可以保存任何实现了这些方法的值</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Abser <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAbs() <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X * v.X + v.Y * v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a Abser</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = f  <span class=\"comment\">// 实现了Abser  MyFloat类型具有Abs()方法</span></span><br><span class=\"line\">\ta = &amp;v  <span class=\"comment\">// 实现了Abser  *Vertex类型具有Abs()方法 指针接收者</span></span><br><span class=\"line\">\t<span class=\"comment\">//a = v  // 没有实现Abser  Vertex类型不具有Abs()方法 值接收者  虽然也能调用指针接收者的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于 Abs 方法只为 *Vertex （指针类型）定义，因此 Vertex（值类型）并未实现 Abser。</span></span><br><span class=\"line\">\tfmt.Println(a.Abs())</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口与隐式实现\"><a href=\"#接口与隐式实现\" class=\"headerlink\" title=\"接口与隐式实现\"></a>接口与隐式实现</h5><ul>\n<li>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</li>\n<li>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</li>\n<li>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。</span></span><br><span class=\"line\"><span class=\"comment\">// 接口I具有方法M，类型T定义了方法M</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t T)</span></span> M() &#123;</span><br><span class=\"line\">\tfmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = T&#123;<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var i I</span></span><br><span class=\"line\">\t<span class=\"comment\">//t := T&#123;&quot;Hello&quot;&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//i = t</span></span><br><span class=\"line\">\t<span class=\"comment\">//i.M()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口值\"><a href=\"#接口值\" class=\"headerlink\" title=\"接口值\"></a>接口值</h5><ul>\n<li><p>接口也是值。它们可以像其它值一样传递。</p>\n<p>接口值可以用作函数的参数或返回值。</p>\n</li>\n<li><p>在内部，接口值可以看做包含值和具体类型的元组：(value, type)。</p>\n<p>接口值保存了一个具体底层类型的具体值。</p>\n</li>\n<li><p>接口值调用方法时会执行其底层类型的同名方法。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> M() &#123;</span><br><span class=\"line\">\tfmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> F <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f F)</span></span> M() &#123;</span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i I)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = &amp;T&#123;<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br><span class=\"line\">\tdescribe(i)  <span class=\"comment\">// i为接口值, 保存了 值与值类型</span></span><br><span class=\"line\">\ti.M()  <span class=\"comment\">// 调用接口值的底层类型（*T）对应的M方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ti = F(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tdescribe(i)</span><br><span class=\"line\">\ti.M()  <span class=\"comment\">// 调用接口值的底层类型（F）对应的M方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"底层值为nil的接口值\"><a href=\"#底层值为nil的接口值\" class=\"headerlink\" title=\"底层值为nil的接口值\"></a>底层值为nil的接口值</h5><ul>\n<li>保存了 nil 具体值的接口其自身并不为 nil。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> M() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//return</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(t.S)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;哈哈&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i I)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var i I = &amp;T&#123;&quot;Hello&quot;&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//describe(i)</span></span><br><span class=\"line\">\t<span class=\"comment\">//i.M()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = &amp;T&#123;&#125;</span><br><span class=\"line\">\tdescribe(i)  <span class=\"comment\">// (&amp;&#123;&#125;, *main.T)  定义了一个类型为&amp;T  值为空  ，就像blank与null的区别</span></span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var i I</span></span><br><span class=\"line\">\t<span class=\"comment\">//var t *T</span></span><br><span class=\"line\">\t<span class=\"comment\">//i = t</span></span><br><span class=\"line\">\t<span class=\"comment\">//describe(i)  // (&lt;nil&gt;, *main.T)  定义了一个类型为&amp;T  值为nil   </span></span><br><span class=\"line\">\t<span class=\"comment\">//i.M()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>(&amp;{}, *main.T) 与 (<nil>, *main.T)，就像blank与null的区别</nil></p>\n</blockquote>\n<h5 id=\"接口值为nil\"><a href=\"#接口值为nil\" class=\"headerlink\" title=\"接口值为nil\"></a>接口值为nil</h5><ul>\n<li>接口值为nil时，调用方法会报错，因为接口值未指明是哪个调用哪个类型的方法</li>\n</ul>\n<h5 id=\"空接口\"><a href=\"#空接口\" class=\"headerlink\" title=\"空接口\"></a>空接口</h5><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定了零个方法的接口值被称为空接口</span></span><br><span class=\"line\"><span class=\"comment\">// 空接口可以保存任何类型的值</span></span><br><span class=\"line\"><span class=\"comment\">// 空接口被用来处理位置类型的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tdescribe(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\ti = <span class=\"number\">42</span></span><br><span class=\"line\">\tdescribe(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\ti = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\tdescribe(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口值类型断言\"><a href=\"#接口值类型断言\" class=\"headerlink\" title=\"接口值类型断言\"></a>接口值类型断言</h5><ul>\n<li><p>类型断言 提供了访问接口值底层具体值的方式。</p>\n</li>\n<li><p><code>t := i.(T)</code></p>\n<p>该语句断言接口值 i 保存了具体类型 T，并将其底层类型为 T 的值赋予变量 t。 若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个恐慌 （报错）。</p>\n</li>\n<li><p><code>t, ok := i.(T)</code></p>\n<p>若 i 保存了一个 T，那么 t 将会是其底层值，而 ok 为 true。 否则，ok 将为 false 而 t 将为 T 类型的<strong>零值</strong>，程序并不会产生恐慌。</p>\n<blockquote>\n<p>t 将为 T 类型的<strong>零值</strong>，而非 0</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//s := i.(string)</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(s)</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">//s, ok := i.(string)</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(s, ok)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//f := i.(float64)  // 报错</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(f)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//f, ok := i.(float64)</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(f, ok)  // 0 false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tf, ok := i.(T)</span><br><span class=\"line\">    fmt.Println(f, ok)  <span class=\"comment\">// &#123;&#125; false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Go"],"tags":["Go"]},{"title":"博客配置","url":"/2019/07/23/Hexo/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/index.html","content":"<p>**说明:**这篇博客用来记录博客创建过程中的配置,作为以后需要时查找之用.其中许多用法与markdown相同,在这里我就不再记录了.</p>\n<h4 id=\"自定文字大小与颜色\"><a href=\"#自定文字大小与颜色\" class=\"headerlink\" title=\"自定文字大小与颜色\"></a>自定文字大小与颜色</h4><p>Markdown通用方法,通过添加html标签。了解些前端知识即可进行设置。</p>\n<h4 id=\"首行缩进\"><a href=\"#首行缩进\" class=\"headerlink\" title=\"首行缩进\"></a>首行缩进</h4><p>hexo会自动忽略空格,如果想要添加空格,可以使用空格的硬编码<strong>&amp;nbsp;</strong>,两个汉字缩进,使用四个<strong>&amp;nbsp;</strong></p>\n<h4 id=\"图片引用\"><a href=\"#图片引用\" class=\"headerlink\" title=\"图片引用\"></a>图片引用</h4><p>我们在些写博客时，总是要添加些图片使博文看起来更美观。Markdown的添加图片的语法虽然也可以使用，但在首页与归档页面显示不出来。此时就要使用Hexo专门为解决这种状况，提供的解决方法。<br>首先，图片的来源有三种：</p>\n<ul>\n<li>本地图片<br>首先,确保资源文件夹功能是开启的.在站点配置文件<code>_config.yml</code>中修改<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">post_asset_folder : true</span><br></pre></td></tr></table></figure>\n开启资源文件夹功能后,Hexo会在新建博文时,自动创建一个与之对应的资源文件夹</li>\n</ul>\n<p>安装插件：<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>\n<blockquote>\n<p>不能使用<code>npm install hexo-asset-image --save</code>这个命令安装,<strong>版本号不对</strong></p>\n<p>两个版本映射关系有差别</p>\n</blockquote>\n<figure class=\"highlight dns\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"number\">1591197431448</span>](Go-指针/<span class=\"number\">1591197431448</span>.jpg)</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>远程图片</li>\n</ul>\n","tags":["Hexo"]},{"title":"安装Hexo","url":"/2020/06/04/Hexo/%E5%AE%89%E8%A3%85Hexo/index.html","content":"<p>出处：<a href=\"https://blog.csdn.net/tonydandelion2014/article/details/61615898\">https://blog.csdn.net/tonydandelion2014/article/details/61615898</a></p>\n<h2 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h2><h3 id=\"Windows下安装\"><a href=\"#Windows下安装\" class=\"headerlink\" title=\"Windows下安装\"></a>Windows下安装</h3><p>在<a href=\"https://nodejs.org/en/\">nodejs官网</a>上下载最新的Windows安装包，直接安装即可。</p>\n<h3 id=\"ubuntu下安装\"><a href=\"#ubuntu下安装\" class=\"headerlink\" title=\"ubuntu下安装\"></a>ubuntu下安装</h3><h4 id=\"命令行方式安装：\"><a href=\"#命令行方式安装：\" class=\"headerlink\" title=\"命令行方式安装：\"></a>命令行方式安装：</h4><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install nodejs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译源码方式安装：\"><a href=\"#编译源码方式安装：\" class=\"headerlink\" title=\"编译源码方式安装：\"></a>编译源码方式安装：</h4><p>在nodejs官网上找到需要下载的源码（不是二进制文件），解压之后进入目录，执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./configure</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意如果需要sudo的话， make和make install 要分开，因为sudo不能传递到&amp;&amp;后面的指令。</p>\n</blockquote>\n<h4 id=\"安装npm\"><a href=\"#安装npm\" class=\"headerlink\" title=\"安装npm\"></a>安装npm</h4><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install npm</span><br></pre></td></tr></table></figure>\n\n<p>查看node和npm版本</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">-v</span></span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装cnpm\"><a href=\"#安装cnpm\" class=\"headerlink\" title=\"安装cnpm\"></a>安装cnpm</h4><p>因为防火墙的缘故，很多境外网站被墙了，所以使用node.js的原生工具npm是无法正常安装模块的，建议使用淘宝前端组的国内镜像，使用他们定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> install -g cnpm --registry=https://registry.<span class=\"built_in\">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>使用方法如下：</p>\n<p>从<code>registry.npm.taobao.org</code> 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cnpm <span class=\"keyword\">install</span> [name]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo的安装与使用\"><a href=\"#Hexo的安装与使用\" class=\"headerlink\" title=\"Hexo的安装与使用\"></a>Hexo的安装与使用</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>安转了node之后，就可以使用以下命令来安装hexo：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-<span class=\"keyword\">cli</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Hexo\"><a href=\"#使用Hexo\" class=\"headerlink\" title=\"使用Hexo\"></a>使用Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装hexo插件\"><a href=\"#安装hexo插件\" class=\"headerlink\" title=\"安装hexo插件\"></a>安装hexo插件</h3><p><a href=\"https://github.com/aircloud/hexo-theme-aircloud\">aircloud主题</a></p>\n<h4 id=\"可视化编辑博客（hexo-admin）\"><a href=\"#可视化编辑博客（hexo-admin）\" class=\"headerlink\" title=\"可视化编辑博客（hexo-admin）\"></a>可视化编辑博客（hexo-admin）</h4><p>安装并使用hexo-admin</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install <span class=\"comment\">--save hexo-admin</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"实现RRS功能（-hexo-generator-feed-）\"><a href=\"#实现RRS功能（-hexo-generator-feed-）\" class=\"headerlink\" title=\"实现RRS功能（ hexo-generator-feed ）\"></a>实现RRS功能（ hexo-generator-feed ）</h4><p>安装</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"实现本地搜索功能（hexo-generator-searchdb）\"><a href=\"#实现本地搜索功能（hexo-generator-searchdb）\" class=\"headerlink\" title=\"实现本地搜索功能（hexo-generator-searchdb）\"></a>实现本地搜索功能（hexo-generator-searchdb）</h4><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">search:</span></span><br><span class=\"line\"><span class=\"symbol\">  path:</span> search.xml</span><br><span class=\"line\"><span class=\"symbol\">  field:</span> post</span><br><span class=\"line\"><span class=\"symbol\">  format:</span> html</span><br><span class=\"line\"><span class=\"symbol\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n\n<p>除了安装本地搜索，还可以考虑 * swiftype * 的搜索。</p>\n","tags":["Hexo"]},{"title":"python3报错:No module named '_tkinter' or 'tkinter'","url":"/2020/06/28/Python/tkinter/index.html","content":"<h4 id=\"检查ctl与tk是否已安装\"><a href=\"#检查ctl与tk是否已安装\" class=\"headerlink\" title=\"检查ctl与tk是否已安装\"></a>检查ctl与tk是否已安装</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -<span class=\"keyword\">qa</span> | <span class=\"keyword\">grep</span> ctl</span><br><span class=\"line\">rpm -<span class=\"keyword\">qa</span> | <span class=\"keyword\">grep</span> ^tk</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"本次解决方法\"><a href=\"#本次解决方法\" class=\"headerlink\" title=\"本次解决方法\"></a>本次解决方法</h4><p><strong>centos</strong></p>\n<ul>\n<li>No module named ‘_tkinter’</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">将./configure、make以后在build/lib.linux-x86_64-2.7目录下面生成的_tkinter.so，拷贝到Python的安装目录 lib/python/lib-dynload中，运行import Tkinter就OK了。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>No module named ‘tkinter’</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum search tkinter 搜索有无安装包</span><br><span class=\"line\"></span><br><span class=\"line\">yum install python3-tkinter</span><br><span class=\"line\">yum install tk-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>ubuntu</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3-tk</span><br></pre></td></tr></table></figure>\n\n"},{"title":"python的一些函数对比","url":"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index.html","content":"<h2 id=\"filter-、map-、reduce\"><a href=\"#filter-、map-、reduce\" class=\"headerlink\" title=\"filter()、map()、reduce()\"></a>filter()、map()、reduce()</h2><p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/1601130937320.png\" alt=\"1601130937320\"></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h4><ul>\n<li>过滤</li>\n</ul>\n<p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/filter.png\" alt=\"1601130980572\"></p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h4><ul>\n<li>经过lambda函数生成新的列表</li>\n</ul>\n<p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/map.png\" alt=\"1601131155244\"></p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h4><ul>\n<li>累记操作 （累加 常用sum()）</li>\n</ul>\n<p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/reduce.png\" alt=\"1601131496968\"></p>\n<p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/reduce1.png\" alt=\"1601131667117\"></p>\n<h2 id=\"eval-、exec\"><a href=\"#eval-、exec\" class=\"headerlink\" title=\"eval()、exec()\"></a>eval()、exec()</h2><p>eval() 和 exec() 函数的功能是相似的，都可以执行一个字符串形式的 Python 代码（代码以字符串的形式提供），相当于一个 Python 的解释器。二者不同之处在于，eval() 执行完要返回结果，而 exec() 执行完不返回结果。<br>eval() 函数的语法格式为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(source, <span class=\"built_in\">globals</span>=<span class=\"literal\">None</span>, <span class=\"built_in\">locals</span>=<span class=\"literal\">None</span>, /)</span><br></pre></td></tr></table></figure>\n\n<p>exec() 函数的语法格式如下： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span>(source, <span class=\"built_in\">globals</span>=<span class=\"literal\">None</span>, <span class=\"built_in\">locals</span>=<span class=\"literal\">None</span>, /)</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到，二者的语法格式除了函数名，其他都相同，其中各个参数的具体含义如下：</p>\n<ul>\n<li>source：这个参数是一个字符串，代表要执行的语句 。该语句受后面两个字典类型参数 globals 和 locals 的限制，只有在 globals 字典和 locals 字典作用域内的函数和变量才能被执行。</li>\n<li>globals：这个参数管控的是一个全局的命名空间，即 source可以使用全局命名空间中的函数。如果只是提供了 globals 参数，而没有提供自定义的 __builtins__，则系统会将当前环境中的 _<em>builtins</em>_ 复制到自己提供的 globals 中，然后才会进行计算；如果连 globals 这个参数都没有被提供，则使用 Python 的全局命名空间。</li>\n<li>locals：这个参数管控的是一个局部的命名空间，和 globals 类似，当它和 globals 中有重复或冲突时，以 locals 的为准。如果 locals 没有被提供，则默认为 globals。</li>\n</ul>\n<blockquote>\n<p>注意，<strong>builtins</strong> 是 Python 的内建模块，平时使用的 int、str、abs 都在这个模块中。通过 print(dic[“<strong>builtins</strong>“]) 语句可以查看 <strong>builtins</strong> 所对应的 value。</p>\n</blockquote>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h3><p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/eval.png\" alt=\"1601134395639\"></p>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h3><p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/exec.png\" alt=\"1601133301583\"></p>\n<blockquote>\n<p>若在提供的作用域中没有__builtins__，则会将全局变量中的__builtins__复制到global中</p>\n</blockquote>\n<p><img src=\"/2020/09/26/Python/%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/exec1.png\" alt=\"1601133698525\"></p>\n<p><strong>区别</strong>：</p>\n<ul>\n<li>eval() 执行完会返回结果，而 exec() 执行完不返回结果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"string\">&quot;a = 2&quot;</span>) <span class=\"comment\">#相当于直接执行 a=2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">a = <span class=\"built_in\">exec</span>(<span class=\"string\">&quot;2+3&quot;</span>) <span class=\"comment\">#相当于直接执行 2+3，但是并没有返回值，a 应为 None</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">a = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;2+3&#x27;</span>) <span class=\"comment\">#执行 2+3，并把结果返回给 a</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">None</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n\n<p><strong>优点：</strong></p>\n<p> 客户端向服务端发送一段字符串代码，服务端无需关心具体的内容，直接跳过 eval() 或 exec() 来执行，这样的设计会使服务端与客户端的耦合度更低，系统更易扩展。 </p>\n<p><strong>缺点：</strong></p>\n<p> 在使用 eval() 或是 exec() 来处理请求代码时，函数 eval() 和 exec() 常常会被黑客利用，成为可以执行系统级命令的入口点，进而来攻击网站。</p>\n<p>解决方法是：通过设置其命名空间里的可执行函数，来限制 eval() 和 exec() 的执行范围。 </p>\n"},{"title":"搭建简易web服务器","url":"/2020/07/20/Python/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html","content":"<p>使用python搭建简易的文件服务器，如下图</p>\n<p><img src=\"/2020/07/20/Python/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index/15132792-6997f710e4aa9338.webp\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> 进入指定目录下 启动服务</span></span><br><span class=\"line\">python -m http.server 8888  # 自行指定端口</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>以下步骤未尝试，先行记录</p>\n<blockquote>\n<p>如果没有显示，不要急，完成第五步</p>\n<ul>\n<li>在文件夹中建一个index.html文件，这样访问的时候，就会自动跳转到该目录下的index.html界面</li>\n</ul>\n</blockquote>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;北方姑娘的小窝&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--&lt;h1&gt;Welcome to beifanggirl&#39;s home&lt;/h1&gt;--&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=&quot;day08&quot;&gt;day8&lt;/a&gt;&lt;/li&gt;  &lt;!--所有子目录--&gt;\n        &lt;li&gt;&lt;a href=&quot;day2&quot;&gt;day2&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;day3&quot;&gt;day3&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;day4&quot;&gt;day4&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;day5&quot;&gt;day5&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;```\n</code></pre>\n","tags":["web","python"]},{"title":"日常报错收集","url":"/2020/09/26/Python/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86/index.html","content":"<h4 id=\"error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-status-1\"><a href=\"#error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-status-1\" class=\"headerlink\" title=\"error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1\"></a>error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</h4><blockquote>\n<p>环境：Ubuntu20 python3.8  </p>\n<p>安装scrapy的过程中报错</p>\n</blockquote>\n<p>解决：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install python3-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"ImportError-cannot-import-name-ensure-file-on-disk\"><a href=\"#ImportError-cannot-import-name-ensure-file-on-disk\" class=\"headerlink\" title=\"ImportError: cannot import name ensure_file_on_disk\"></a>ImportError: cannot import name ensure_file_on_disk</h4><blockquote>\n<p>环境：Ubuntu18 python3.6</p>\n<p>安装virtualenv 和 virtualenvwrapper后，创建虚拟环境报错</p>\n</blockquote>\n<p>解决：</p>\n<p>使用sudo apt install 安装，勿使用 pip安装</p>\n"},{"title":"爬虫","url":"/2020/09/26/Python/%E7%88%AC%E8%99%AB/index.html","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"requests模块\"><a href=\"#requests模块\" class=\"headerlink\" title=\"requests模块\"></a>requests模块</h3><h4 id=\"基本请求参数\"><a href=\"#基本请求参数\" class=\"headerlink\" title=\"基本请求参数\"></a>基本请求参数</h4><ul>\n<li><p>USER_AGENT</p>\n</li>\n<li><p>cookies 与 cookiejar</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">cookie_dict = request.utils.dict_from_cookiejar(response.cookies)</span><br><span class=\"line\"></span><br><span class=\"line\">cookie_jar = request.utils.cookiejar_from_dict(cookie_dict)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>timeout：超时参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.get(url, timeout=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>代理</p>\n<p>匿名度</p>\n<ul>\n<li><p>透明代理：虽然直接隐藏了本地IP，但依旧能够查询到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匿名代理：能知道使用了代理，但无法查询本地IP</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>高匿代理：无法判断是否使用了代理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = <span class=\"keyword\">not</span> determined</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = <span class=\"keyword\">not</span> determined</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>协议</p>\n<ul>\n<li>HTTP</li>\n<li>HTTPS</li>\n<li>socks隧道代理</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">response = requests.get(url, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;http&quot;</span>:<span class=\"string\">&quot;http://127.0.0.1:8888&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https&quot;</span>:<span class=\"string\">&quot;https://127.0.0.1:8888&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 若有多个配置，发送请求时将按照url地址的协议选择使用相应的代理ip</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>verify  忽略CA证书</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.get(url, verify=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>交互获取参数：input()</p>\n<p>命令行获取参数：sys.argv</p>\n<h4 id=\"post请求参数\"><a href=\"#post请求参数\" class=\"headerlink\" title=\"post请求参数\"></a>post请求参数</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.post(url, data)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>post数据来源<ul>\n<li>固定值</li>\n<li>输入值</li>\n<li>预设值–静态文件中</li>\n<li>预设值–发送请求获取</li>\n<li>在客户端生成，分析js文件</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"session状态保持\"><a href=\"#session状态保持\" class=\"headerlink\" title=\"session状态保持\"></a>session状态保持</h4><ul>\n<li><p>requests.session</p>\n<ul>\n<li>自动处理cookie，下一次请求会带上前一次的cookie</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">session = requests.session()</span><br><span class=\"line\">response = session.get(url, headers, ...)</span><br><span class=\"line\">response = session.post(url, data, ...)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>session对象与requests模块发送请求处理一致</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    <span class=\"comment\"># session</span></span><br><span class=\"line\">    session = requests.session()</span><br><span class=\"line\">    <span class=\"comment\"># headers</span></span><br><span class=\"line\">    session.headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取token</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送请求获取响应</span></span><br><span class=\"line\">    token_url = <span class=\"string\">&#x27;https://github.com/login&#x27;</span></span><br><span class=\"line\">    response = session.get(token_url)</span><br><span class=\"line\">    <span class=\"comment\"># 正则提取数据</span></span><br><span class=\"line\">    content = response.content.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    html = etree.HTML(content)</span><br><span class=\"line\">    token = html.xpath(<span class=\"string\">&quot;//input[contains(@name,&#x27;authenticity_token&#x27;)]/@value&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(token)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据提取\"><a href=\"#数据提取\" class=\"headerlink\" title=\"数据提取\"></a>数据提取</h3><h4 id=\"响应内容分类\"><a href=\"#响应内容分类\" class=\"headerlink\" title=\"响应内容分类\"></a>响应内容分类</h4><ul>\n<li>结构化响应内容<ul>\n<li>json字符串</li>\n<li>xml数据</li>\n</ul>\n</li>\n<li>非结构化响应内容<ul>\n<li>html数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"xml与html的区别\"><a href=\"#xml与html的区别\" class=\"headerlink\" title=\"xml与html的区别\"></a>xml与html的区别</h4><ul>\n<li><p>xml是一种可扩展标记语言，和html很相似，功能更专注于传输和存储数据，重点在 数据</p>\n<p>html是超文本标记语言，在于显示数据以及更好展示数据，重点在 显示</p>\n</li>\n</ul>\n<h4 id=\"常用数据解析方法\"><a href=\"#常用数据解析方法\" class=\"headerlink\" title=\"常用数据解析方法\"></a>常用数据解析方法</h4><p><img src=\"/2020/09/26/Python/%E7%88%AC%E8%99%AB/index/%E7%88%AC%E8%99%AB%5C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.png\" alt=\"1601799677692\"></p>\n<h4 id=\"jsonpath\"><a href=\"#jsonpath\" class=\"headerlink\" title=\"jsonpath\"></a>jsonpath</h4><ul>\n<li>按照key对字典进行批量数据提取</li>\n<li>pip install jsonpath</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsonpath(a, <span class=\"string\">&#x27;jsonpath语法规则字符串&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/26/Python/%E7%88%AC%E8%99%AB/index/%E7%88%AC%E8%99%AB%5Cjsonpath%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99.png\" alt=\"1601800851193\"></p>\n<h2 id=\"Scrapy框架学习\"><a href=\"#Scrapy框架学习\" class=\"headerlink\" title=\"Scrapy框架学习\"></a>Scrapy框架学习</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p><img src=\"/2020/09/26/Python/%E7%88%AC%E8%99%AB/index/scrapy%E6%B5%81%E7%A8%8B.png\" alt=\"1601112654263\"></p>\n<p><strong>scrapy内置对象</strong></p>\n<ul>\n<li>request请求对象</li>\n<li>response响应对象</li>\n<li>item数据对象（字典）</li>\n</ul>\n<p><strong>模块</strong></p>\n<ul>\n<li><p>Scrapy Engine（引擎）：负责数据和信号在不同模块之间的传递</p>\n<p>（Scrappy已实现）</p>\n</li>\n<li><p>Scheduler（调度器）：队列，用来存放request请求（URL）</p>\n<p>（Scrappy已实现）</p>\n</li>\n<li><p>Downloader（下载器）：下载引擎发送的request请求，并返回给引擎</p>\n<p>（Scrappy已实现）</p>\n</li>\n<li><p>Spider（爬虫）：处理引擎发送的response，提取数据，并返回给引擎</p>\n<p>（需要编写）</p>\n</li>\n<li><p>Item Pipeline（管道）：处理引擎传递的数据，如存储</p>\n<p>（需要编写）</p>\n</li>\n<li><p>Downloader Middleware（下载中间件）：可以自定义的下载扩展，如设置代理</p>\n<p>（根据需求）</p>\n</li>\n<li><p>Spider Middleware（爬虫中间件）：可以自定义request请求进行和response过滤</p>\n<p>（根据需求）</p>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install scrapy</span><br><span class=\"line\">或</span><br><span class=\"line\">pip install scrapy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrapy startproject &lt;项目名&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建爬虫\"><a href=\"#创建爬虫\" class=\"headerlink\" title=\"创建爬虫\"></a>创建爬虫</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在项目路径下执行</span></span><br><span class=\"line\">scrapy genspider &lt;爬虫名&gt; &lt;允许爬取的域名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">scrapy genspider baidu baidu.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据建模\"><a href=\"#数据建模\" class=\"headerlink\" title=\"数据建模\"></a>数据建模</h3><ul>\n<li>约束和规范爬取的数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyscrapyItem</span>(scrapy.Item):</span><br><span class=\"line\">    <span class=\"comment\"># 规范爬取的数据</span></span><br><span class=\"line\">    name = scrapy.Field()</span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    desc = scrapy.Field()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    item = MyscrapyItem()</span><br><span class=\"line\">    item[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;哈哈&#x27;</span></span><br><span class=\"line\">    item[<span class=\"string\">&#x27;title&#x27;</span>] = <span class=\"string\">&#x27;哈哈&#x27;</span></span><br><span class=\"line\">    item[<span class=\"string\">&#x27;desc&#x27;</span>] = <span class=\"string\">&#x27;哈哈&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完善爬虫\"><a href=\"#完善爬虫\" class=\"headerlink\" title=\"完善爬虫\"></a>完善爬虫</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> myscrapy.items <span class=\"keyword\">import</span> MyscrapyItem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ItcastSpider</span>(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;itcast&#x27;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&#x27;itcaset.cn&#x27;</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">&#x27;http://www.itcast.cn/channel/teacher.shtml#ajavaee&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse</span>(<span class=\"params\">self, response</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 解析start_urls的response获取url列表</span></span><br><span class=\"line\">        node_list = response.xpath(<span class=\"string\">&quot;//div[@class=&#x27;li_txt&#x27;]&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(len(node_list))</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> node_list:</span><br><span class=\"line\">            <span class=\"comment\"># temp = dict()</span></span><br><span class=\"line\">            temp = MyscrapyItem()</span><br><span class=\"line\">            <span class=\"comment\"># xpath返回选择器对象列表SelectorList object，而非字符串</span></span><br><span class=\"line\">            <span class=\"comment\"># extract() 从选择器中提取数据</span></span><br><span class=\"line\">            <span class=\"comment\"># extract_first() 获取选择器列表的第一个对象，列表为空时不会报错</span></span><br><span class=\"line\">            temp[<span class=\"string\">&#x27;name&#x27;</span>] = node.xpath(<span class=\"string\">&quot;./h3/text()&quot;</span>).extract_first()</span><br><span class=\"line\">            temp[<span class=\"string\">&#x27;title&#x27;</span>] = node.xpath(<span class=\"string\">&quot;./h4/text()&quot;</span>)[<span class=\"number\">0</span>].extract()  <span class=\"comment\"># 列表为空时报错</span></span><br><span class=\"line\">            temp[<span class=\"string\">&#x27;desc&#x27;</span>] = node.xpath(<span class=\"string\">&quot;./p/text()&quot;</span>)[<span class=\"number\">0</span>].extract()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># temp = dict(temp)  # 转为dict后传入管道（不推荐，最好在数据处理方法中进行转换）</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用yield，比return的好处？</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> temp</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># print(response.url)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(response.request.url)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(response.headers)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(response.request.headers)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><blockquote>\n<p>利用管道pipeline处理数据</p>\n</blockquote>\n<ul>\n<li>定义管道类</li>\n<li>重写管道类的process_item方法</li>\n<li>process_item方法将item返回给引擎</li>\n</ul>\n<p>在配置文件中启用管道</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;myscrapy.pipelines.MyscrapyPipeline&#x27;</span>: <span class=\"number\">300</span>,  <span class=\"comment\"># 数字代表管道执行的优先度，多个管道存在时 值越小 优先度越高</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyscrapyPipeline</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 打开的文件必须关闭，必须有关闭文件操作</span></span><br><span class=\"line\">        self.file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;itcast.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">process_item</span>(<span class=\"params\">self, item, spider</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        数据处理的管道, 从管道中每取出一条数据调用一次该方法</span></span><br><span class=\"line\"><span class=\"string\">        :param item: scrapy.Spider.parse()的返回</span></span><br><span class=\"line\"><span class=\"string\">        :param spider: 运行的爬虫对象</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pipeline:&#x27;</span>, item)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(item))  <span class=\"comment\"># &lt;class &#x27;myscrapy.items.MyscrapyItem&#x27;&gt; (使用数据模型后)</span></span><br><span class=\"line\">        <span class=\"comment\"># 虽然输出形式与字典相同，但并非dict的子类，无dict方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 将MyscrapyItem对象强转为dict</span></span><br><span class=\"line\">        item = <span class=\"built_in\">dict</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 对文件的操作不能写在该方法中，文件每次的读写io会严重影响运行速度</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将字典序列化</span></span><br><span class=\"line\">        json_data = json.dumps(item, ensure_ascii=<span class=\"literal\">False</span>) + <span class=\"string\">&#x27;,\\n&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 将数据写入文件</span></span><br><span class=\"line\">        self.file.write(json_data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.file.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"运行scrapy\"><a href=\"#运行scrapy\" class=\"headerlink\" title=\"运行scrapy\"></a>运行scrapy</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrapy crawl &lt;爬虫名&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/26/Python/%E7%88%AC%E8%99%AB/index/%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97.png\" alt=\"1601126920745\"></p>\n<h3 id=\"构造Request对象，发送请求\"><a href=\"#构造Request对象，发送请求\" class=\"headerlink\" title=\"构造Request对象，发送请求\"></a>构造Request对象，发送请求</h3><ol>\n<li>确定url</li>\n<li>构造请求  <code>scrapy.Request(url, callback)</code><ul>\n<li><code>callback</code>：指定解析函数，表示该请求返回的响应使用该函数解析</li>\n</ul>\n</li>\n<li>把请求交给引擎：<code>yield scrapy.Request(url, callback)</code></li>\n</ol>\n"},{"title":"解决PyUtilib.enum报错","url":"/2020/09/19/Python/%E8%A7%A3%E5%86%B3PyUtilib-enum%E6%8A%A5%E9%94%99/index.html","content":"<p>在安装eomof时会自动安装错误版本的PyUtilib。重新安装PyUtilib&#x3D;&#x3D;5.8.0</p>\n"},{"title":"智能合约","url":"/2020/06/04/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/index.html","content":"<h2 id=\"truffle-ETH以太坊智能合约集成开发工具\"><a href=\"#truffle-ETH以太坊智能合约集成开发工具\" class=\"headerlink\" title=\"truffle (ETH以太坊智能合约集成开发工具)\"></a><em>truffle</em> (ETH以太坊智能合约集成开发<em>工具</em>)</h2><ul>\n<li><code>npm install -g truffle</code> (本人windows安装失败，放弃了，暂时没有使用到)</li>\n</ul>\n<h2 id=\"编写、测试工具\"><a href=\"#编写、测试工具\" class=\"headerlink\" title=\"编写、测试工具\"></a>编写、测试工具</h2><ul>\n<li>在线开发工具：<a href=\"https://remix.ethereum.org/\">https://remix.ethereum.org/</a></li>\n<li>本地开发工具：<code>npm install remix-ide -g</code>  (本人windows安装失败，放弃了)</li>\n</ul>\n<h2 id=\"chrome插件\"><a href=\"#chrome插件\" class=\"headerlink\" title=\"chrome插件\"></a>chrome插件</h2><ul>\n<li>MetaMask</li>\n</ul>\n<h2 id=\"以太坊连接工具\"><a href=\"#以太坊连接工具\" class=\"headerlink\" title=\"以太坊连接工具\"></a>以太坊连接工具</h2><ul>\n<li>通往以太坊和 IPFS 网络的通道</li>\n<li><a href=\"https://infura.io/\">https://infura.io/</a></li>\n</ul>\n<h2 id=\"本地模拟以太坊节点\"><a href=\"#本地模拟以太坊节点\" class=\"headerlink\" title=\"本地模拟以太坊节点\"></a>本地模拟以太坊节点</h2><ul>\n<li>ganache<ul>\n<li>图形化界面：<a href=\"https://github.com/trufflesuite/ganache/releases\">https://github.com/trufflesuite/ganache/releases</a></li>\n<li>终端界面：<code>npm install ganache-cli -g</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"以太坊测试环境浏览器\"><a href=\"#以太坊测试环境浏览器\" class=\"headerlink\" title=\"以太坊测试环境浏览器\"></a>以太坊测试环境浏览器</h2><ul>\n<li><a href=\"https://teth.bitaps.com/\">https://teth.bitaps.com</a></li>\n</ul>\n","tags":["区块链"]},{"title":"python类的魔法方法","url":"/2020/09/26/Python/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/index.html","content":"<table>\n<thead>\n<tr>\n<th>魔法方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td><strong>基本的魔法方法</strong></td>\n</tr>\n<tr>\n<td>_<em>new</em>_(cls[, …])</td>\n<td>1. <strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法 2. 它的第一个参数是这个类，其他的参数是用来直接传递给 <strong>init</strong> 方法 3. <strong>new</strong> 决定是否要使用该 <strong>init</strong> 方法，因为 <strong>new</strong> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <strong>new</strong> 没有返回实例对象，则 <strong>init</strong> 不会被调用 4. <strong>new</strong> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</td>\n</tr>\n<tr>\n<td>_<em>init</em>_(self[, …])</td>\n<td>构造器，当一个实例被创建的时候调用的初始化方法</td>\n</tr>\n<tr>\n<td>_<em>del</em>_(self)</td>\n<td>析构器，当一个实例被销毁的时候调用的方法</td>\n</tr>\n<tr>\n<td>_<em>call</em>_(self[, args…])</td>\n<td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b)</td>\n</tr>\n<tr>\n<td>_<em>len</em>_(self)</td>\n<td>定义当被 len() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>repr</em>_(self)</td>\n<td>定义当被 repr() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>str</em>_(self)</td>\n<td>定义当被 str() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>bytes</em>_(self)</td>\n<td>定义当被 bytes() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>hash</em>_(self)</td>\n<td>定义当被 hash() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>bool</em>_(self)</td>\n<td>定义当被 bool() 调用时的行为，应该返回 True 或 False</td>\n</tr>\n<tr>\n<td>_<em>format</em>_(self, format_spec)</td>\n<td>定义当被 format() 调用时的行为</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>有关属性</strong></td>\n</tr>\n<tr>\n<td>_<em>getattr</em>_(self, name)</td>\n<td>定义当用户试图获取一个不存在的属性时的行为</td>\n</tr>\n<tr>\n<td>_<em>getattribute</em>_(self, name)</td>\n<td>定义当该类的属性被访问时的行为</td>\n</tr>\n<tr>\n<td>_<em>setattr</em>_(self, name, value)</td>\n<td>定义当一个属性被设置时的行为</td>\n</tr>\n<tr>\n<td>_<em>delattr</em>_(self, name)</td>\n<td>定义当一个属性被删除时的行为</td>\n</tr>\n<tr>\n<td>_<em>dir</em>_(self)</td>\n<td>定义当 dir() 被调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>get</em>_(self, instance, owner)</td>\n<td>定义当描述符的值被取得时的行为</td>\n</tr>\n<tr>\n<td>_<em>set</em>_(self, instance, value)</td>\n<td>定义当描述符的值被改变时的行为</td>\n</tr>\n<tr>\n<td>_<em>delete</em>_(self, instance)</td>\n<td>定义当描述符的值被删除时的行为</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>比较操作符</strong></td>\n</tr>\n<tr>\n<td>_<em>lt</em>_(self, other)</td>\n<td>定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y)</td>\n</tr>\n<tr>\n<td>_<em>le</em>_(self, other)</td>\n<td>定义小于等于号的行为：x &lt;&#x3D; y 调用 x.<strong>le</strong>(y)</td>\n</tr>\n<tr>\n<td>_<em>eq</em>_(self, other)</td>\n<td>定义等于号的行为：x &#x3D;&#x3D; y 调用 x.<strong>eq</strong>(y)</td>\n</tr>\n<tr>\n<td>_<em>ne</em>_(self, other)</td>\n<td>定义不等号的行为：x !&#x3D; y 调用 x.<strong>ne</strong>(y)</td>\n</tr>\n<tr>\n<td>_<em>gt</em>_(self, other)</td>\n<td>定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y)</td>\n</tr>\n<tr>\n<td>_<em>ge</em>_(self, other)</td>\n<td>定义大于等于号的行为：x &gt;&#x3D; y 调用 x.<strong>ge</strong>(y)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>算数运算符</strong></td>\n</tr>\n<tr>\n<td>_<em>add</em>_(self, other)</td>\n<td>定义加法的行为：+</td>\n</tr>\n<tr>\n<td>_<em>sub</em>_(self, other)</td>\n<td>定义减法的行为：-</td>\n</tr>\n<tr>\n<td>_<em>mul</em>_(self, other)</td>\n<td>定义乘法的行为：*</td>\n</tr>\n<tr>\n<td>_<em>truediv</em>_(self, other)</td>\n<td>定义真除法的行为：&#x2F;</td>\n</tr>\n<tr>\n<td>_<em>floordiv</em>_(self, other)</td>\n<td>定义整数除法的行为：&#x2F;&#x2F;</td>\n</tr>\n<tr>\n<td>_<em>mod</em>_(self, other)</td>\n<td>定义取模算法的行为：%</td>\n</tr>\n<tr>\n<td>_<em>divmod</em>_(self, other)</td>\n<td>定义当被 divmod() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>pow</em>_(self, other[, modulo])</td>\n<td>定义当被 power() 调用或 ** 运算时的行为</td>\n</tr>\n<tr>\n<td>_<em>lshift</em>_(self, other)</td>\n<td>定义按位左移位的行为：&lt;&lt;</td>\n</tr>\n<tr>\n<td>_<em>rshift</em>_(self, other)</td>\n<td>定义按位右移位的行为：&gt;&gt;</td>\n</tr>\n<tr>\n<td>_<em>and</em>_(self, other)</td>\n<td>定义按位与操作的行为：&amp;</td>\n</tr>\n<tr>\n<td>_<em>xor</em>_(self, other)</td>\n<td>定义按位异或操作的行为：^</td>\n</tr>\n<tr>\n<td>_<em>or</em>_(self, other)</td>\n<td>定义按位或操作的行为：|</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>反运算</strong></td>\n</tr>\n<tr>\n<td>_<em>radd</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rsub</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rmul</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rtruediv</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rfloordiv</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rmod</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rdivmod</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rpow</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rlshift</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rrshift</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>rxor</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td>_<em>ror</em>_(self, other)</td>\n<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>增量赋值运算</strong></td>\n</tr>\n<tr>\n<td>_<em>iadd</em>_(self, other)</td>\n<td>定义赋值加法的行为：+&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>isub</em>_(self, other)</td>\n<td>定义赋值减法的行为：-&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>imul</em>_(self, other)</td>\n<td>定义赋值乘法的行为：*&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>itruediv</em>_(self, other)</td>\n<td>定义赋值真除法的行为：&#x2F;&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>ifloordiv</em>_(self, other)</td>\n<td>定义赋值整数除法的行为：&#x2F;&#x2F;&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>imod</em>_(self, other)</td>\n<td>定义赋值取模算法的行为：%&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>ipow</em>_(self, other[, modulo])</td>\n<td>定义赋值幂运算的行为：**&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>ilshift</em>_(self, other)</td>\n<td>定义赋值按位左移位的行为：&lt;&lt;&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>irshift</em>_(self, other)</td>\n<td>定义赋值按位右移位的行为：&gt;&gt;&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>iand</em>_(self, other)</td>\n<td>定义赋值按位与操作的行为：&amp;&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>ixor</em>_(self, other)</td>\n<td>定义赋值按位异或操作的行为：^&#x3D;</td>\n</tr>\n<tr>\n<td>_<em>ior</em>_(self, other)</td>\n<td>定义赋值按位或操作的行为：|&#x3D;</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>一元操作符</strong></td>\n</tr>\n<tr>\n<td>_<em>neg</em>_(self)</td>\n<td>定义正号的行为：+x</td>\n</tr>\n<tr>\n<td>_<em>pos</em>_(self)</td>\n<td>定义负号的行为：-x</td>\n</tr>\n<tr>\n<td>_<em>abs</em>_(self)</td>\n<td>定义当被 abs() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>invert</em>_(self)</td>\n<td>定义按位求反的行为：~x</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>类型转换</strong></td>\n</tr>\n<tr>\n<td>_<em>complex</em>_(self)</td>\n<td>定义当被 complex() 调用时的行为（需要返回恰当的值）</td>\n</tr>\n<tr>\n<td>_<em>int</em>_(self)</td>\n<td>定义当被 int() 调用时的行为（需要返回恰当的值）</td>\n</tr>\n<tr>\n<td>_<em>float</em>_(self)</td>\n<td>定义当被 float() 调用时的行为（需要返回恰当的值）</td>\n</tr>\n<tr>\n<td>_<em>round</em>_(self[, n])</td>\n<td>定义当被 round() 调用时的行为（需要返回恰当的值）</td>\n</tr>\n<tr>\n<td>_<em>index</em>_(self)</td>\n<td>1. 当对象是被应用在切片表达式中时，实现整形强制转换 2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong> 3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>上下文管理（with 语句）</strong></td>\n</tr>\n<tr>\n<td>_<em>enter</em>_(self)</td>\n<td>1. 定义当使用 with 语句时的初始化行为 2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定</td>\n</tr>\n<tr>\n<td>_<em>exit</em>_(self, exc_type, exc_value, traceback)</td>\n<td>1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么 2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>容器类型</strong></td>\n</tr>\n<tr>\n<td>_<em>len</em>_(self)</td>\n<td>定义当被 len() 调用时的行为（返回容器中元素的个数）</td>\n</tr>\n<tr>\n<td>_<em>getitem</em>_(self, key)</td>\n<td>定义获取容器中指定元素的行为，相当于 self[key]</td>\n</tr>\n<tr>\n<td>_<em>setitem</em>_(self, key, value)</td>\n<td>定义设置容器中指定元素的行为，相当于 self[key] &#x3D; value</td>\n</tr>\n<tr>\n<td>_<em>delitem</em>_(self, key)</td>\n<td>定义删除容器中指定元素的行为，相当于 del self[key]</td>\n</tr>\n<tr>\n<td>_<em>iter</em>_(self)</td>\n<td>定义当迭代容器中的元素的行为</td>\n</tr>\n<tr>\n<td>_<em>reversed</em>_(self)</td>\n<td>定义当被 reversed() 调用时的行为</td>\n</tr>\n<tr>\n<td>_<em>contains</em>_(self, item)</td>\n<td>定义当使用成员测试运算符（in 或 not in）时的行为</td>\n</tr>\n</tbody></table>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"_new_\"></a>_<em>new</em>_</h3><h3 id=\"repr\"><a href=\"#repr\" class=\"headerlink\" title=\"_repr_\"></a>_<em>repr</em>_</h3><h3 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"_del_\"></a>_<em>del</em>_</h3><p>​\t\t在编写程序时，如果之前创建的类实例化对象后续不再使用，可对对象进行销毁，释放其占用的内存空间（python的垃圾回收机制）</p>\n<p>无论是手动销毁，还是 Python 自动销毁，都会调用 _<em>del</em>_() 方法。</p>\n<p>举个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CLanguage</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用 __init__() 方法构造对象&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用__del__() 销毁对象，释放其空间&quot;</span>)</span><br><span class=\"line\">clangs = CLanguage()</span><br><span class=\"line\"><span class=\"keyword\">del</span> clangs</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用 __init__() 方法构造对象</span><br><span class=\"line\">调用__del__() 销毁对象，释放其空间</span><br></pre></td></tr></table></figure>\n\n<p> 但是，千万不要误认为，只要为该实例对象调用 <strong>del</strong>() 方法，该对象所占用的内存空间就会被释放。举个例子： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CLanguage</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用 __init__() 方法构造对象&quot;</span>)    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用__del__() 销毁对象，释放其空间&quot;</span>)</span><br><span class=\"line\">clangs = CLanguage()<span class=\"comment\">#添加一个引用clangs对象的实例对象</span></span><br><span class=\"line\">cl = clangs</span><br><span class=\"line\"><span class=\"keyword\">del</span> clangs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***********&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果为：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用 <span class=\"built_in\">__init__</span>() 方法构造对象</span><br><span class=\"line\">***********</span><br><span class=\"line\">调用<span class=\"built_in\">__del__</span>() 销毁对象，释放其空间</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，最后一行输出信息，是程序执行即将结束时调用 _<em>del</em>_() 方法输出的。</p>\n</blockquote>\n<p>可以看到，当程序中有其它变量（比如这里的 cl）引用该实例对象时，即便手动调用 __del__() 方法，该方法也不会立即执行。这和 Python 的垃圾回收机制的引用计数有关，只有对象的的计数器值为 0，Python 才会真正调用 __del__() 方法将其回收。</p>\n<p> 以上面程序中的 clangs 为例，实际上构建 clangs 实例对象的过程分为 2 步，先使用 CLanguage() 调用该类中的 __init__() 方法构造出一个该类的对象（将其称为 C，计数器为 0），并立即用 clangs 这个变量作为所建实例对象的引用（ C 的计数器值 + 1）。在此基础上，又有一个 cl 变量引用 clangs（其实相当于引用 CLanguage()，此时 C 的计数器再 +1 ），这时如果调用<code>del clangs</code>语句，只会导致 C 的计数器减 1（值变为 1），因为 C 的计数器值不为 0，因此 C 不会被销毁（不会执行 __del__() 方法）。 </p>\n<p>如果在上面程序结尾，添加如下语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span> cl</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----------&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>则程序的执行结果为：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用 <span class=\"built_in\">__init__</span>() 方法构造对象</span><br><span class=\"line\">***********</span><br><span class=\"line\">调用<span class=\"built_in\">__del__</span>() 销毁对象，释放其空间</span><br><span class=\"line\">-----------</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当执行 del cl 语句时，其应用的对象实例对象 C 的计数器继续 -1（变为 0），对于计数器为 0 的实例对象，Python 会自动将其视为垃圾进行回收。</p>\n<p><strong>如果我们重写子类的 __del__() 方法（父类为非 object 的类），则必须显式调用父类的__del__() 方法，这样才能保证在回收子类对象时，其占用的资源（可能包含继承自父类的部分资源）能被彻底释放。</strong></p>\n<p>为了说明这一点，这里举一个反例： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CLanguage</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用父类 __del__() 方法&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cl</span>(<span class=\"title class_ inherited__\">CLanguage</span>):    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;调用子类 __del__() 方法&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">c = cl()</span><br><span class=\"line\"><span class=\"keyword\">del</span> c</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果为：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用子类 <span class=\"built_in\">__del__</span>() 方法</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"_dir_\"></a>_<em>dir</em>_</h3><h3 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"_dict_\"></a>_<em>dict</em>_</h3><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"_call_\"></a>_<em>call</em>_</h3><h3 id=\"hasattr\"><a href=\"#hasattr\" class=\"headerlink\" title=\"hasattr()\"></a>hasattr()</h3><h3 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"getattr()\"></a>getattr()</h3><h3 id=\"setattr\"><a href=\"#setattr\" class=\"headerlink\" title=\"setattr()\"></a>setattr()</h3><h3 id=\"issubclass\"><a href=\"#issubclass\" class=\"headerlink\" title=\"issubclass()\"></a>issubclass()</h3><ul>\n<li><p>issubclass( cls, class_or_tuple )</p>\n</li>\n<li><p>检查 cls 是否为后一个类或元组包含的多个类中任意类的子类。</p>\n</li>\n</ul>\n<h3 id=\"isinstance\"><a href=\"#isinstance\" class=\"headerlink\" title=\"isinstance()\"></a>isinstance()</h3><ul>\n<li><p>isinstance( obj, class_or_tuple )</p>\n</li>\n<li><p>检查 obj 是否为后一个类或元组包含的多个类中任意类的对象。</p>\n</li>\n</ul>\n"},{"title":"Centos7离线部署django项目","url":"/2020/06/12/%E8%BF%90%E7%BB%B4/Centos7%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/index.html","content":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>这里是我在部署中用到的一些资源</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1SzVqpHCi60ZEQTFrPFRZiA\">https://pan.baidu.com/s/1SzVqpHCi60ZEQTFrPFRZiA</a><br>提取码：9d09 </p>\n<h3 id=\"下载RPM依赖包\"><a href=\"#下载RPM依赖包\" class=\"headerlink\" title=\"下载RPM依赖包\"></a>下载RPM依赖包</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载到指定目录（依赖包会一起下载）</span></span><br><span class=\"line\">yum <span class=\"keyword\">install</span> --downloadonly --downloaddir=/root/httpd  (包名)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若downloadonly命令不存在，安装插件</span></span><br><span class=\"line\">yum <span class=\"keyword\">install</span> yum-plugin-downloadonly</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载项目依赖\"><a href=\"#下载项目依赖\" class=\"headerlink\" title=\"下载项目依赖\"></a>下载项目依赖</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在外网环境下载依赖包  packages:存储依赖包的文件夹</span><br><span class=\"line\">pip <span class=\"keyword\">freeze</span> &gt; requirements.txt</span><br><span class=\"line\">pip download -d packages -r requirements.txt  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装项目的python包</span><br><span class=\"line\">pip install <span class=\"comment\">--no-index --find-links=packages -r requirements.txt </span></span><br><span class=\"line\"></span><br><span class=\"line\"># 加入环境变量  使能够使用celery</span><br><span class=\"line\">export <span class=\"type\">PATH</span>=/usr/<span class=\"keyword\">local</span>/python3<span class=\"number\">.6</span>/bin:$<span class=\"type\">PATH</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CentOS7\"><a href=\"#CentOS7\" class=\"headerlink\" title=\"CentOS7\"></a>CentOS7</h2><h4 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h4><figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd xxx</span><br><span class=\"line\">passwd (用户名)</span><br><span class=\"line\"><span class=\"meta\"># 授权sudo权限</span></span><br><span class=\"line\"><span class=\"meta\"># https:<span class=\"comment\">//blog.csdn.net/abcdad/article/details/93744898</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><p>ping <a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<p>参考：<a href=\"https://blog.csdn.net/akipa11/article/details/81414875\">https://blog.csdn.net/akipa11/article/details/81414875</a></p>\n<h4 id=\"网络不可用\"><a href=\"#网络不可用\" class=\"headerlink\" title=\"网络不可用\"></a>网络不可用</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">dhclient  <span class=\"comment\"># 自动获取IP地址</span></span><br><span class=\"line\">ip <span class=\"keyword\">addr </span> <span class=\"comment\"># 代替ifconfig</span></span><br><span class=\"line\"><span class=\"comment\"># ping可通</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class=\"line\">将<span class=\"attribute\">ONBOOT</span>=<span class=\"literal\">no</span>改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static</span><br><span class=\"line\">并在后面增加几行内容：  自行修改ip</span><br><span class=\"line\"><span class=\"attribute\">IPADDR</span>=192.168.127.128</span><br><span class=\"line\"><span class=\"attribute\">NETMASK</span>=255.255.255.0</span><br><span class=\"line\"><span class=\"attribute\">GATEWAY</span>=192.168.127.2</span><br><span class=\"line\"><span class=\"attribute\">DNS1</span>=119.29.29.29</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启网络服务</span></span><br><span class=\"line\">systemctl restart network.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;Ethernet&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PROXY_METHOD</span>=<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BROWSER_ONLY</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BOOTPROTO</span>=<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV4_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6INIT</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_AUTOCONF</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_ADDR_GEN_MODE</span>=<span class=\"string\">&quot;stable-privacy&quot;</span></span><br><span class=\"line\"><span class=\"attr\">NAME</span>=<span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">UUID</span>=<span class=\"string\">&quot;dbb5fe6c-c3a3-48dd-a9cf-2ba69b25a4cb&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ONBOOT</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR</span>=<span class=\"string\">&quot;172.188.10.171&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PREFIX</span>=<span class=\"string\">&quot;24&quot;</span></span><br><span class=\"line\"><span class=\"attr\">GATEWAY</span>=<span class=\"string\">&quot;172.188.10.254&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DNS1</span>=<span class=\"string\">&quot;172.188.10.211&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DNS2</span>=<span class=\"string\">&quot;192.168.1.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_PRIVACY</span>=<span class=\"string\">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nsis\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网卡启动失败：failed to start LSB: Bring up/down networking</span></span><br><span class=\"line\"><span class=\"params\">system</span>ctl stop NetworkManager</span><br><span class=\"line\"><span class=\"params\">system</span>ctl restart network.service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装net-tools\"><a href=\"#安装net-tools\" class=\"headerlink\" title=\"安装net-tools\"></a>安装net-tools</h4><ul>\n<li>安装    命令ifconfig  netstat</li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">rpm</span> -ivh net-tools-<span class=\"number\">2</span>.<span class=\"number\">0</span>-<span class=\"number\">0</span>.<span class=\"number\">6</span>.<span class=\"number\">20130109</span>git.fc19.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><ul>\n<li>资源：Centos_package</li>\n</ul>\n<h4 id=\"安装gcc环境\"><a href=\"#安装gcc环境\" class=\"headerlink\" title=\"安装gcc环境\"></a>安装gcc环境</h4><ul>\n<li>使用命令<code>cd /root/softwares/01-gcc</code>进入gcc文件夹</li>\n<li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li>\n<li>安装完成后，输入命令<code>gcc -v</code>，如果得到gcc的版本表示安装成功</li>\n</ul>\n<h4 id=\"安装Python环境的依赖项\"><a href=\"#安装Python环境的依赖项\" class=\"headerlink\" title=\"安装Python环境的依赖项\"></a>安装Python环境的依赖项</h4><ul>\n<li>使用命令<code>cd /root/softwares/05-python-dependency</code>进入05-python-dependency文件夹</li>\n<li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li>\n</ul>\n<h3 id=\"方式二-（步骤不全）\"><a href=\"#方式二-（步骤不全）\" class=\"headerlink\" title=\"方式二 （步骤不全）\"></a>方式二 （步骤不全）</h3><p><a href=\"https://blog.csdn.net/LENOVOJXN/article/details/85334530\">https://blog.csdn.net/LENOVOJXN/article/details/85334530</a></p>\n<h4 id=\"安装python依赖包\"><a href=\"#安装python依赖包\" class=\"headerlink\" title=\"安装python依赖包\"></a>安装python依赖包</h4><h5 id=\"安装gcc\"><a href=\"#安装gcc\" class=\"headerlink\" title=\"安装gcc\"></a>安装gcc</h5><p><a href=\"https://blog.csdn.net/qq_28198181/article/details/82978830\">https://blog.csdn.net/qq_28198181/article/details/82978830</a></p>\n<p><a href=\"https://blog.csdn.net/yuan_ren_sheng/article/details/81021563\">https://blog.csdn.net/yuan_ren_sheng/article/details/81021563</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf gcc_rpm.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> gcc_rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装所有rpm文件</span></span><br><span class=\"line\"><span class=\"comment\"># 给文件添加x权限 </span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+x install_gcc.sh</span><br><span class=\"line\">sh install_gcc.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装python\"><a href=\"#安装python\" class=\"headerlink\" title=\"安装python\"></a>安装python</h2><h5 id=\"解压python安装包\"><a href=\"#解压python安装包\" class=\"headerlink\" title=\"解压python安装包\"></a>解压python安装包</h5><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvJf  Python-<span class=\"number\">3</span>.<span class=\"number\">7</span>.<span class=\"number\">0</span>.tar.xz  # 使用python3.<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /usr/local/python3 <span class=\"comment\"># 创建编译安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.0　　　　　　<span class=\"comment\"># 进入python的解压目录</span></span><br><span class=\"line\">./configure --prefix=/usr/local/python3 --enable-optimizations</span><br><span class=\"line\">make　　　<span class=\"comment\"># 编译</span></span><br><span class=\"line\">make install  <span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h5><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/python3 /u</span>sr<span class=\"regexp\">/local/</span>bin/python3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/pip3 /u</span>sr<span class=\"regexp\">/local/</span>bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><figure class=\"highlight gcode\"><table><tr><td class=\"code\"><pre><span class=\"line\">pytho<span class=\"symbol\">n3</span> -V</span><br><span class=\"line\">pip<span class=\"number\">3</span> -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">// pip安装mysqlclient 依赖</span><br><span class=\"line\">rpm -ivh mariadb-devel<span class=\"number\">-5.5</span><span class=\"number\">.65</span><span class=\"number\">-1.</span>el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 在外网环境下载依赖包  packages:存储依赖包的文件夹</span><br><span class=\"line\">pip <span class=\"keyword\">freeze</span> &gt; requirements.txt</span><br><span class=\"line\">pip download -d packages -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装项目的python包</span><br><span class=\"line\">pip install <span class=\"comment\">--no-index --find-links=packages -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"type\">PATH</span>=/usr/<span class=\"keyword\">local</span>/python3<span class=\"number\">.6</span>/bin:$<span class=\"type\">PATH</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mysql安装\"><a href=\"#Mysql安装\" class=\"headerlink\" title=\"Mysql安装\"></a>Mysql安装</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xvf mysql-5.7.30-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -Uvh *.rpm --nodeps --force</span><br><span class=\"line\"><span class=\"comment\"># 安装完毕</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 先关闭mysql服务</span><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">### Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">skip-grant-tables     #添加这句话，这时候登入mysql就不需要密码</span><br><span class=\"line\"><span class=\"attribute\">symbolic-links</span>=0</span><br><span class=\"line\"><span class=\"comment\">#------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启mysql服务</span><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>mysqld start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 无需账号密码登陆</span></span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> root@localhost = password(<span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">ERROR</span> 1290 (HY000): The MySQL<span class=\"built_in\"> server </span>is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class=\"line\">mysql&gt; flush privileges;  #更新权限</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> root@localhost = password(<span class=\"string\">&#x27;123456&#x27;</span>); </span><br><span class=\"line\">Query OK, 0 rows affected, 1 <span class=\"built_in\">warning</span> (0.00 sec)</span><br><span class=\"line\">mysql&gt;flush privileges; #更新权限</span><br><span class=\"line\">mysql&gt;quit; #退出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>mysqld stop # 停止mysql服务, 恢复mysql配置</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf     #修改配置文件</span><br><span class=\"line\"><span class=\"comment\">#------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"comment\"># skip-grant-tables # 注释掉这句话</span></span><br><span class=\"line\"><span class=\"attribute\">symbolic-links</span>=0</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------</span></span><br><span class=\"line\"><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>mysqld start # 启动mysql服务</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -p # 输入新密码登录</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Rabbitmq安装\"><a href=\"#Rabbitmq安装\" class=\"headerlink\" title=\"Rabbitmq安装\"></a>Rabbitmq安装</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -Uvh *.rpm</span><br><span class=\"line\"><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>rabbitmq-server start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若启动失败</span></span><br><span class=\"line\">systemctl status rabbitmq-server</span><br><span class=\"line\"><span class=\"comment\"># 若报错Failed to start LSB: Enable AMQP service provided by RabbitMQ broker.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先 </span></span><br><span class=\"line\">/etc/hostname</span><br><span class=\"line\">&gt; localhost.localdomain</span><br><span class=\"line\">/etc/hosts</span><br><span class=\"line\">添加ip地址  192.168.187.130 localhost localhost.localdomain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次启动</span><span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">service </span>rabbitmq-server start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vi /etc/rabbitmq/rabbitmq-env.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 新建文件，并在文件中写一句“NODENAME=rabbit@localhost”，保存就OK啦；</span></span><br><span class=\"line\"><span class=\"attribute\">NODENAME</span>=rabbit@localhost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rabbitmq启动成功后,启动后台管理插件</span></span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完后会有很多插件，可以使用</span></span><br><span class=\"line\">rabbitmq-plugins list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"celery\"><a href=\"#celery\" class=\"headerlink\" title=\"celery\"></a>celery</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/python3.6/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export PATH=/usr/local/python3.6/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile.d/python3.sh  <span class=\"comment\"># 避免重启丢失</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/selinux/config</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>![[image-20240619192543168.png]]</p>\n<h2 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.14.2.tar.gz</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浏览器已可访问nginx，打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 安装并运行成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">whereis</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入安装目录后</span></span><br><span class=\"line\">vi nginx.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装coin-cbc\"><a href=\"#安装coin-cbc\" class=\"headerlink\" title=\"安装coin-cbc\"></a>安装coin-cbc</h3><h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 依赖</span></span><br><span class=\"line\">CoinUtils</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\">若报错coinutiils is not available</span><br><span class=\"line\">解决方法:</span><br><span class=\"line\">\t将源码安装的依赖的lib中文件拷贝到/usr/lib64或/usr/lib64/pkgconfig中</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"coinbrew工具安装\"><a href=\"#coinbrew工具安装\" class=\"headerlink\" title=\"coinbrew工具安装\"></a>coinbrew工具安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://www.github.com/coin-or/coinbrew</span><br><span class=\"line\"><span class=\"built_in\">cd</span> coinbrew</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+x coinbrew</span><br><span class=\"line\">./coinbrew</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight isbl\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\<span class=\"variable\">coinbrew</span> <span class=\"variable\">fetch</span> <span class=\"function\"><span class=\"title\">Ipopt</span>(工具名)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;: /usr/bin/env: &quot;</span>bash\\r<span class=\"string\">&quot;: 没有那个文件或目录</span></span><br></pre></td></tr></table></figure>\n\n<p>需要用vim打开sh脚本文件， 重新设置文件的格式</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">：<span class=\"built_in\">set</span> ff 然后回车  再重新设置下文件格式：</span><br><span class=\"line\">：<span class=\"built_in\">set</span> <span class=\"attribute\">ff</span>=unix 然后保存退出</span><br><span class=\"line\">：wq! 回车</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Centos","离线部署"]},{"title":"Nginx配置一键生成","url":"/2020/06/05/%E8%BF%90%E7%BB%B4/Nginx%E9%85%8D%E7%BD%AE%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90/index.html","content":"<p>工具: <a href=\"https://www.digitalocean.com/community/tools/nginx\">Nginx Config</a></p>\n<p>配置很齐全, 但有些配置从来没用过 不知道应该怎么配置…..</p>\n","tags":["Nginx"]},{"title":"docker使用","url":"/2020/09/19/%E8%BF%90%E7%BB%B4/docker%E4%BD%BF%E7%94%A8/index.html","content":"<p>下载镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search 关键词</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull 镜像名</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -itd   --privileged=<span class=\"literal\">true</span> --name myCentos centos /usr/sbin/init</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it myCentos centos /bin/bash <span class=\"comment\"># 不能使用systemctl命令</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 容器 /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<p>容器重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rename 原容器名 新容器名</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"从容器创建一个镜像\"><a href=\"#从容器创建一个镜像\" class=\"headerlink\" title=\"从容器创建一个镜像\"></a>从容器创建一个镜像</h3><p><img src=\"/2020/09/19/%E8%BF%90%E7%BB%B4/docker%E4%BD%BF%E7%94%A8/index/1600510512905.png\" alt=\"img\"></p>\n<h3 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h3><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">导入镜像命令格式：</span><br><span class=\"line\">docker <span class=\"built_in\">load</span> &lt; [<span class=\"built_in\">image</span>.tar_name]</span><br><span class=\"line\">docker <span class=\"built_in\">load</span> --input [<span class=\"built_in\">image</span>.tar_name]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: docker load 不能指定镜像的名称</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">导入镜像文件</span><br><span class=\"line\">docker load &lt; nginx.tar</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">gunzip -c xxx.tar.gz | docker load</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"导出镜像\"><a href=\"#导出镜像\" class=\"headerlink\" title=\"导出镜像\"></a>导出镜像</h3><p>将已经下载好的镜像，导出到本地，以备后用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令格式：</span><br><span class=\"line\">docker save -o [包文件] [镜像]</span><br><span class=\"line\">docker save [镜像1] ... [镜像n] &gt; [包文件]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：docker save 会保存镜像的所有历史记录和元数据信息</p>\n</blockquote>\n<figure class=\"highlight fortran\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">save</span> -o nginx.tar sswang-nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><h4 id=\"docker容器内使用systemctl命令报错\"><a href=\"#docker容器内使用systemctl命令报错\" class=\"headerlink\" title=\"docker容器内使用systemctl命令报错\"></a>docker容器内使用systemctl命令报错</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">System has not been booted with systemd as init system (PID 1). Can<span class=\"string\">&#x27;t operate.</span></span><br><span class=\"line\"><span class=\"string\">Failed to connect to bus: Host is down</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<blockquote>\n<p> 创建容器命令：’ docker run -itd   –privileged&#x3D;true –name myCentos centos &#x2F;usr&#x2F;sbin&#x2F;init ‘  </p>\n<p>docker run -itd -p 80:8000 -p 8081:8081 -p 8888:8888 –privileged&#x3D;true –name django_apps_v2 django_apps:v2 &#x2F;usr&#x2F;sbin&#x2F;init</p>\n</blockquote>\n"},{"title":"rabbitmq","url":"/2020/07/19/%E8%BF%90%E7%BB%B4/rabbitmq/index.html","content":"<h4 id=\"开启管理页面\"><a href=\"#开启管理页面\" class=\"headerlink\" title=\"开启管理页面\"></a>开启管理页面</h4><p>在新版本中，后台管理界面默认关闭，如需开启，使用下面命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># rabbitmq启动成功后,启动后台管理插件</span><br><span class=\"line\">sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装完后会有很多插件，可以使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins list</span><br></pre></td></tr></table></figure>\n\n<p>若远程访问失败，需打开端口</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ubuntu</span></span><br><span class=\"line\">sudo ufw allow 15672</span><br><span class=\"line\"><span class=\"comment\"># centos</span></span><br><span class=\"line\">sudo firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=15672/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在新版本中，因安全策略，guest账号只能在localhost:15672中使用，已不能远程登录，需要创建新的账号</p>\n<h4 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h4><p>创建账号 并赋予权限</p>\n<figure class=\"highlight nsis\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建账号</span></span><br><span class=\"line\">rabbitmqctl add_user <span class=\"literal\">admin</span> <span class=\"literal\">admin</span></span><br><span class=\"line\"><span class=\"comment\"># 设置权限</span></span><br><span class=\"line\">rabbitmqctl set_permissions -p <span class=\"string\">&quot;/&quot;</span> <span class=\"literal\">admin</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置管理员</span></span><br><span class=\"line\">rabbitmqctl set_user_tags <span class=\"literal\">admin</span> administrator</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有用户</span></span><br><span class=\"line\"><span class=\"attribute\">rabbitmqctl</span> list_users</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["rabbitmq"]},{"title":"xx.so文件缺失","url":"/2020/09/19/%E8%BF%90%E7%BB%B4/xx-so%E6%96%87%E4%BB%B6%E7%BC%BA%E5%A4%B1/index.html","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">全局搜索</span><br><span class=\"line\">find / -iname xx.so</span><br><span class=\"line\"></span><br><span class=\"line\">若没有</span><br><span class=\"line\">yum search xx</span><br><span class=\"line\">yum install xx</span><br><span class=\"line\"></span><br><span class=\"line\">创建软连接</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s 源文件 软连接文件名</span><br></pre></td></tr></table></figure>\n\n"},{"title":"mongodb数据库","url":"/2020/10/04/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/index.html","content":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><ul>\n<li>非关系型数据库</li>\n<li>易扩展</li>\n<li>大数据量，高性能</li>\n<li>灵活的数据模型</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure>\n\n"},{"title":"随笔-数据库","url":"/2020/06/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/index.html","content":"<h1 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xvf mysql-5.7.30-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -Uvh *.rpm --nodeps --force</span><br><span class=\"line\"><span class=\"comment\"># 安装完毕</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 先关闭mysql服务</span></span><br><span class=\"line\">service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">### Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">skip-grant-tables     <span class=\"comment\">#添加这句话，这时候登入mysql就不需要密码</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\">#------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启mysql服务</span></span><br><span class=\"line\">service mysqld start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 无需账号密码登陆</span></span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> root@localhost = password(<span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class=\"line\">mysql&gt; flush privileges;  <span class=\"comment\">#更新权限</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> root@localhost = password(<span class=\"string\">&#x27;123456&#x27;</span>); </span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\">mysql&gt;flush privileges; <span class=\"comment\">#更新权限</span></span><br><span class=\"line\">mysql&gt;quit; <span class=\"comment\">#退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">service mysqld stop <span class=\"comment\"># 停止mysql服务, 恢复mysql配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf     <span class=\"comment\">#修改配置文件</span></span><br><span class=\"line\"><span class=\"comment\">#------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"comment\"># skip-grant-tables # 注释掉这句话</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">service mysqld start <span class=\"comment\"># 启动mysql服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -p <span class=\"comment\"># 输入新密码登录</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"开启远程登录\"><a href=\"#开启远程登录\" class=\"headerlink\" title=\"开启远程登录\"></a>开启远程登录</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123123&#x27;</span> <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>by后面的就是远程登录密码，远程登录密码可以和用户密码不一样</li>\n</ul>\n<h4 id=\"设置密码策略\"><a href=\"#设置密码策略\" class=\"headerlink\" title=\"设置密码策略\"></a>设置密码策略</h4><p>查看密码策略</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW <span class=\"keyword\">VARIABLES</span> LIKE <span class=\"comment\">&#x27;validate_password%&#x27;</span>; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">validate_password_length  固定密码的总长度；</span><br><span class=\"line\">validate_password_dictionary_file 指定密码验证的文件路径；</span><br><span class=\"line\">validate_password_mixed_case_count  整个密码中至少要包含大/小写字母的总个数；</span><br><span class=\"line\">validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；</span><br><span class=\"line\">validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM</span><br></pre></td></tr></table></figure>\n\n<p>修改密码策略</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">以validate_password_policy为例</span><br><span class=\"line\"><span class=\"built_in\">set</span> global <span class=\"attribute\">validate_password_policy</span>=LOW;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"将查询结果插入到另一个表\"><a href=\"#将查询结果插入到另一个表\" class=\"headerlink\" title=\"将查询结果插入到另一个表\"></a>将查询结果插入到另一个表</h4><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">一：如果要插入目标表不存在：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">into</span> 目标表 <span class=\"keyword\">from</span> 表 <span class=\"keyword\">where</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\">二：如果要插入目标表已经存在：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 目的表 <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表 <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\"></span><br><span class=\"line\">三：如果是跨数据库操作的话： 怎么把A数据库的atable表所查询的东西，全部插入到B 数据库的btable表中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">into</span> B.btable <span class=\"keyword\">from</span> A.atable <span class=\"keyword\">where</span> ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><p><strong>1209 - The MySQL server is running with the–read-only option so it cannot execute this statement</strong></p>\n<p>一般这个错误有两种原因：</p>\n<ol>\n<li>连到从库了。从库一般设置为只读。</li>\n<li>主库的read_only参数被修改为1</li>\n</ol>\n<p><strong>暂时解决</strong><br>查看mysql配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> @@read_only;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">| @@read_only |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">|          1 |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">修改为0</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global read_only=0;</span><br></pre></td></tr></table></figure>\n\n<p><strong>永久解决</strong></p>\n<p>因为写入数据量太大, 内存溢出导致了mysql的重启<br>配置文件中设置了read_only ，所以重启会导致read_only&#x3D;1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep read_only my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">read_only             = on</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改为 read_only = 0</span><br></pre></td></tr></table></figure>\n\n<p><strong>Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(<code>admin</code>) where user&#x3D;’root’’ at line 1</strong></p>\n<p>MySQL修改密码报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> authentication_string<span class=\"operator\">=</span>password(&quot;newpasswd&quot;) <span class=\"keyword\">where</span> <span class=\"keyword\">user</span><span class=\"operator\">=</span>&quot;root&quot;; </span><br></pre></td></tr></table></figure>\n\n<p>使用下面方法成功</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;root&#x27;</span>; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  将加密方式改为和旧版本兼容 ,安装mysql 8 默认的强加密方式，旧版本的加密方式是’mysql_native_password’, </p>\n</blockquote>\n","tags":["数据库"]},{"title":"随笔-服务器","url":"/2020/06/24/%E8%BF%90%E7%BB%B4/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8E%E7%AB%AF%E5%8F%A3/index.html","content":"<h3 id=\"CentO-S防火墙\"><a href=\"#CentO-S防火墙\" class=\"headerlink\" title=\"CentO S防火墙\"></a>CentO S防火墙</h3><h4 id=\"防火墙开放端口\"><a href=\"#防火墙开放端口\" class=\"headerlink\" title=\"防火墙开放端口\"></a>防火墙开放端口</h4><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=3306/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–zone                           # 作用域</li>\n<li>–add-port&#x3D;80&#x2F;tcp   # 添加端口，格式为：端口&#x2F;通讯协议</li>\n<li>–permanent              # 永久生效，没有此参数重启后失效</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"comment\">--reload</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>即使已经关闭了防火墙, 也需要开放端口操作</strong></p>\n<h3 id=\"Ubuntu防火墙\"><a href=\"#Ubuntu防火墙\" class=\"headerlink\" title=\"Ubuntu防火墙\"></a>Ubuntu防火墙</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看防火墙当前状态</span></span><br><span class=\"line\">sudo ufw status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启防火墙</span></span><br><span class=\"line\">sudo ufw enable</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭防火墙</span></span><br><span class=\"line\">sudo ufw disable</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看防火墙版本</span></span><br><span class=\"line\">sudo ufw version</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认允许外部访问本机</span></span><br><span class=\"line\">sudo ufw default allow</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认拒绝外部访问主机</span></span><br><span class=\"line\">sudo ufw default deny</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许外部访问53端口</span></span><br><span class=\"line\">sudo ufw allow 53</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拒绝外部访问53端口</span></span><br><span class=\"line\">sudo ufw deny 53</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许某个IP地址访问本机所有端口</span></span><br><span class=\"line\">sudo ufw allow from 192.168.0.1</span><br></pre></td></tr></table></figure>\n\n","tags":["服务器"]},{"title":"Django_plotly_Dash","url":"/2020/05/24/Python/Django/Django-plotly-Dash/index.html","content":"<p>render渲染模板时报错:<a href=\"https://stackoverflow.com/questions/61217855/django-django-plotly-dash-exception-value-expected-string-or-bytes-like-objec\">Exception Value: expected string or bytes-like object</a></p>\n<p>When I try to render a plot by Django_Plotly_Dash, I get a TypeError. See below my code snippets and a traceback that I get. I’ve been trying to understand where the problem appears but nothing comes into my mind.</p>\n<p><strong>simpleexample.py</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dash_core_components <span class=\"keyword\">as</span> dcc</span><br><span class=\"line\"><span class=\"keyword\">import</span> dash_html_components <span class=\"keyword\">as</span> html</span><br><span class=\"line\"><span class=\"keyword\">from</span> django_plotly_dash <span class=\"keyword\">import</span> DjangoDash</span><br><span class=\"line\"></span><br><span class=\"line\">external_stylesheets = [<span class=\"string\">&#x27;https://codepen.io/chriddyp/pen/bWLwgP.css&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">app = DjangoDash(<span class=\"string\">&#x27;SimpleExample&#x27;</span>, external_stylesheets=external_stylesheets)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.layout = html.Div([</span><br><span class=\"line\">    html.H1(<span class=\"string\">&#x27;Square Root Slider Graph&#x27;</span>),</span><br><span class=\"line\">    dcc.Graph(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;slider-graph&#x27;</span>, animate=<span class=\"literal\">True</span>, style=&#123;<span class=\"string\">&quot;backgroundColor&quot;</span>: <span class=\"string\">&quot;#1a2d46&quot;</span>, <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;#ffffff&#x27;</span>&#125;),</span><br><span class=\"line\">    dcc.Slider(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"string\">&#x27;slider-updatemode&#x27;</span>,</span><br><span class=\"line\">        marks=&#123;i: <span class=\"string\">&#x27;&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)&#125;,</span><br><span class=\"line\">        <span class=\"built_in\">max</span>=<span class=\"number\">20</span>,</span><br><span class=\"line\">        value=<span class=\"number\">2</span>,</span><br><span class=\"line\">        step=<span class=\"number\">1</span>,</span><br><span class=\"line\">        updatemode=<span class=\"string\">&#x27;drag&#x27;</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n<p><strong>welcome.html</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;%  extends <span class=\"string\">&#x27;base.html&#x27;</span> %&#125;</span><br><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">    &#123;% load plotly_dash %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;block&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% plotly_app name=<span class=\"string\">&#x27;SimpleExample&#x27;</span> ratio=<span class=\"number\">0.45</span> %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views.py</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"><span class=\"keyword\">from</span> home.dash_apps.finished_apps <span class=\"keyword\">import</span> simpleexample</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;&#x27;</span>, views.home, name=<span class=\"string\">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>This is the traceback which I get after placing the content welcome.html in base.html to better identify where the problem lies</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">  Environment:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Request URL: http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">Django Version: <span class=\"number\">3.0</span></span><br><span class=\"line\">Python Version: <span class=\"number\">3.7</span><span class=\"number\">.7</span></span><br><span class=\"line\">Installed Applications:</span><br><span class=\"line\">[<span class=\"string\">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;home.apps.HomeConfig&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django_plotly_dash.apps.DjangoPlotlyDashConfig&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;channels&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;channels_redis&#x27;</span>]</span><br><span class=\"line\">Installed Middleware:</span><br><span class=\"line\">[<span class=\"string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Template error:</span><br><span class=\"line\">In template C:\\Users\\milos\\statisticsofcorona\\templates\\base.html, error at line <span class=\"number\">55</span></span><br><span class=\"line\">   expected string <span class=\"keyword\">or</span> <span class=\"built_in\">bytes</span>-like <span class=\"built_in\">object</span></span><br><span class=\"line\">   <span class=\"number\">45</span> :         &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;container-fluid&quot;</span>&gt;</span><br><span class=\"line\">   <span class=\"number\">46</span> : </span><br><span class=\"line\">   <span class=\"number\">47</span> :           &lt;!-- Page Heading --&gt;</span><br><span class=\"line\">   <span class=\"number\">48</span> :           &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;d-sm-flex align-items-center justify-content-between mb-4&quot;</span>&gt;</span><br><span class=\"line\">   <span class=\"number\">49</span> :             &lt;h1 <span class=\"keyword\">class</span>=<span class=\"string\">&quot;h3 mb-0 text-gray-800&quot;</span>&gt;Dashboard&lt;/h1&gt;</span><br><span class=\"line\">   <span class=\"number\">50</span> :             &lt;a href=<span class=\"string\">&quot;#&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm&quot;</span>&gt;&lt;i <span class=\"keyword\">class</span>=<span class=\"string\">&quot;fas fa-download fa-sm text-white-50&quot;</span>&gt;&lt;/i&gt; Generate Report&lt;/a&gt;</span><br><span class=\"line\">   <span class=\"number\">51</span> :           &lt;/div&gt;</span><br><span class=\"line\">   <span class=\"number\">52</span> :         &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">   <span class=\"number\">53</span> :           &lt;div&gt;</span><br><span class=\"line\">   <span class=\"number\">54</span> :             &#123;% load plotly_dash %&#125;</span><br><span class=\"line\">   <span class=\"number\">55</span> :              &#123;% plotly_app name=<span class=\"string\">&quot;SimpleExample&quot;</span> %&#125; </span><br><span class=\"line\">   <span class=\"number\">56</span> :           &lt;/div&gt;</span><br><span class=\"line\">   <span class=\"number\">57</span> :           &lt;div&gt;</span><br><span class=\"line\">   <span class=\"number\">58</span> :             &#123;&#123; plot1 | safe &#125;&#125;</span><br><span class=\"line\">   <span class=\"number\">59</span> :           &lt;/div&gt;</span><br><span class=\"line\">   <span class=\"number\">60</span> :         &lt;/div&gt;</span><br><span class=\"line\">   <span class=\"number\">61</span> : </span><br><span class=\"line\">   <span class=\"number\">62</span> : </span><br><span class=\"line\">   <span class=\"number\">63</span> :       &lt;/div&gt;</span><br><span class=\"line\">   <span class=\"number\">64</span> :       &lt;!-- End of Main Content --&gt;</span><br><span class=\"line\">   <span class=\"number\">65</span> : </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\core\\handlers\\exception.py&quot;</span>, line <span class=\"number\">34</span>, <span class=\"keyword\">in</span> inner</span><br><span class=\"line\">    response = get_response(request)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\core\\handlers\\base.py&quot;</span>, line <span class=\"number\">115</span>, <span class=\"keyword\">in</span> _get_response</span><br><span class=\"line\">    response = self.process_exception_by_middleware(e, request)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\core\\handlers\\base.py&quot;</span>, line <span class=\"number\">113</span>, <span class=\"keyword\">in</span> _get_response</span><br><span class=\"line\">    response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\home\\views.py&quot;</span>, line <span class=\"number\">29</span>, <span class=\"keyword\">in</span> home</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;base.html&#x27;</span>, context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\shortcuts.py&quot;</span>, line <span class=\"number\">19</span>, <span class=\"keyword\">in</span> render</span><br><span class=\"line\">    content = loader.render_to_string(template_name, context, request, using=using)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\loader.py&quot;</span>, line <span class=\"number\">62</span>, <span class=\"keyword\">in</span> render_to_string</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.render(context, request)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\backends\\django.py&quot;</span>, line <span class=\"number\">61</span>, <span class=\"keyword\">in</span> render</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.template.render(context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\base.py&quot;</span>, line <span class=\"number\">171</span>, <span class=\"keyword\">in</span> render</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._render(context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\base.py&quot;</span>, line <span class=\"number\">163</span>, <span class=\"keyword\">in</span> _render</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.nodelist.render(context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\base.py&quot;</span>, line <span class=\"number\">936</span>, <span class=\"keyword\">in</span> render</span><br><span class=\"line\">    bit = node.render_annotated(context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\base.py&quot;</span>, line <span class=\"number\">903</span>, <span class=\"keyword\">in</span> render_annotated</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.render(context)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django\\template\\library.py&quot;</span>, line <span class=\"number\">214</span>, <span class=\"keyword\">in</span> render</span><br><span class=\"line\">    _<span class=\"built_in\">dict</span> = self.func(*resolved_args, **resolved_kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\templatetags\\plotly_dash.py&quot;</span>, line <span class=\"number\">76</span>, <span class=\"keyword\">in</span> plotly_app</span><br><span class=\"line\">    da, app = _locate_daapp(name, slug, da, cache_id=cache_id)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\templatetags\\plotly_dash.py&quot;</span>, line <span class=\"number\">43</span>, <span class=\"keyword\">in</span> _locate_daapp</span><br><span class=\"line\">    da, app = DashApp.locate_item(name, stateless=<span class=\"literal\">True</span>, cache_id=cache_id)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\models.py&quot;</span>, line <span class=\"number\">200</span>, <span class=\"keyword\">in</span> locate_item</span><br><span class=\"line\">    app = dash_app.as_dash_instance(cache_id=cache_id)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\dash_wrapper.py&quot;</span>, line <span class=\"number\">165</span>, <span class=\"keyword\">in</span> as_dash_instance</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.do_form_dash_instance(cache_id=cache_id)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\dash_wrapper.py&quot;</span>, line <span class=\"number\">201</span>, <span class=\"keyword\">in</span> do_form_dash_instance</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.form_dash_instance(replacements, ndid, base_pathname)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\dash_wrapper.py&quot;</span>, line <span class=\"number\">213</span>, <span class=\"keyword\">in</span> form_dash_instance</span><br><span class=\"line\">    serve_locally=self._serve_locally)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\django_plotly_dash\\dash_wrapper.py&quot;</span>, line <span class=\"number\">312</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    **kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\dash\\dash.py&quot;</span>, line <span class=\"number\">355</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    self.init_app()</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\dash\\dash.py&quot;</span>, line <span class=\"number\">384</span>, <span class=\"keyword\">in</span> init_app</span><br><span class=\"line\"><span class=\"meta\">    @self.server.errorhandler(<span class=\"params\">PreventUpdate</span>)</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\statisticsofcorona\\myvenv\\lib\\site-packages\\dash\\exceptions.py&quot;</span>, line <span class=\"number\">6</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(DashException, self).__init__(dedent(msg).strip())</span><br><span class=\"line\">  File <span class=\"string\">&quot;C:\\Users\\milos\\AppData\\Local\\Programs\\Python\\Python37\\lib\\textwrap.py&quot;</span>, line <span class=\"number\">430</span>, <span class=\"keyword\">in</span> dedent</span><br><span class=\"line\">    text = _whitespace_only_re.sub(<span class=\"string\">&#x27;&#x27;</span>, text)</span><br><span class=\"line\"></span><br><span class=\"line\">Exception <span class=\"type\">Type</span>: TypeError at /</span><br><span class=\"line\">Exception Value: expected string <span class=\"keyword\">or</span> <span class=\"built_in\">bytes</span>-like <span class=\"built_in\">object</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>Django_plotly_dash throws this error when Dash 1.11.0 is installed. Downgrading Dash to 1.10.0 has helped to fix the problem.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install Dash==1.10.0</span><br></pre></td></tr></table></figure>\n\n<p>如果运行后dash的静态文件加载失败,尝试安装1.0.0版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install Dash==1.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>仅供记录,复制于: <a href=\"https://stackoverflow.com/questions/61217855/django-django-plotly-dash-exception-value-expected-string-or-bytes-like-objec\">https://stackoverflow.com/questions/61217855/django-django-plotly-dash-exception-value-expected-string-or-bytes-like-objec</a></p>\n","tags":["python","django"]},{"title":"对FileField操作","url":"/2020/11/18/Python/Django/%E5%AF%B9FileField%E6%93%8D%E4%BD%9C/index.html","content":"<p><code>FieldFile.save(name, content, save=True)</code></p>\n<ul>\n<li><code>name</code>：命名文件名</li>\n<li><code>content</code>:必须是<code>django.core.files.File</code>或<code>django.core.files.base.ContentFile</code>二者之一的一个实例</li>\n<li><code>ContentFile(content, name)</code> </li>\n<li><code>content</code>: 字符串 或 二进制</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ContentFile</span>(<span class=\"title class_ inherited__\">File</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    A File-like object that takes just raw content, rather than an actual file.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, content, name=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        stream_class = StringIO <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(content, <span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> BytesIO</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(stream_class(content), name=name)</span><br><span class=\"line\">        self.size = <span class=\"built_in\">len</span>(content)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoadUser</span>(models.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = models.UUIDField(primary_key=<span class=\"literal\">True</span>, default=uuid.uuid4, editable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    data_file = models.FileField(</span><br><span class=\"line\">        verbose_name=<span class=\"string\">&#x27;负荷数据文件&#x27;</span>, null=<span class=\"literal\">True</span>, blank=<span class=\"literal\">True</span>,</span><br><span class=\"line\">        upload_to=<span class=\"string\">&#x27;load_data_files&#x27;</span>, storage=OverwriteStorage())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义文件存储类\"><a href=\"#自定义文件存储类\" class=\"headerlink\" title=\"自定义文件存储类\"></a>自定义文件存储类</h4><ul>\n<li>文件进行覆盖保存</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OverwriteStorage</span>(<span class=\"title class_ inherited__\">FileSystemStorage</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_available_name</span>(<span class=\"params\">self, name, max_length=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.exists(name):</span><br><span class=\"line\">            os.remove(os.path.join(settings.MEDIA_ROOT, name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从请求中获取文件\"><a href=\"#从请求中获取文件\" class=\"headerlink\" title=\"从请求中获取文件\"></a>从请求中获取文件</h4><ul>\n<li>表单请求<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self, request</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    存储用户负荷数据</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收参数</span></span><br><span class=\"line\">    file = request.FILES.get(<span class=\"string\">&#x27;data_file&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 参数验证</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    load_user, created = LoadUser.objects.update_or_create(defaults=data, tech_group_id=tech_group_id)</span><br><span class=\"line\">    file.name = <span class=\"built_in\">str</span>(load_user.<span class=\"built_in\">id</span>) + <span class=\"string\">&#x27;.xlsx&#x27;</span></span><br><span class=\"line\">    load_user.data_file = file</span><br><span class=\"line\">    load_user.save()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"手动向FileField保存文件\"><a href=\"#手动向FileField保存文件\" class=\"headerlink\" title=\"手动向FileField保存文件\"></a>手动向FileField保存文件</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = ContentFile(previous_instance.data_file.read(), <span class=\"built_in\">str</span>(load_user.<span class=\"built_in\">id</span>) + <span class=\"string\">&#x27;.xlsx&#x27;</span>)</span><br><span class=\"line\">load_user.data_file.save(<span class=\"built_in\">str</span>(load_user.<span class=\"built_in\">id</span>) + <span class=\"string\">&#x27;.xlsx&#x27;</span>, f)</span><br></pre></td></tr></table></figure>\n\n<p><code>FileField.save(name, content)</code></p>\n","tags":["python","django"]},{"title":"自定义django_filter过滤器","url":"/2020/09/03/Python/Django/%E8%87%AA%E5%AE%9A%E4%B9%89django-filter%E8%BF%87%E6%BB%A4%E5%99%A8/index.html","content":"<h2 id=\"自定义django-filter过滤器\"><a href=\"#自定义django-filter过滤器\" class=\"headerlink\" title=\"自定义django_filter过滤器\"></a>自定义django_filter过滤器</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> django_filters</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.project.models <span class=\"keyword\">import</span> Project</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProjectFilter</span>(django_filters.rest_framework.FilterSet):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    自定义过滤类</span></span><br><span class=\"line\"><span class=\"string\">    name是对应model中的字段</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    industry = django_filters.CharFilter(field_name=<span class=\"string\">&#x27;industry&#x27;</span>, lookup_expr=<span class=\"string\">&#x27;icontains&#x27;</span>)</span><br><span class=\"line\">    location = django_filters.CharFilter(field_name=<span class=\"string\">&#x27;location&#x27;</span>, lookup_expr=<span class=\"string\">&#x27;icontains&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        model = Project</span><br><span class=\"line\">        fields = [<span class=\"string\">&#x27;industry&#x27;</span>, <span class=\"string\">&#x27;location&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># field_name（必选）：模型类的属性</span></span><br><span class=\"line\"><span class=\"comment\"># lookup_expr（可选）：判断条件</span></span><br><span class=\"line\"><span class=\"comment\">#     iexact：表示精确匹配, 并且忽略大小写</span></span><br><span class=\"line\"><span class=\"comment\">#     icontains：表示模糊查询（包含），并且忽略大小写</span></span><br><span class=\"line\"><span class=\"comment\">#     exact：表示精确匹配</span></span><br><span class=\"line\"><span class=\"comment\">#     gte：用于规定范围，大于等于</span></span><br><span class=\"line\"><span class=\"comment\">#     lte： 用于范围，小于等于</span></span><br><span class=\"line\"><span class=\"comment\"># method： 自己定义一个方法</span></span><br><span class=\"line\"><span class=\"comment\"># help_text： 帮助说明</span></span><br></pre></td></tr></table></figure>\n\n","tags":["django"]},{"title":"非关系型数据库redis","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/12_%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93redis/index.html","content":"<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/12_%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93redis/index/1559132252584.png\" alt=\"1559132252584.png\"></p>\n<h3 id=\"Nosql\"><a href=\"#Nosql\" class=\"headerlink\" title=\"Nosql\"></a>Nosql</h3><ul>\n<li>not only sql   非关系型数据库</li>\n<li>不支持SQL语法,没有通用的语言,每种nosql数据库都有自己的api和语法</li>\n<li>使用键值对的形式存储数据</li>\n</ul>\n<h4 id=\"NoSQL-与-SQL数据库的比较\"><a href=\"#NoSQL-与-SQL数据库的比较\" class=\"headerlink\" title=\"NoSQL 与 SQL数据库的比较\"></a>NoSQL 与 SQL数据库的比较</h4><ul>\n<li>适用场景不同:SQL数据库适用于关系特别复杂的数据查询场景,nosql反之</li>\n<li>SQL支持事务,nosql基本不支持事务</li>\n<li>两者在补短取长,呈现融合趋势</li>\n</ul>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>特征:</p>\n<ul>\n<li>Redis本质上是Key-Value类型的内存数据库</li>\n<li>支持数据持久化</li>\n<li>提供五种数据结构的存储</li>\n<li>支持数据的备份, master-slave模式</li>\n<li>Redis数据库容量受物理内存的限制,不能用作海量数据的高性能读写</li>\n</ul>\n<p>优势:</p>\n<ul>\n<li>性能极高</li>\n<li>丰富的数据类型</li>\n<li>原子性 操作原子性</li>\n<li>丰富的特征</li>\n</ul>\n<p>安装 与 配置自行查看课件</p>\n<p>服务端 : Redis-server</p>\n<p>ps -aux | grep redis  查看Redis服务器进程</p>\n<p>sudo kill -9 pid(进程号)  杀死Redis服务器</p>\n<p>sudo Redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf  加载指定的配置文件</p>\n<p>客户端 : Redis-cli</p>\n<p>运行测试 : ping</p>\n<p>redis被配置为保存数据库快照时,不能持久化到硬盘,用来修改数据的命令不能使用.  解决方法:强制关闭redis快照,运行config set stop-writes-on-bgsave-error no,关闭该选项</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><ul>\n<li>redis是key-value的数据结构，每条数据都是⼀个键值对</li>\n<li>键的类型是字符串</li>\n<li>注意：键不能重复</li>\n<li>值的类型有五种<ul>\n<li>字符串</li>\n<li>哈希 hash</li>\n<li>列表</li>\n<li>集合</li>\n<li>有序集合</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Redis操作\"><a href=\"#Redis操作\" class=\"headerlink\" title=\"Redis操作\"></a>Redis操作</h4><p>在Ubuntu下面操作:<br>redis的操作是以key - value的形式存储的<br>key为字符串<br>Value: 字符串,hash表,list集合,set集合,zset集合 五种类型</p>\n<p>查找键支持正则表达式</p>\n<p>共有16张表</p>\n<p>换表:  select  表的序号</p>\n<p><strong>指定过期时间 : expire key seconds</strong></p>\n<p>保存键值对并设置有效期: setex key second value <strong>注意参数顺序</strong></p>\n<p>redis 中以<strong>二进制</strong>存储,取用数据时 需转换</p>\n<p><strong>字符串类型</strong>:</p>\n<p>添加&#x2F;修改:</p>\n<ol>\n<li>基本键值对: set key value</li>\n<li>保存键值对并设置有效期: setex key second value</li>\n<li>设置多个键值对: mset key1 value1 key2 value2 ..</li>\n<li>追加值: append key value</li>\n</ol>\n<p>获取值:</p>\n<p>​\t1.获取基本值: get key</p>\n<p>​\t2.获取多个值: mget key1 key2 ..</p>\n<p>查看键:<br>    1.查看所有的键: keys *<br>    2.查看以a开头的键: keys a*<br>    3.看键是否存在: exists key   存在返回1,不存在返回0<br>    4.查看键对应的值的类型: type key1</p>\n<p>删除键值对:<br>    1.删除键: del key1 key2 ..<br>    2.设置键有效期,删除键:expire key seconds<br>    3.查看键的有效期: ttl key</p>\n<p>​\t\t永久的键值 ttl key –&gt;  -1</p>\n<p>​\t\t过期的键值 ttl key –&gt;  -2</p>\n<p><strong>hash类型</strong></p>\n<p>field :属性名       value : 属性值</p>\n<p>增加数据</p>\n<ol>\n<li>增加域的key和值: hset key field value</li>\n<li>设置域的多个属性: hmset key filed1 value1 field2 value2…</li>\n<li>修改属性 : hset user name itheima </li>\n<li>为域中指定字段的整数值加上增量:hincrby key field increment</li>\n<li>为域中指定字段的浮点数值加上增量:hincrbyfloat key field increment</li>\n</ol>\n<p>获取数据:     获得的数据均为  <strong>二进制</strong></p>\n<ol>\n<li>获取域的属性(字段)的值: hget key field</li>\n<li>获取域的多个指定属性的值: hmget key filed1 field2..    列表类型</li>\n<li>获取域的所有属性(字段): hkeys key                列表类型</li>\n<li>获取域的所有属性的值:hvals key                 列表类型</li>\n<li>获取域的所有属性和值: hgetall key            结果为字典类型</li>\n<li>查看域中指定字段是否存在: hexists key field</li>\n<li>获取域中字段数量: hlen key</li>\n</ol>\n<p>删除数据:<br>    1.删除多个属性(字段): hdel key field1 field2…</p>\n<p><strong>list类型</strong>:<br>插入数据:<br>    1.左侧插入数据: lpush key value1 value2 …<br>    2.右侧插入数据: rpush key value1 value2 …<br>    3.指定key,旧元素位置前插入元素: </p>\n<ul>\n<li><p>指定值前插入  不是指定索引插入</p>\n<p>  格式：linsert  key  before  oldvalue  newvalue</p>\n</li>\n</ul>\n<p>​\t4.指定key,旧元素位置后插入元素: </p>\n<p>​\t\t格式：linsert key after oldvalue  newvalue</p>\n<p>获取数据:<br>    1.获取从编号start位置到编号stop位置的元素:<br>    格式：lrange key start stop<br>    (注意点,最后一个元素可以使用-1表示)<br>    2.设置指定索引位置的元素值: lset key index value</p>\n<ul>\n<li>list 里set用法与其他类型不同</li>\n</ul>\n<p>删除数据:<br>     1.将key域列表中,前count次,值为value的元素删除:<br>        格式：　lrem key count value<br>        count:需要删除的个数<br>        value: 需要删除的值<br>        count&gt;0:从头开始数, count&lt;0从尾到头,count&#x3D;0查找所有元素</p>\n<p><strong>set类型</strong><br>特点:无序(顺序)集合, 大小关系有序输出，不能存储重复元素</p>\n<p>​\t无序性 唯一性</p>\n<ul>\n<li><p>对于集合没有修改操作</p>\n</li>\n<li><p>全部具有大小关系,则查询时按大小关系有序输出0-9,a-z</p>\n<p>  否则无序 但输出顺序固定</p>\n</li>\n</ul>\n<p>添加元素   可以向已有值中添加数据</p>\n<p>​\t1.向key域(集合)中添加数据, sadd key member1 member2…)</p>\n<p>获取元素:<br>    2.获取key域集合的所有元素: smembers key</p>\n<p>删除元素:<br>    1.删除指定key元素的值: srem key value</p>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/12_%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93redis/index/549850-20180703071915855-320179407.png\" alt=\"img\"></p>\n<p><strong>Zset类型</strong><br>特点: 有序集合, score为权重值<br>序:自然顺序</p>\n<p>没有修改操作</p>\n<p>增加数据<br>    1.向key域集合中添加多个score1,member1数据<br>    格式: zadd key score1 member1 score2 memever2…</p>\n<p>获取数据:<br>    1.返回指定范围内的member元素:<br>    格式:zrange key start stop<br>    start:为开始索引,包含<br>    stop:为结尾索引,包含, -1表示最后一个元素</p>\n<pre><code>2.获取min和max权值之间(包含)的成员值: \n格式:zrangebyscore key min max\n\nzrange 递增输出  zrevrange 递减输出\nzrange/zrevrange key min max\n</code></pre>\n<p>​\t3.获取key域集合中member的score的权重值:<br>​\t格式:zscore key member</p>\n<p>删除元素:<br>    1.删除域集合中指定的元素值:<br>    格式:zrem key score member…   删除后值的权重不变</p>\n<p>​\tzrem key member1 member2… 删除值的权重之后的权重不变, 将删\t除值的权重之前的权重的值剪切到最后,重新赋予权重,权重顺序递增<br>​\t2.删除集合中权重在指定范围内(min,max)的元素:<br>​\t格式:zremrangebyscore key min max</p>\n<h3 id=\"redis管道的使用\"><a href=\"#redis管道的使用\" class=\"headerlink\" title=\"redis管道的使用\"></a>redis管道的使用</h3><ul>\n<li>设置指令 删除指令        可以使用 管道</li>\n<li>获取指令                         不能使用  管道,因为获取指令需要立即执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pl = redis_conn.pipeline()</span><br><span class=\"line\">sku_data = pl.hgetall(<span class=\"string\">&#x27;carts_%s&#x27;</span>%user.<span class=\"built_in\">id</span>)  </span><br><span class=\"line\"><span class=\"comment\"># sku_data 数据类型 &lt;class &#x27;redis.client.Pipeline&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"与python交互\"><a href=\"#与python交互\" class=\"headerlink\" title=\"与python交互\"></a>与python交互</h3><ul>\n<li>from redis import StrictRedis</li>\n<li>sr &#x3D; StrictRedis(host&#x3D;’localhost’, port&#x3D;6379, db&#x3D;0)</li>\n<li>简写 : sr&#x3D;StrictRedis()</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class=\"line\">        sr=StrictRedis()</span><br><span class=\"line\">        <span class=\"comment\">#添加键name，值为itheima</span></span><br><span class=\"line\">        result=sr.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;itheima&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#输出响应结果，如果添加成功则返回True，否则返回False</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><pre><code class=\"python\">  src=StrictRedisCluster(startup_nodes=startup_nodes,decode_responses=True)\n</code></pre>\n</li>\n</ul>\n<h3 id=\"搭建主从\"><a href=\"#搭建主从\" class=\"headerlink\" title=\"搭建主从\"></a>搭建主从</h3><ul>\n<li><p>通过主从配置实现读写分离</p>\n</li>\n<li><p>一个主master 可以拥有多个从 slave ,⼀个slave⼜可以拥有多个slave</p>\n</li>\n<li><p>master可写可读   slave只能读</p>\n</li>\n<li><p>作用: </p>\n<ul>\n<li>分流,提升服务器的响应能力</li>\n<li>主从分离,从物理上防止数据损坏</li>\n</ul>\n</li>\n<li><p>主从配置   查看课件</p>\n<p>  bind</p>\n<p>  port</p>\n<p>  slaveof</p>\n<p>  开启服务器:主服务器sudo redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</p>\n<p>  ​\t\t\t从服务器sudo redis-server &#x2F;etc&#x2F;redis&#x2F;slave.conf</p>\n<p>  登录 :主 redis-cli -h 192.168.92.129 -p 6379</p>\n<p>  ​\t  从 redis-cli -h 192.168.92.129 -p 6378</p>\n</li>\n</ul>\n<h3 id=\"搭建集群\"><a href=\"#搭建集群\" class=\"headerlink\" title=\"搭建集群\"></a>搭建集群</h3><ul>\n<li>作用: 提高服务器响应的能力</li>\n<li>把多个主从集合在一起,必须三组及以上 即最少六台服务器</li>\n<li>如果集群中有超过一半损坏 那么集群就关闭了</li>\n<li>分类:<ul>\n<li>软件层面   一台电脑开多个服务器</li>\n<li>硬件层面</li>\n</ul>\n</li>\n</ul>\n<p>集群搭建:  参考课件 <a href=\"..%5C%E8%AF%BE%E7%A8%8B%5C16day%5Credis_note_v1.0%5Credis.html\">redis.html</a> </p>\n<ul>\n<li><p>redis集群搭建 <a href=\"http://www.cnblogs.com/wuxl360/p/5920330.html\">http://www.cnblogs.com/wuxl360/p/5920330.html</a></p>\n</li>\n<li><p>[Python]搭建redis集群 <a href=\"http://blog.5ibc.net/p/51020.html\">http://blog.5ibc.net/p/51020.html</a></p>\n</li>\n<li><p>配置文件 最少六个</p>\n</li>\n<li><p>创建集群命令  Ruby环境</p>\n</li>\n<li><p>数据写入地址 根据CRC16算法</p>\n</li>\n</ul>\n","tags":["redis"]},{"title":"Nginx+uwsgi部署实践","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/24_Nginx+uwsgi%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/index.html","content":"<h2 id=\"uwsgi\"><a href=\"#uwsgi\" class=\"headerlink\" title=\"uwsgi\"></a>uwsgi</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n\n<p>settings.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">DEBUG = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">ALLOWED_HOSTS = [<span class=\"string\">&#x27;*&#x27;</span>,]</span><br></pre></td></tr></table></figure>\n<p>wsgi.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">os.environ.setdefault(<span class=\"string\">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class=\"string\">&quot;meiduo_mall.settings.prod&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>uwsgi.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Nginx连接时使用，Django程序所在服务器地址</span></span><br><span class=\"line\"><span class=\"attr\">socket</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8001</span></span><br><span class=\"line\"><span class=\"comment\"># 直接做web服务器使用，Django程序所在服务器地址</span></span><br><span class=\"line\"><span class=\"comment\"># http=172.16.21.25:8001</span></span><br><span class=\"line\"><span class=\"comment\"># 项目目录</span></span><br><span class=\"line\"><span class=\"comment\"># chdir=项目路径/meiduo_project/meiduo_mall</span></span><br><span class=\"line\"><span class=\"attr\">chdir</span>=/Users/meihao/Desktop/project/meiduo_mall</span><br><span class=\"line\"><span class=\"comment\"># 项目中wsgi.py文件的目录，相对于项目目录</span></span><br><span class=\"line\"><span class=\"attr\">wsgi-file</span>=meiduo_mall/wsgi.py</span><br><span class=\"line\"><span class=\"comment\"># 进程数</span></span><br><span class=\"line\"><span class=\"attr\">processes</span>=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 线程数</span></span><br><span class=\"line\"><span class=\"attr\">threads</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># uwsgi服务器的角色</span></span><br><span class=\"line\"><span class=\"attr\">master</span>=<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\"># 存放进程编号的文件</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=uwsgi.pid</span><br><span class=\"line\"><span class=\"comment\"># 日志文件</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span>=uwsgi.log</span><br><span class=\"line\"><span class=\"comment\"># 指定依赖的虚拟环境</span></span><br><span class=\"line\"><span class=\"comment\"># virtualenv=/Users/meihao/.virtualenvs/project</span></span><br><span class=\"line\"><span class=\"attr\">virtualenv</span>=虚拟环境路径/.virtualenvs/meiduo_mall</span><br><span class=\"line\"><span class=\"comment\"># 静态文件</span></span><br><span class=\"line\"><span class=\"attr\">static-map</span> = /static=/静态文件路径</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ uwsgi --ini uwsgi.ini</span><br><span class=\"line\"><span class=\"comment\"># 状态检查</span></span><br><span class=\"line\">$ ps aux | grep uwsgi</span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">$ uwsgi --stop uwsgi.pid</span><br><span class=\"line\">$ pkill -9f uwsgi</span><br><span class=\"line\"></span><br><span class=\"line\">停止启动状态    uwsgi -- stop uwsgi.pid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span>server.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 8000;</span><br><span class=\"line\">        server_name www.meiduo.site;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                include uwsgi_params;  <span class=\"comment\"># 文件uwsgi自带</span></span><br><span class=\"line\">                uwsgi_connect_timeout 30; </span><br><span class=\"line\">                uwsgi_pass 192.168.137.128:8001;  <span class=\"comment\"># 与uwsgi配置一致</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location = /static/ &#123;</span><br><span class=\"line\">                <span class=\"built_in\">alias</span> /home/ubuntu/Desktop/project/meiduo_mall/meiduo_mall/static/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ^~ /test1 &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> 302 http://www.baidu.com;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ubuntu:</span></span><br><span class=\"line\"><span class=\"comment\"># 检查配置文件</span></span><br><span class=\"line\">$ sudo nginx -t</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"><span class=\"comment\"># 状态</span></span><br><span class=\"line\">systemctl status nginx</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mac:</span></span><br><span class=\"line\">$ sudo /usr/local/bin/nginx -t</span><br><span class=\"line\">sudo /usr/local/bin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 日志</span><br><span class=\"line\">/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/nginx/access.<span class=\"built_in\">log</span></span><br><span class=\"line\">/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/nginx/<span class=\"built_in\">error</span>.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /<span class=\"selector-tag\">var</span>/www/<span class=\"selector-tag\">html</span>/   默认<span class=\"selector-tag\">html</span>存储路径</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx-uwsgi-django-websocket\"><a href=\"#Nginx-uwsgi-django-websocket\" class=\"headerlink\" title=\"Nginx + uwsgi + django + websocket\"></a>Nginx + uwsgi + django + websocket</h2><p><a href=\"https://www.cnblogs.com/huguodong/p/6611602.html\">https://www.cnblogs.com/huguodong/p/6611602.html</a><br><a href=\"https://www.cnblogs.com/lph-shares/p/8708786.html\">https://www.cnblogs.com/lph-shares/p/8708786.html</a></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># setting.py</span></span><br><span class=\"line\"><span class=\"attr\">WEBSOCKET_FACTORY_CLASS</span> = <span class=\"string\">&#x27;dwebsocket.backends.uwsgi.factory.uWsgiWebSocketFactory&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># uwsgi.ini</span></span><br><span class=\"line\"><span class=\"comment\"># uwisgi 部署</span></span><br><span class=\"line\">uwsgi --ini uwsgi.ini --http-websockets</span><br></pre></td></tr></table></figure>\n","tags":["uwsgi"]},{"title":"admin站点","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/22_admin%E7%AB%99%E7%82%B9/index.html","content":"<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8000/admin/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-管理界面本地化\"><a href=\"#1-管理界面本地化\" class=\"headerlink\" title=\"1.管理界面本地化\"></a>1.管理界面本地化</h3><p>settings.py文件中设置语言和时区</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">&#x27;zh-hans&#x27;</span> <span class=\"comment\"># 使用中国语言</span></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span> <span class=\"comment\"># 使用中国上海时间</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建超级管理员\"><a href=\"#2-创建超级管理员\" class=\"headerlink\" title=\"2.创建超级管理员\"></a>2.创建超级管理员</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改用户密码</span></span><br><span class=\"line\">python manage.py changepassword 用户名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-App应用配置\"><a href=\"#3-App应用配置\" class=\"headerlink\" title=\"3.App应用配置\"></a>3.App应用配置</h3><p>子应用中apps.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BooktestConfig</span>(<span class=\"title class_ inherited__\">AppConfig</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;booktest&#x27;</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">&#x27;图书管理&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-注册模型类\"><a href=\"#4-注册模型类\" class=\"headerlink\" title=\"4.注册模型类\"></a>4.注册模型类</h3><p>子应用中admin.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.site.register(BookInfo)</span><br><span class=\"line\">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-自定与使用Admin管理类\"><a href=\"#5-自定与使用Admin管理类\" class=\"headerlink\" title=\"5.自定与使用Admin管理类\"></a>5.自定与使用Admin管理类</h3><p>子应用中admin.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.site.site_header = <span class=\"string\">&#x27;传智书城&#x27;</span></span><br><span class=\"line\">admin.site.site_title = <span class=\"string\">&#x27;传智书城MIS&#x27;</span></span><br><span class=\"line\">admin.site.index_title = <span class=\"string\">&#x27;欢迎使用传智书城MIS&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># class HeroInfoStackInline(admin.StackedInline):</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeroInfoTabularInline</span>(admin.TabularInline):</span><br><span class=\"line\">    model = HeroInfo</span><br><span class=\"line\">    extra = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自定义admin展示效果</span></span><br><span class=\"line\"><span class=\"comment\"># @admin.register(BookInfo) # 方法一 装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    list_per_page = <span class=\"number\">3</span></span><br><span class=\"line\">    list_display = [<span class=\"string\">&#x27;id&#x27;</span>,<span class=\"string\">&#x27;btitle&#x27;</span>,<span class=\"string\">&#x27;pub_date&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># fields = [&#x27;btitle&#x27;, &#x27;bpub_date&#x27;]</span></span><br><span class=\"line\">    fieldsets = (</span><br><span class=\"line\">        (<span class=\"string\">&#x27;基本&#x27;</span>,&#123;<span class=\"string\">&#x27;fields&#x27;</span>:[<span class=\"string\">&#x27;btitle&#x27;</span>,<span class=\"string\">&#x27;bpub_date&#x27;</span>,<span class=\"string\">&#x27;image&#x27;</span>]&#125;),</span><br><span class=\"line\">        (<span class=\"string\">&#x27;高级&#x27;</span>,&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;fields&#x27;</span>:[<span class=\"string\">&#x27;bread&#x27;</span>,<span class=\"string\">&#x27;bcomment&#x27;</span>],</span><br><span class=\"line\">            <span class=\"string\">&#x27;classes&#x27;</span>:(<span class=\"string\">&#x27;collapse&#x27;</span>,)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\"># inlines = [HeroInfoStackInline]</span></span><br><span class=\"line\">    inlines = [HeroInfoTabularInline]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.register(<span class=\"params\">HeroInfo</span>)  </span><span class=\"comment\"># 方法一 装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeroInfoAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    list_per_page = <span class=\"number\">5</span></span><br><span class=\"line\">    list_display = [<span class=\"string\">&#x27;id&#x27;</span>,<span class=\"string\">&#x27;hname&#x27;</span>,<span class=\"string\">&#x27;hbook&#x27;</span>,<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">    list_filter = [<span class=\"string\">&#x27;hbook&#x27;</span>]</span><br><span class=\"line\">    search_fields = [<span class=\"string\">&#x27;hname&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(BookInfo,BookInfoAdmin) <span class=\"comment\"># 方法二 注册参数</span></span><br><span class=\"line\"><span class=\"comment\"># admin.site.register(HeroInfo)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用管理类有两种方式</p>\n<ul>\n<li>注册参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.site.register(BookInfo,BookInfoAdmin)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>装饰器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@admin.register(<span class=\"params\">BookInfo</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-调整列表页展示\"><a href=\"#6-调整列表页展示\" class=\"headerlink\" title=\"6.调整列表页展示\"></a>6.调整列表页展示</h3><ol>\n<li><p>list_per_page : 分页展示的page_size</p>\n</li>\n<li><p>list_display &#x3D; [ ] : 列表页展示的字段 , 点击头部可升序或降序排列</p>\n</li>\n<li><p>将方法作为列,添加到列表页展示中 ,方法必须有返回值</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在模型类中添加方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pub_date</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.bpub_date.strftime(<span class=\"string\">&#x27;%Y年%m月%d日&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pub_date.short_description = <span class=\"string\">&#x27;发布日期&#x27;</span>  <span class=\"comment\"># 设置方法字段在admin中显示的标题</span></span><br><span class=\"line\">pub_date.admin_order_field = <span class=\"string\">&#x27;bpub_date&#x27;</span> <span class=\"comment\"># 方法是不能排序的,需要排序时要为方法指定排序依据</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>关联对象 : 使用方法,访问关联对象的属性</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.hbook.bread</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>右侧栏过滤器</li>\n</ol>\n<p> list_filter &#x3D; [&lt;字段名&gt; ]  : 根据字段快速过滤</p>\n<ol start=\"6\">\n<li>搜索框</li>\n</ol>\n<p>search_fields &#x3D; [ ] : 用于搜索的字段</p>\n<h3 id=\"7-调整编辑页展示\"><a href=\"#7-调整编辑页展示\" class=\"headerlink\" title=\"7.调整编辑页展示\"></a>7.调整编辑页展示</h3><ol>\n<li><p>fields &#x3D; [ ] : 添加展示的字段</p>\n</li>\n<li><p>fieldsets &#x3D; ( ) : 分组显示  与fields二选一</p>\n</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">fieldsets</span>=(</span><br><span class=\"line\">    (<span class=\"string\">&#x27;组1标题&#x27;</span>,&#123;<span class=\"string\">&#x27;fields&#x27;</span>:(<span class=\"string\">&#x27;字段1&#x27;</span>,<span class=\"string\">&#x27;字段2&#x27;</span>)&#125;),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;组2标题&#x27;</span>,&#123;<span class=\"string\">&#x27;fields&#x27;</span>:(<span class=\"string\">&#x27;字段3&#x27;</span>,<span class=\"string\">&#x27;字段4&#x27;</span>)&#125;),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>关联对象</li>\n</ol>\n<p>可以在编辑页面编辑关联对象, 嵌入关联对象的方式有 表格 、块 两种：</p>\n<ul>\n<li>类型InlineModelAdmin：表示在模型的编辑页面嵌入关联模型的编辑。</li>\n<li>子类TabularInline：以表格的形式嵌入。</li>\n<li>子类StackedInline：以块的形式嵌入。</li>\n</ul>\n<p>创建编辑关联对象类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeroInfoStackInline</span>(admin.StackedInline):</span><br><span class=\"line\">    model = HeroInfo  <span class=\"comment\"># 要编辑的对象</span></span><br><span class=\"line\">    extra = <span class=\"number\">1</span>  <span class=\"comment\"># 附加编辑的数量 默认为3 预留的用于编辑的空白对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    inlines = [HeroInfoStackInline]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-调整站点信息\"><a href=\"#8-调整站点信息\" class=\"headerlink\" title=\"8.调整站点信息\"></a>8.调整站点信息</h3><ul>\n<li><strong>admin.site.site_header</strong> 设置网站页头</li>\n<li><strong>admin.site.site_title</strong> 设置页面标题</li>\n<li><strong>admin.site.index_title</strong> 设置首页标语</li>\n</ul>\n<h3 id=\"9-上传图片\"><a href=\"#9-上传图片\" class=\"headerlink\" title=\"9.上传图片\"></a>9.上传图片</h3><p>安装图片操作包： pip install Pillow</p>\n<p>settings.py配置:   项目中用于存储照片的文件夹</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">MEDIA_ROOT=os.path.join(BASE_DIR,<span class=\"string\">&quot;static_files/media&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>模型类添加ImageField字段, upload_to指明该字段图片保存在MEDIA_ROOT目录中的哪个子目录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">image = models.ImageField(upload_to=<span class=\"string\">&#x27;booktest&#x27;</span>, verbose_name=<span class=\"string\">&#x27;图片&#x27;</span>, null=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>数据迁移</p>\n"},{"title":"Elasticsearch","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE10-Elasticsearch/index.html","content":"<h3 id=\"一-Elasticsearch\"><a href=\"#一-Elasticsearch\" class=\"headerlink\" title=\"一.Elasticsearch\"></a>一.Elasticsearch</h3><h4 id=\"1-ES简介\"><a href=\"#1-ES简介\" class=\"headerlink\" title=\"1. ES简介\"></a>1. ES简介</h4><ul>\n<li>Django <ul>\n<li>haystack + es</li>\n<li>haystack起到的作用类似于orm 2.x</li>\n</ul>\n</li>\n<li>版本<ul>\n<li>2.x   5.x   6.x</li>\n<li>语法有一定区别, 不兼容</li>\n</ul>\n</li>\n<li>概念<ul>\n<li>既是搜索引擎, 也是数据库<ul>\n<li>主要用于全文检索, 和搜索无关的字段不应该保存在ES中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>支持分布式  分片存储</li>\n<li>虽然是Java开发的, 但是封装了一套http访问接口, 使用restful的设计风格  端口<code>9200</code></li>\n<li>文档型数据库   存字符串, 不是表, 也不是键值对</li>\n<li>最受欢迎的搜索引擎</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-ES搜索原理-重点\"><a href=\"#2-ES搜索原理-重点\" class=\"headerlink\" title=\"2. ES搜索原理 (重点)\"></a>2. ES搜索原理 (重点)</h4><ul>\n<li><p>关系数据库查询的缺点</p>\n<ul>\n<li><p>关键词检索</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 全文检索&quot;python&quot;  范围: 文章标题 和 文章内容</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_article <span class=\"keyword\">where</span> title <span class=\"keyword\">like</span> &quot;%python%&quot; <span class=\"keyword\">or</span> content <span class=\"keyword\">like</span> &quot;%python%&quot; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>即使title和content字段建立了索引, 也不能完美使用索引, 只对”python%”的查询才会使用索引, 慢查询效率极低</p>\n</li>\n</ul>\n</li>\n<li><p>ES搜索的原理</p>\n<ul>\n<li>分析</li>\n<li>建立倒排索引</li>\n<li>相关性排序</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li>提取和优化关键词</li>\n<li>分词 <ul>\n<li>将搜索内容以词条形式拆分</li>\n</ul>\n</li>\n<li>标准化<ul>\n<li>忽略大小写</li>\n<li>忽略单复数</li>\n<li>同义词合并</li>\n</ul>\n</li>\n<li>处理停用词<ul>\n<li>谓词, 语气词, 主语</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>倒排&#x2F;反向索引</p>\n<ul>\n<li>正向索引<ul>\n<li>一条文档为一条记录, 字段为关键词的信息(位置&amp;次数)</li>\n<li>缺点<ul>\n<li>收录到搜索引擎的文档数量是天文数字, 需要查询所有记录, 无法达到实时性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>反向索引   <ul>\n<li>以关键字为一条记录, 文档id为字段</li>\n<li>虽然关键字数量庞大, 但是一旦查询到关键词, 就可以锁定与其有关的所有文档, 效率高于正向索引</li>\n<li>网站SEO时, 要在网页&#x2F;百度录入时设置精准的关键词, 目的就是为快速反向索引</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight tap\"><table><tr><td class=\"code\"><pre><span class=\"line\">文档1  The quick brown fox jumped over the , lazy+ dog</span><br><span class=\"line\">文档2  Quick brown foxes leap over lazy dogs in summer</span><br><span class=\"line\"></span><br><span class=\"line\">id   quick   brown  fox  jump  dog  summer</span><br><span class=\"line\">1     <span class=\"number\"> 1 </span>     <span class=\"number\"> 1 </span>   <span class=\"number\"> 1 </span>   <span class=\"number\"> 1 </span>   </span><br><span class=\"line\">2             <span class=\"number\"> 1 </span>   <span class=\"number\"> 1 </span>        <span class=\"number\"> 1 </span>     1</span><br><span class=\"line\">....</span><br><span class=\"line\">10000000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">关键词     文档1   文档2   ...  文档100000</span><br><span class=\"line\">qucik       1</span><br><span class=\"line\">brown      <span class=\"number\"> 1 </span>     1</span><br><span class=\"line\">fox </span><br><span class=\"line\">dog         1</span><br><span class=\"line\">summer </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>相关性排序</p>\n<ul>\n<li><p>对搜索结果按照权重进行排序</p>\n</li>\n<li><p>算法 TF&#x2F;IDF</p>\n<ul>\n<li>检索词频率   关键词在文章中出现的次数  </li>\n<li>反向文档频率  多个关键词中的某个如果在大量文章中都出现了, 降低其权重</li>\n<li>字段长度准则  关键词占文章总长度的比重 比重越高, 相关性越大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开发搜索引擎</p>\n<ul>\n<li>爬虫</li>\n<li>分布式存储</li>\n<li>分析</li>\n<li>建立倒排索引</li>\n<li>相关性排序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-集群\"><a href=\"#3-集群\" class=\"headerlink\" title=\"3. 集群\"></a>3. 集群</h4><ul>\n<li><p>实现了复制, 并且自动故障转移</p>\n</li>\n<li><p>实现了分片, 提高吞吐量</p>\n</li>\n<li><p>访问ES</p>\n<ul>\n<li>使用POSTMAN</li>\n<li>终端curl命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X http请求方式 url -H 请求头字段 -d 请求体数据</span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/_cluster/health?pretty  <span class=\"comment\"># 设置?pretty可以进行格式化显示</span></span><br><span class=\"line\">curl -X PUT 127.0.0.1:9200/article -H <span class=\"string\">&#x27;Content-Type:application/json&#x27;</span> -d <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看集群状态</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/_cluster/health?pretty</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-中文分词\"><a href=\"#4-中文分词\" class=\"headerlink\" title=\"4. 中文分词\"></a>4. 中文分词</h4><ul>\n<li>默认每个汉字分词</li>\n<li>ES拓展-IK中文分析器</li>\n<li>安装拓展</li>\n<li>测试分析器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/_analyze?pretty -d <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;analyzer&quot;: &quot;standard&quot;,  # ES默认的解析器, 不能对中文分词, 每个汉字对应一个词条</span></span><br><span class=\"line\"><span class=\"string\">  &quot;text&quot;: &quot;我是&amp;中国人&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/_analyze?pretty -d <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,  # IK解析器提供的ik_max_word策略, 力求实现最大的覆盖率, 词条覆盖范围大</span></span><br><span class=\"line\"><span class=\"string\">  &quot;text&quot;: &quot;TypeScript + Vue&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/_analyze?pretty -d <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;analyzer&quot;: &quot;ik_smart&quot;,  # IK解析器提供的ik_smart策略, 力求精确, 词条覆盖范围小</span></span><br><span class=\"line\"><span class=\"string\">  &quot;text&quot;: &quot;我是&amp;中国人&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"5-创建ES库\"><a href=\"#5-创建ES库\" class=\"headerlink\" title=\"5. 创建ES库\"></a>5. 创建ES库</h4><ul>\n<li>查看所有索引库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl 127.0.0.1:9200/_cat/indices</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建索引(数据库)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /my_index</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;settings&quot;</span>: &#123; ... any settings ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建文章索引库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 文章索引</span><br><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">   &quot;settings&quot; : &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;index&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;number_of_shards&quot; : 3,  # 主分片数</span></span><br><span class=\"line\"><span class=\"string\">            &quot;number_of_replicas&quot; : 1  # 从数据库数量</span></span><br><span class=\"line\"><span class=\"string\">           &#125;</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看索引库</span></span><br><span class=\"line\">curl 127.0.0.1:9200/_cat/indices</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除索引库</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">curl</span> -X DELETE <span class=\"number\">127.0.0.1:9200</span>/articles</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"6-类型和映射\"><a href=\"#6-类型和映射\" class=\"headerlink\" title=\"6. 类型和映射\"></a>6. 类型和映射</h4><ul>\n<li><p>概念</p>\n<ul>\n<li>类型, 相当于数据库的表</li>\n<li>设置类型映射, 相当于描述表结构(字段名称, 字段类型)并建表</li>\n</ul>\n</li>\n<li><p>字段的类型</p>\n<ul>\n<li><p>字符串: <code>text</code> (在elaticsearch 2.x版本中，为string类型)</p>\n</li>\n<li><p>整数 : <code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></p>\n</li>\n<li><p>浮点数: <code>float</code>, <code>double</code></p>\n</li>\n<li><p>布尔型: <code>boolean</code></p>\n</li>\n<li><p>日期: <code>date</code></p>\n</li>\n</ul>\n</li>\n<li><p>头条项目的文章类型映射</p>\n<ul>\n<li><code>_mapping</code> 设置类型映射的接口 </li>\n<li>&#x2F;article  类型, 对应一张表</li>\n<li>properties  指定字段名称和类型  <ul>\n<li><code>以查询为目的</code>建立字段</li>\n<li>标题&#x2F;内容 <code>为用户提供</code>查询使用的字段</li>\n<li>文章id&#x2F;作者id&#x2F;文章状态&#x2F;发布时间  主要给<code>后台管理</code>查询使用</li>\n<li>_all字段默认会包含所有字段的关键词, 比如查询关键词时, 不设置查询条件, 既查询标题也查询内容, 则可以使用__all字段查询</li>\n<li>include_in_all则是设置该字段的关键词是否加入到_all字段的关键词中<ul>\n<li>user_id, article_id不加入_all, 这样用户查询时, 可以直接查询__all字段</li>\n<li>后台查询,可以根据需求进行查询</li>\n</ul>\n</li>\n<li>analyzer 分析器设置, 只对字符串类型(text)有效 </li>\n<li>boost 设置相关性排序的权重  整数形式, 尽量控制在10以内</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles/_mapping/article -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">     &quot;_all&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;properties&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;article_id&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;long&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;user_id&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;long&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;title&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;true&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;boost&quot;: 2</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;content&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;status&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;integer&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;create_time&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;date&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查看映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl 127.0.0.1:9200/articles?pretty  <span class=\"comment\"># 查询整个索引库结构</span></span><br><span class=\"line\">curl 127.0.0.1:9200/articles/_mapping/article?pretty  <span class=\"comment\"># 查询article表的结构</span></span><br><span class=\"line\"><span class=\"comment\"># 不设置-X默认为GET</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-修改索引库的类型映射\"><a href=\"#7-修改索引库的类型映射\" class=\"headerlink\" title=\"7. 修改索引库的类型映射\"></a>7. 修改索引库的类型映射</h4><ul>\n<li>可以增加字段</li>\n<li>不能修改已有字段的类型(索引的建立和类型有关)<ul>\n<li>只能建立新的库, 重新进行类型映射</li>\n<li>好处是不需要将数据再导入到新的索引库, 只需要重新索引数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新的索引库 5.x版本分别设置配置和类型映射</span></span><br><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles_v2 -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">   &quot;settings&quot; : &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;index&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;number_of_shards&quot; : 3,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;number_of_replicas&quot; : 1</span></span><br><span class=\"line\"><span class=\"string\">       &#125;</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles_v2/_mapping/article -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">     &quot;_all&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;analyzer&quot;: &quot;ik_max_word&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;properties&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;article_id&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;long&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;user_id&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">               &quot;type&quot;: &quot;long&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;title&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;true&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;boost&quot;: 2</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;content&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;text&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;status&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;byte&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">          &quot;create_time&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">              &quot;type&quot;: &quot;date&quot;,</span></span><br><span class=\"line\"><span class=\"string\">              &quot;include_in_all&quot;: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 重新索引数据</span></span><br><span class=\"line\"><span class=\"string\">curl -X POST 127.0.0.1:9200/_reindex -H &#x27;</span>Content-Type:application/json<span class=\"string\">&#x27; -d &#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;source&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span>: <span class=\"string\">&quot;articles&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;dest&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span>: <span class=\"string\">&quot;articles_v2&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>起别名</p>\n<ul>\n<li>如果修改索引库, 代码中的库名称也要对应修改, 为了避免代码的改动, 可以给新的索引库起别名, 让其使用原库的名称</li>\n<li>注意先删除原库, 避免出现名称冲突</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X DELETE 127.0.0.1:9200/articles  <span class=\"comment\"># 先删除原索引库</span></span><br><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles_v2/_alias/articles  <span class=\"comment\"># 给索引库起别名, 设置为原索引库的名称</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询索引别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看别名指向哪个索引</span></span><br><span class=\"line\">curl 127.0.0.1:9200/*/_alias/articles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看哪些别名指向这个索引</span></span><br><span class=\"line\">curl 127.0.0.1:9200/articles_v2/_alias/*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8-文档数据的增删改查-重点\"><a href=\"#8-文档数据的增删改查-重点\" class=\"headerlink\" title=\"8. 文档数据的增删改查 (重点)\"></a>8. 文档数据的增删改查 (重点)</h4><ul>\n<li><p>文档数据</p>\n<ul>\n<li>json形式的字符串</li>\n<li>除了本身包含的数据, 还会包含一些其他信息<ul>\n<li>_index 所在的索引库</li>\n<li>_type 类型(所在的表)</li>\n<li><code>_id</code>  文档id    <code>一般不会自动生成, 而是让其跟踪基础数据库的主键</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>添加数据</p>\n<ul>\n<li><p>使用自定义的文档id   <code>优先考虑</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X PUT /&#123;index&#125;/&#123;<span class=\"built_in\">type</span>&#125;/&#123;<span class=\"built_in\">id</span>&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动生成文档id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X PUT /&#123;index&#125;/&#123;<span class=\"built_in\">type</span>&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>_version 每修改一次数据, 版本号加1, 可以作为乐观锁的判断标准来使用</p>\n</li>\n</ul>\n</li>\n<li><p>查询数据</p>\n<ul>\n<li>根据文档id, 其他的高级查询在下一节</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取所有的字段数据</span></span><br><span class=\"line\">curl 127.0.0.1:9200/articles/article/150000?pretty</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取一部分字段数据</span></span><br><span class=\"line\">curl 127.0.0.1:9200/articles/article/150000?_source=title,content\\&amp;pretty</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不获取任何字段的数据  使用率最高</span></span><br><span class=\"line\">curl 127.0.0.1:9200/articles/article/150000?_source=false\\&amp;pretty</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断文档是否存在<ul>\n<li>注意需要添加 <code>-i</code> 选项</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -i -X HEAD 127.0.0.1:9200/articles/article/150000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新文档<ul>\n<li>本质是先删除该文档的所有数据, 再更新数据, 所以更新时数据必须全部更新</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles/article/150000 -H <span class=\"string\">&#x27;Content-Type:application/json&#x27;</span> -d <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;article_id&quot;: 150000,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;user_id&quot;: 1,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;title&quot;: &quot;c必须是世界上最好的语言&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;content&quot;: &quot;确实如此&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;status&quot;: 2,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;create_time&quot;: &quot;2019-04-03&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除文档</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X DELETE 127.0.0.1:9200/articles/article/150000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>取出多个文档</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/_mget -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;docs&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;_index&quot;: &quot;articles&quot;,</span><br><span class=\"line\">      &quot;_type&quot;: &quot;article&quot;,</span><br><span class=\"line\">      &quot;_id&quot;: 150000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;_index&quot;: &quot;articles&quot;,</span><br><span class=\"line\">      &quot;_type&quot;: &quot;article&quot;,</span><br><span class=\"line\">      &quot;_id&quot;: 150001</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>总结</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加数据</span></span><br><span class=\"line\">PUT  /数据库/类型/文档id  -d &#123;&#125;   # 使用自定义的文档id   一般文档id为基础数据库的主键</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除数据</span></span><br><span class=\"line\">DELETE /数据库/类型/文档id</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询数据  根据文档<span class=\"built_in\">id</span>查询</span></span><br><span class=\"line\">GET /数据库/类型/文档id?_source=false    不取出任何字段, 但是会返回文档id    字段名 _id</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新数据   不能单独更新一个字段, 必须将该文档的所有都更新(删除原数据, 再覆盖的机制)</span></span><br><span class=\"line\">PUT  /数据库/类型/文档id  -d</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"9-Logstash导入数据\"><a href=\"#9-Logstash导入数据\" class=\"headerlink\" title=\"9. Logstash导入数据\"></a>9. Logstash导入数据</h4><ul>\n<li><p>开发中, 更多的是从现有数据库中导入数据</p>\n</li>\n<li><p>Django中  <code>python manage.py rebuild_index</code> 就是在导入数据</p>\n</li>\n<li><p>方式</p>\n<ul>\n<li>自己写一个程序, 按照之前的语法从数据库中读取数据并添加到es中</li>\n<li>也可以使用Logstash工具导入数据</li>\n</ul>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>从mysql中导入数据</p>\n<ul>\n<li>创建配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">input&#123;</span><br><span class=\"line\">     jdbc &#123;  <span class=\"comment\"># java数据库访问的API接口</span></span><br><span class=\"line\">         jdbc_driver_library =&gt; <span class=\"string\">&quot;/home/python/mysql-connector-java-8.0.13/mysql-connector-java-8.0.13.jar&quot;</span></span><br><span class=\"line\">         jdbc_driver_class =&gt; <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class=\"line\">         jdbc_connection_string =&gt; <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/toutiao?tinyInt1isBit=false&quot;</span></span><br><span class=\"line\">         jdbc_user =&gt; <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\">         jdbc_password =&gt; <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">         jdbc_paging_enabled =&gt; <span class=\"string\">&quot;true&quot;</span>  <span class=\"comment\"># 数据分页, 一共14W数据</span></span><br><span class=\"line\">         jdbc_page_size =&gt; <span class=\"string\">&quot;1000&quot;</span>  <span class=\"comment\"># 每页1000条数据</span></span><br><span class=\"line\">         jdbc_default_timezone =&gt;<span class=\"string\">&quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\">         statement =&gt; <span class=\"string\">&quot;select a.article_id as article_id,a.user_id as user_id, a.title as title, a.status as status, a.create_time as create_time,  b.content as content from news_article_basic as a inner join news_article_content as b on a.article_id=b.article_id&quot;</span>  <span class=\"comment\"># 联表查询, 尽量起别名,否则ES的字段名称会变为a.xx, 这样和mysql的字段名称会出现差异</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output&#123;</span><br><span class=\"line\">      elasticsearch &#123;</span><br><span class=\"line\">         hosts =&gt; <span class=\"string\">&quot;127.0.0.1:9200&quot;</span></span><br><span class=\"line\">         index =&gt; <span class=\"string\">&quot;articles&quot;</span></span><br><span class=\"line\">         document_id =&gt; <span class=\"string\">&quot;%&#123;article_id&#125;&quot;</span>  <span class=\"comment\"># 让文档id记录文章id, 方便进行数据库查询</span></span><br><span class=\"line\">         document_type =&gt; <span class=\"string\">&quot;article&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stdout &#123;  <span class=\"comment\"># 导入过程中以json形式显式的输出导入的内容</span></span><br><span class=\"line\">         codec =&gt; json_lines  </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>增量更新的配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">input&#123;</span><br><span class=\"line\">    record_last_run =&gt; &quot;true&quot;  \t# 记录最后一次运行时的数据点, 默认为最后一次更新的时间</span><br><span class=\"line\">  \tuse_column_value =&gt; &quot;true&quot;  # 不再记录最后一次更新的时间, 而是记录最后一次更新时, 数据库某个字段的值(字段的值要求是递增的)</span><br><span class=\"line\">    tracking_column =&gt; &quot;article_id&quot;  # 设置记录的字段</span><br><span class=\"line\">  last_run_metadata_path =&gt; &quot;/xx/data&quot;    # 数据点的存储位置</span><br><span class=\"line\">    clean_run =&gt; &quot;false&quot;    # 从存储位置开始继续读取, 如果设置为true, 则清除数据点, 从头开始读取</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>解压缩java类库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf mysqlxxx.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行导入命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /usr/share/logstash/bin/logstash -f ./logstash_mysql.conf</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"10-基本查询-重点\"><a href=\"#10-基本查询-重点\" class=\"headerlink\" title=\"10. 基本查询 (重点)\"></a>10. 基本查询 (重点)</h4><ul>\n<li>两种查询方法  <ul>\n<li>查询条件设置在查询字符串中</li>\n<li>查询条件设置在请求体中  GET也可以设置</li>\n</ul>\n</li>\n<li>根据文档ID</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/1  <span class=\"comment\"># 查询文档id=1d的数据</span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/1?_source=title,user_id  <span class=\"comment\"># 查询文档id=1d的数据, 只取出标题和用户id</span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/1?_source=<span class=\"literal\">false</span>   <span class=\"comment\"># 查询文档id=1d的数据,不取出任何基础数据</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查询所有</p>\n<ul>\n<li>默认分页10条</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?_source=title,user_id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分页查询</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?_source=title,user_id\\&amp;size=3  # 每页3条</span><br><span class=\"line\"></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?_source=title,user_id\\&amp;size=3\\&amp;from=10  # 从第10条开始取, 取3条</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>全文检索</p>\n<ul>\n<li>%20表示空格</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章内容匹配 <span class=\"string\">&quot;python web&quot;</span></span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?q=content:python%20web\\&amp;_source=title,article_id\\&amp;pretty  # 查询内容匹配&quot;python web&quot;的数据</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文章标题和内容匹配 <span class=\"string\">&quot;python web&quot;</span></span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?q=title:python%20web,content:python%20web\\&amp;_source=title,article_id\\&amp;pretty</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有字段匹配<span class=\"string\">&quot;python web&quot;</span></span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?q=_all:python%20web\\&amp;_source=title,article_id\\&amp;pretty</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"11-高级查询-重点\"><a href=\"#11-高级查询-重点\" class=\"headerlink\" title=\"11. 高级查询(重点)\"></a>11. 高级查询(重点)</h4><ul>\n<li>全文检索   </li>\n<li>根据分词后的结果进行查询, 按照得分排序</li>\n<li>match</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search -d&#x27;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">          &quot;match&quot; : &#123;  # 表示全文检索</span><br><span class=\"line\">              &quot;title&quot; : &quot;python web&quot;  # 指定检索的字段</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;from&quot;: 0,  # 指定分页</span><br><span class=\"line\">      &quot;size&quot;: 5,</span><br><span class=\"line\">      &quot;_source&quot;: [&quot;article_id&quot;,&quot;title&quot;],  # 指定返回的数据</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">          &quot;match&quot; : &#123;</span><br><span class=\"line\">              &quot;title&quot; : &quot;python web&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">      &quot;from&quot;: 0,</span><br><span class=\"line\">      &quot;size&quot;: 5,</span><br><span class=\"line\">      &quot;_source&quot;: [&quot;article_id&quot;,&quot;title&quot;],</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">          &quot;match&quot; : &#123;</span><br><span class=\"line\">              &quot;_all&quot; : &quot;python web 编程&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>短语查询   </p>\n<ul>\n<li>要求包含所有的词条, 不需要直接相连, 相对位置不能改变</li>\n<li>match_phrase</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X PUT 127.0.0.1:9200/articles/article/150000 -H &#x27;Content-Type:application/json&#x27; -d &#x27;&#123;</span><br><span class=\"line\">  &quot;article_id&quot;: 150000,</span><br><span class=\"line\">  &quot;title&quot;: &quot;python is good&quot;,</span><br><span class=\"line\">  &quot;status&quot;: 2</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">      &quot;from&quot;: 0,</span><br><span class=\"line\">      &quot;size&quot;: 5,</span><br><span class=\"line\">      &quot;_source&quot;: [&quot;article_id&quot;,&quot;title&quot;],</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">          &quot;match_phrase&quot; : &#123;</span><br><span class=\"line\">              &quot;title&quot; : &quot;python good&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>精确查找   </p>\n<ul>\n<li>不会分词, 必须能够匹配到词条(索引库中必须有该词条)</li>\n<li>term</li>\n</ul>\n</li>\n<li><pre><code class=\"shell\">curl -X PUT 127.0.0.1:9200/articles/article/150000 -H &#39;Content-Type:application/json&#39; -d &#39;\n&#123;\n  &quot;article_id&quot;: 150000,\n  &quot;user_id&quot;: 1,\n  &quot;title&quot;: &quot;确实如此&quot;,  # 确实  实如  如此  \n  &quot;content&quot;: &quot;python is good&quot;,\n  &quot;status&quot;: 2,\n  &quot;create_time&quot;: &quot;2019-04-03&quot;\n&#125;&#39;\n\n\ncurl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#39;\n    &#123;\n        &quot;size&quot;: 5,\n        &quot;_source&quot;: [&quot;title&quot;],\n        &quot;query&quot; : &#123;\n            &quot;term&quot; : &#123;\n                &quot;title&quot; : &quot;确实如此&quot; \n                &#125;\n            &#125;\n        &#125;\n    &#125;&#39;\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- 范围查找  range</span><br><span class=\"line\">  - <span class=\"keyword\">gt</span>  greater than  大于</span><br><span class=\"line\">  - <span class=\"keyword\">gte</span> greater than equel  大于等于</span><br><span class=\"line\">  - <span class=\"keyword\">lt</span> 小于</span><br><span class=\"line\">  - <span class=\"keyword\">lte</span> 小于等于</span><br><span class=\"line\">  </span><br><span class=\"line\">- 高亮显示</span><br><span class=\"line\">  - highlight</span><br><span class=\"line\">  - 结果中对指定的字段匹配到的位置进行<span class=\"tag\">&lt;em&gt;</span>标识, 设置了html斜体标签</span><br><span class=\"line\">  </span><br><span class=\"line\">  ```shell</span><br><span class=\"line\">  curl -X GET <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9200</span>/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;_source&quot;</span>: [<span class=\"string\">&quot;article_id&quot;</span>, <span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;user_id&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">                 <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;python web 编程&quot;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         <span class=\"string\">&quot;highlight&quot;</span>:&#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;fields&quot;</span>: &#123;</span><br><span class=\"line\">                  <span class=\"string\">&quot;title&quot;</span>: &#123;&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x27;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>组合查询  bool</p>\n<ul>\n<li><p>进行逻辑运算</p>\n<p>  must  </p>\n<p>  must_not</p>\n<p>  should  or&#x2F;匹配的文档会增加权重</p>\n</li>\n<li><p>filter  直接过滤掉数据, 不进行评分</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">标题匹配<span class=\"string\">&quot;python web&quot;</span> 并且 内容匹配<span class=\"string\">&quot;python c&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;title&quot;, &quot;user_id&quot;],</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">      &quot;bool&quot;: &#123;</span><br><span class=\"line\">          &quot;must&quot;: [&#123;&quot;match&quot;: &#123;&quot;title&quot;: &quot;python web&quot;&#125;&#125;, </span><br><span class=\"line\">                   &#123;&quot;match&quot;: &#123;&quot;content&quot;: &quot;python c&quot;&#125;&#125;]   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">标题匹配<span class=\"string\">&quot;python web&quot;</span> 或者 内容匹配<span class=\"string\">&quot;python c&quot;</span></span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;title&quot;, &quot;user_id&quot;],</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">      &quot;bool&quot;: &#123;</span><br><span class=\"line\">          &quot;should&quot;: [&#123;&quot;match&quot;: &#123;&quot;title&quot;: &quot;python web&quot;&#125;&#125;, &#123;&quot;match&quot;: &#123;&quot;content&quot;: &quot;python c&quot;&#125;&#125;],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">(标题匹配<span class=\"string\">&quot;python web&quot;</span> 并且 内容匹配<span class=\"string\">&quot;python c&quot;</span>) 并且 (状态 匹配2 或者 user_id 匹配1)      -&gt; (A and B) and (C or D)</span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;title&quot;, &quot;user_id&quot;],</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">      &quot;bool&quot;: &#123;</span><br><span class=\"line\">          &quot;filter&quot;: &#123;</span><br><span class=\"line\">              &quot;bool&quot;: &#123;</span><br><span class=\"line\">                &quot;must&quot;: [&#123;&quot;match&quot;: &#123;&quot;title&quot;: &quot;python web&quot;&#125;&#125;, &#123;&quot;match&quot;: &#123;&quot;content&quot;: &quot;python&quot;&#125;&#125;],</span><br><span class=\"line\">                &quot;should&quot;: [</span><br><span class=\"line\">                  &#123;&quot;match&quot;: &#123;&quot;status&quot;: 2&#125;&#125;, &#123;&quot;match&quot;: &#123;&quot;user_id&quot;: 1&#125;&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>filter和query的区别<ul>\n<li>query匹配完会进行排序</li>\n<li>filter只判断是否满足要求, 不进行排序, 而且对于不满足要求的结果会进行缓存</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">要求 status=2 并且 title 匹配 “python web”</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只使用query</span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;title&quot;, &quot;user_id&quot;],</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">      &quot;bool&quot;: &#123;</span><br><span class=\"line\">          &quot;must&quot;: [</span><br><span class=\"line\">              &#123;&quot;term&quot;: </span><br><span class=\"line\">                  &#123;&quot;status&quot;: 2&#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              &#123;&quot;match&quot;: </span><br><span class=\"line\">              \t&#123;&quot;title&quot;: &quot;python web&quot;&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先使用filter过滤, 再使用query排序</span></span><br><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;title&quot;, &quot;user_id&quot;],</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">      &quot;bool&quot;: &#123;</span><br><span class=\"line\">      \t\t&quot;filter&quot;: &#123;</span><br><span class=\"line\">          \t&quot;term&quot;: &#123;&quot;status&quot;: 2&#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &quot;must&quot;: [</span><br><span class=\"line\">              &#123;&quot;match&quot;: </span><br><span class=\"line\">              \t&#123;&quot;title&quot;: &quot;python web&quot;&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>排序</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;size&quot;: 5,</span><br><span class=\"line\">      &quot;_source&quot;: [&quot;article_id&quot;,&quot;title&quot;],</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">          &quot;match&quot; : &#123;</span><br><span class=\"line\">              &quot;_all&quot; : &quot;python web&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;sort&quot;: [</span><br><span class=\"line\">          &#123; &quot;create_time&quot;:  &#123; &quot;order&quot;: &quot;desc&quot; &#125;&#125;,</span><br><span class=\"line\">          &#123; &quot;_score&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125;&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提升权重</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET 127.0.0.1:9200/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &quot;size&quot;: 5,</span><br><span class=\"line\">      &quot;_source&quot;: [&quot;article_id&quot;,&quot;title&quot;],</span><br><span class=\"line\">      &quot;query&quot; : &#123;</span><br><span class=\"line\">      \t\t&quot;must&quot;: [</span><br><span class=\"line\">            &quot;match&quot; : &#123;</span><br><span class=\"line\">                &quot;title&quot; : &#123;</span><br><span class=\"line\">                    &quot;query&quot;: &quot;python web&quot;,</span><br><span class=\"line\">                    &quot;boost&quot;: 4</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;match&quot;: &#123;</span><br><span class=\"line\">            \t\t&quot;content&quot;: &quot;python web&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      \t\t]</span><br><span class=\"line\">          </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"12-python操作ES-重点\"><a href=\"#12-python操作ES-重点\" class=\"headerlink\" title=\"12. python操作ES (重点)\"></a>12. python操作ES (重点)</h4><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install elasticsearch5  # 安装对应版本的模块</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建ES对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> elasticsearch5 <span class=\"keyword\">import</span> Elasticsearch  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># elasticsearch集群服务器的地址</span></span><br><span class=\"line\">ES = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;127.0.0.1:9200&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建elasticsearch客户端</span></span><br><span class=\"line\">es = Elasticsearch(</span><br><span class=\"line\">    ES,</span><br><span class=\"line\">    <span class=\"comment\"># 启动前嗅探es集群服务器</span></span><br><span class=\"line\">    sniff_on_start=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"comment\"># es集群服务器结点连接异常时是否刷新es节点信息</span></span><br><span class=\"line\">    sniff_on_connection_fail=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 每60秒刷新节点信息</span></span><br><span class=\"line\">    sniffer_timeout=<span class=\"number\">60</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">query = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;query&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;bool&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;must&#x27;</span>: [</span><br><span class=\"line\">                &#123;<span class=\"string\">&#x27;match&#x27;</span>: &#123;<span class=\"string\">&#x27;_all&#x27;</span>: <span class=\"string\">&#x27;python web&#x27;</span>&#125;&#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&#x27;filter&#x27;</span>: [</span><br><span class=\"line\">                &#123;<span class=\"string\">&#x27;term&#x27;</span>: &#123;<span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ret = es.search(index=<span class=\"string\">&#x27;articles&#x27;</span>, doc_type=<span class=\"string\">&#x27;article&#x27;</span>, body=query)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查询title和content<span class=\"punctuation\">,</span> 并且要求文章审核通过(status=<span class=\"number\">2</span>)</span><br><span class=\"line\">curl <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"punctuation\">:</span><span class=\"number\">9200</span>/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;_source&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;from&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python xx&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">doc = &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;article_id&#x27;</span>: article.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;user_id&#x27;</span>: article.user_id,</span><br><span class=\"line\">          <span class=\"string\">&#x27;title&#x27;</span>: article.title</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">es.index(index=<span class=\"string\">&#x27;articles&#x27;</span>, doc_type=<span class=\"string\">&#x27;article&#x27;</span>, body=doc, <span class=\"built_in\">id</span>=article.<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE10-Elasticsearch/index/image-20190813175015189.png\" alt=\"image-20190813175015189\"></p>\n<h4 id=\"13-文章搜索接口\"><a href=\"#13-文章搜索接口\" class=\"headerlink\" title=\"13. 文章搜索接口\"></a>13. 文章搜索接口</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 文章搜索接口</span><br><span class=\"line\">/search</span><br><span class=\"line\"># 请求方式 </span><br><span class=\"line\">GET</span><br><span class=\"line\"># 请求参数 </span><br><span class=\"line\">q   查询的内容</span><br><span class=\"line\">page   当前页码</span><br><span class=\"line\">per_page  每页条数</span><br><span class=\"line\"></span><br><span class=\"line\">响应数据 json</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  results<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  page<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  per_page<span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  total_count<span class=\"punctuation\">:</span> <span class=\"number\">1004</span>  # 查询结果的总数量</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询请求</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"punctuation\">:</span><span class=\"number\">9200</span>/articles/article/_search?pretty -d&#x27;</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;from&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;_source&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">\t<span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;_all&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python web&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;term&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"14-发布文章\"><a href=\"#14-发布文章\" class=\"headerlink\" title=\"14. 发布文章\"></a>14. 发布文章</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TODO 将基础数据保存到mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 将文章的数据在ES中建立索引</span></span><br><span class=\"line\">doc = &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;article_id&#x27;</span>: article.<span class=\"built_in\">id</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;user_id&#x27;</span>: article.user_id,</span><br><span class=\"line\">          <span class=\"string\">&#x27;title&#x27;</span>: article.title,</span><br><span class=\"line\">          <span class=\"string\">&#x27;content&#x27;</span>: article.content.content,</span><br><span class=\"line\">          <span class=\"string\">&#x27;status&#x27;</span>: article.status,</span><br><span class=\"line\">          <span class=\"string\">&#x27;create_time&#x27;</span>: article.ctime</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\"># 指定数据库&amp;类型&amp;插入的内容&amp;自定义的文档id</span></span><br><span class=\"line\">current_app.es.index(index=<span class=\"string\">&#x27;articles&#x27;</span>, doc_type=<span class=\"string\">&#x27;article&#x27;</span>, body=doc, <span class=\"built_in\">id</span>=article.<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>","tags":["Elasticsearch"]},{"title":"缓存方案","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index.html","content":"<h1 id=\"项目6\"><a href=\"#项目6\" class=\"headerlink\" title=\"项目6\"></a>项目6</h1><p>[TOC]</p>\n<h3 id=\"一-项目缓存方案\"><a href=\"#一-项目缓存方案\" class=\"headerlink\" title=\"一. 项目缓存方案\"></a>一. 项目缓存方案</h3><h4 id=\"1-1-项目缓存设计-重点\"><a href=\"#1-1-项目缓存设计-重点\" class=\"headerlink\" title=\"1.1 项目缓存设计(重点)\"></a>1.1 项目缓存设计(重点)</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 用户数据</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>profile   string   &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;mobile&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">&#125;</span>&#x27;</span><br><span class=\"line\"># 用户关注列表</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>followings  zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 用户id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 关注时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"># 用户粉丝列表</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>followers  zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 用户id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 被关注时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"># 用户收藏列表</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>collect    zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 文章id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 收藏时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"># 用户发布列表</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>release    zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 文章id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 发布时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"></span><br><span class=\"line\"># 文章数据   记录点赞数量</span><br><span class=\"line\">article<span class=\"punctuation\">:</span>&lt;文章id&gt;<span class=\"punctuation\">:</span>basic   string   &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">&#125;</span>&#x27;</span><br><span class=\"line\"># 文章点赞列表(可选)</span><br><span class=\"line\">article<span class=\"punctuation\">:</span>&lt;文章id&gt;<span class=\"punctuation\">:</span>like   set   <span class=\"punctuation\">[</span>用户id<span class=\"punctuation\">,</span> ..<span class=\"punctuation\">,</span> ..<span class=\"punctuation\">]</span></span><br><span class=\"line\"># 文章的评论列表</span><br><span class=\"line\">article<span class=\"punctuation\">:</span>&lt;文章id&gt;<span class=\"punctuation\">:</span>comments    zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 评论id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 评论时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"></span><br><span class=\"line\"># 评论数据  记录点赞数量</span><br><span class=\"line\">comment<span class=\"punctuation\">:</span>&lt;评论id&gt;   string   &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">&#125;</span>&#x27;</span><br><span class=\"line\"># 评论的回复列表</span><br><span class=\"line\">comment<span class=\"punctuation\">:</span>&lt;评论id&gt;<span class=\"punctuation\">:</span>replys   zset <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 子评论id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 评论时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"></span><br><span class=\"line\"># 公告数据</span><br><span class=\"line\">note<span class=\"punctuation\">:</span>&lt;公告id&gt;  string   &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> xx<span class=\"punctuation\">,</span>content<span class=\"string\">&quot;: xx&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 公告列表</span></span><br><span class=\"line\"><span class=\"string\">note:all  zset  [&#123;value: 公告id, score: 发布时间&#125;, &#123;&#125;, &#123;&#125;] </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 所有频道列表</span></span><br><span class=\"line\"><span class=\"string\">channel:all    string  &#x27;[频道名称, .., ..]&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 用户的频道</span></span><br><span class=\"line\"><span class=\"string\">channel:&lt;用户id&gt;   string  &#x27;[频道名称, .., ..]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"1-2-过期策略\"><a href=\"#1-2-过期策略\" class=\"headerlink\" title=\"1.2 过期策略\"></a>1.2 过期策略</h4><ul>\n<li><p>作用</p>\n<ul>\n<li>节省空间   </li>\n<li>实现数据的弱一致性</li>\n</ul>\n</li>\n<li><p>过期策略</p>\n<ul>\n<li>定时过期<ul>\n<li>效率太低, 每个数据都需要设置定时器进行计数</li>\n</ul>\n</li>\n<li>惰性过期<ul>\n<li>查询时, 才去检查数据的有效期, 如果过期, 则返回nil, 并删除过期数据</li>\n</ul>\n</li>\n<li>定期过期<ul>\n<li>每隔100ms, 随机取出一部分数据进行过期校验, 如果过期, 删除数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>redis的选择</p>\n<ul>\n<li><code>惰性过期+定期过期</code>(每100ms对设置了过期时间的数据随机查询并删除过期数据)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-缓存淘汰-重点\"><a href=\"#1-3-缓存淘汰-重点\" class=\"headerlink\" title=\"1.3 缓存淘汰 (重点)\"></a>1.3 缓存淘汰 (重点)</h4><ul>\n<li><code>LRU</code>  <ul>\n<li>least recently use  优先淘汰不是最近使用的数据</li>\n</ul>\n</li>\n<li><code>LFU</code> <ul>\n<li>least frequently use  优先淘汰不是频繁使用的数据</li>\n<li>采用了<code>定期衰减</code>的机制, 防止旧数据始终无法删除</li>\n<li>缺点<ul>\n<li>需要每条数据维护一个使用计数<ul>\n<li>还需要定期衰减</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>面试问题<ul>\n<li>mysql中有100万数据, 要求redis中保留20万热点数据</li>\n<li>设置redis内存最大存储空间, 并且设置缓存策略为LFU</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>淘汰配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">maxmemory # 最大使用内存数量  如服务器内存10G, 最多给redis分配9G</span><br><span class=\"line\">maxmemory-policy volatile-lru  # 淘汰策略</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-缓存问题-重点\"><a href=\"#1-2-缓存问题-重点\" class=\"headerlink\" title=\"1.2 缓存问题 (重点)\"></a>1.2 缓存问题 (重点)</h4><h5 id=\"1-2-1-缓存更新\"><a href=\"#1-2-1-缓存更新\" class=\"headerlink\" title=\"1.2.1 缓存更新\"></a>1.2.1 缓存更新</h5><ul>\n<li>问题<ul>\n<li>mysql和redis是两个独立的系统, 在并发环境下, 无法保证更新的一致性</li>\n</ul>\n</li>\n<li>解决办法<ul>\n<li>设计分布式锁(redis-setnx)&#x2F;使用消息队列串行处理<ul>\n<li>缺点  并发能力差</li>\n</ul>\n</li>\n<li><code>更新数据时, 先写入mysql, 再删除缓存</code>    facebook<ul>\n<li>主要用于  数据对象  (更新少)</li>\n<li>数据集合主要还是更新缓存  (更新多, 频繁查询成本高)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-2-2-缓存穿透\"><a href=\"#1-2-2-缓存穿透\" class=\"headerlink\" title=\"1.2.2 缓存穿透\"></a>1.2.2 缓存穿透</h5><ul>\n<li>问题<ul>\n<li>黑客会主动访问数据库不存在的数据, 缓存会被穿透, 直接访问数据库, 导致数据库的的访问压力变大</li>\n</ul>\n</li>\n<li>解决办法<ul>\n<li><code>对于数据库中不存在的数据, 也对其在缓存中设置默认值</code>  一般过期时间会比较短</li>\n<li>可以设置一些过滤规则, 如布隆过滤器(算法, 用于判断数据是否包含在集合中), 将所有可能的值录入过滤器, 如果不包含直接返回None, 有误杀概率</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-2-3-缓存雪崩\"><a href=\"#1-2-3-缓存雪崩\" class=\"headerlink\" title=\"1.2.3 缓存雪崩\"></a>1.2.3 缓存雪崩</h5><ul>\n<li><p>问题</p>\n<ul>\n<li>如果大量缓存数据都在同一个时间过期, 那么很可能出现缓存集体失效, 会导致所有的请求都直接访问数据库, 导致数据库压力过大</li>\n</ul>\n</li>\n<li><p>解决办法</p>\n<ul>\n<li><code>设置过期时间时, 添加随机值, 让过期时间进行一定程度分散</code></li>\n<li>多级缓存的方式来处理</li>\n<li>利用锁&#x2F;队列的形式</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-持久化数据设计-重点\"><a href=\"#1-3-持久化数据设计-重点\" class=\"headerlink\" title=\"1.3 持久化数据设计 (重点)\"></a>1.3 持久化数据设计 (重点)</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 用户搜索历史</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>search_history    zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 关键词<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 搜索时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> </span><br><span class=\"line\"># 用户阅读历史</span><br><span class=\"line\">user<span class=\"punctuation\">:</span>&lt;用户id&gt;<span class=\"punctuation\">:</span>read_history    zset  <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 文章id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 阅读时间<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 评论的点赞数量列表  可以根据点赞数量进行排序</span><br><span class=\"line\">comments<span class=\"punctuation\">:</span>all<span class=\"punctuation\">:</span>like_count    zset    <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>value<span class=\"punctuation\">:</span> 评论id<span class=\"punctuation\">,</span> score<span class=\"punctuation\">:</span> 点赞数量<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"># zrevrange 点赞数量从高到低排序     zscore  取评论的点赞数量(分数)   zincrby 增加分数</span><br><span class=\"line\"></span><br><span class=\"line\"># comment<span class=\"punctuation\">:</span>&lt;评论id&gt;<span class=\"punctuation\">:</span>like_count   string  <span class=\"number\">1011</span>   incr/decr</span><br><span class=\"line\"># article<span class=\"punctuation\">:</span>&lt;文章id&gt;<span class=\"punctuation\">:</span>like_count   string  <span class=\"number\">1011</span>   incr/decr</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>阅读历史&#x2F;搜索历史 更新比较频繁</p>\n<ul>\n<li>不在mysql中进行保存, 直接持久化到redis中, 丢失了也不太重要</li>\n</ul>\n</li>\n<li><p>点赞数&#x2F;回复数  更新频繁</p>\n<ul>\n<li>如果保存到mysql中, 就会大量的并发更新操作, 出现阻塞的情况   -&gt; 取消mysql的冗余字段, 直接在redis中进行持久化</li>\n<li>如果保存在redis的数据对象中, 需要经常进行序列化转换, 效率太低, 所以将统计数量从数据对象中提取出来单独存储, 这样也能减少持久化的数据总量</li>\n<li>为了后续排序考虑,  将各类统计数量保存到对应的zset中, 方便排序(点赞数&#x2F;评论数&#x2F;文章数排行)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-4-缓存的模式\"><a href=\"#1-4-缓存的模式\" class=\"headerlink\" title=\"1.4 缓存的模式\"></a>1.4 缓存的模式</h4><ul>\n<li><p>读缓存</p>\n<ul>\n<li><p>先读取缓存中的数据, 没有才会读取数据库中的数据</p>\n</li>\n<li><p>解决数据库读取压力</p>\n</li>\n<li><p>方式</p>\n<ul>\n<li>cache aside  具体读写操作交给应用完成</li>\n<li><code>read through</code> <code>具体读写操作交给缓存层完成</code>, 即使后期修改存储方案, 业务代码不需要修改, 有利于项目的重构和架构升级</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写缓存</p>\n<ul>\n<li>先写入缓存, 再写入数据库</li>\n<li>解决数据库的写入压力</li>\n<li>方式<ul>\n<li>write through 具体写操作交给缓存层完成, 立即更新数据库</li>\n<li>write behind caching  具体读操作交给缓存层完成, 定时异步更新数据库</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>将数据操作保存到消息队列(redis&#x2F;rabbitMQ等)中, celery作为消费者异步执行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二-缓存层实现\"><a href=\"#二-缓存层实现\" class=\"headerlink\" title=\"二. 缓存层实现\"></a>二. 缓存层实现</h3><h4 id=\"2-1-缓存类设计\"><a href=\"#2-1-缓存类设计\" class=\"headerlink\" title=\"2.1 缓存类设计\"></a>2.1 缓存类设计</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807163218623.png\" alt=\"image-20190807163218623\"></p>\n<h4 id=\"2-2-获取缓存-重点\"><a href=\"#2-2-获取缓存-重点\" class=\"headerlink\" title=\"2.2 获取缓存(重点)\"></a>2.2 获取缓存(重点)</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807165545830.png\" alt=\"image-20190807165545830\"></p>\n<h4 id=\"2-3-有效期类的封装\"><a href=\"#2-3-有效期类的封装\" class=\"headerlink\" title=\"2.3 有效期类的封装\"></a>2.3 有效期类的封装</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807172745544.png\" alt=\"image-20190807172745544\"></p>\n<h4 id=\"2-4-异常处理\"><a href=\"#2-4-异常处理\" class=\"headerlink\" title=\"2.4 异常处理\"></a>2.4 异常处理</h4><ul>\n<li>redis查询失败, 继续让mysql进行查询</li>\n<li>mysql查询失败, 抛出异常, 让视图来处理</li>\n<li>redis缓存写入失败, 不做处理</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807174845991.png\" alt=\"image-20190807174845991\"></p>\n<h4 id=\"2-5-清除缓存\"><a href=\"#2-5-清除缓存\" class=\"headerlink\" title=\"2.5 清除缓存\"></a>2.5 清除缓存</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807175132578.png\" alt=\"image-20190807175132578\"></p>\n<h4 id=\"2-6-数据校验和数据查询\"><a href=\"#2-6-数据校验和数据查询\" class=\"headerlink\" title=\"2.6 数据校验和数据查询\"></a>2.6 数据校验和数据查询</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807180858834.png\" alt=\"image-20190807180858834\"></p>\n<h4 id=\"2-7-个人信息接口\"><a href=\"#2-7-个人信息接口\" class=\"headerlink\" title=\"2.7 个人信息接口\"></a>2.7 个人信息接口</h4><ul>\n<li>接口设计</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 个人中心-获取用户信息</span><br><span class=\"line\">/user</span><br><span class=\"line\"># 请求方式  </span><br><span class=\"line\">GET</span><br><span class=\"line\"></span><br><span class=\"line\"># 响应形式 json</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;photo_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;centi&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;art_counts&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;followings_count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fans_count&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li>代码实现</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE6-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/index/image-20190807182443771.png\" alt=\"image-20190807182443771\"></p>\n","tags":["缓存"]},{"title":"即时通讯","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index.html","content":"<h3 id=\"一-即时通讯\"><a href=\"#一-即时通讯\" class=\"headerlink\" title=\"一. 即时通讯\"></a>一. 即时通讯</h3><h4 id=\"1-即时通讯介绍\"><a href=\"#1-即时通讯介绍\" class=\"headerlink\" title=\"1. 即时通讯介绍\"></a>1. 即时通讯介绍</h4><ul>\n<li><p>即时通讯是基于<code>TCP长连接</code>, 建立连接之后, 客户端&#x2F;服务器可以无限次随时向对端发送数据, 实现服务器数据发送的即时性</p>\n</li>\n<li><p>http是短连接, 设计的目的是减少服务器的压力</p>\n</li>\n<li><p>http伪即时通讯</p>\n<ul>\n<li>轮训  emmet</li>\n<li>长轮训  long pulling</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811084830091.png\" alt=\"image-20190811084830091\"></p>\n<ul>\n<li><p>使用场景</p>\n<ul>\n<li>聊天功能</li>\n<li>在线即时推送   如下单后立即推送给商户</li>\n</ul>\n</li>\n<li><p>实现即时通讯</p>\n<ul>\n<li><p>自己搭建服务器</p>\n<ul>\n<li>选择支持的协议  websocket xmpp</li>\n<li>使用一些比较成熟的框架  socketio  xmppframework</li>\n<li>自己封装socket</li>\n</ul>\n</li>\n<li><p>使用成熟的第三方方案</p>\n<ul>\n<li>融云 环信</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-websocket和socketio\"><a href=\"#2-websocket和socketio\" class=\"headerlink\" title=\"2. websocket和socketio\"></a>2. websocket和socketio</h4><ul>\n<li>websocket和http都是基于tcp</li>\n<li>http建立的是短连接, 而websocket建立的是长连接</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190717151126373.png\" alt=\"image-20190717151126373\"></p>\n<ul>\n<li><p>socket.io是基于websocket协议的一套成熟的解决方案</p>\n<ul>\n<li>优点<ul>\n<li>性能好</li>\n<li>支持多平台</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>传输的数据并不完全遵循websocket协议, 这就要求客户端和服务端都必须使用socket.io解决方案</li>\n</ul>\n</li>\n<li>安装 <code>pip install python-socketio</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-搭建socketio服务器-重点\"><a href=\"#3-搭建socketio服务器-重点\" class=\"headerlink\" title=\"3. 搭建socketio服务器 (重点)\"></a>3. 搭建socketio服务器 (重点)</h4><ul>\n<li>搭建支持协程的socket服务器</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install python-socketio</span><br><span class=\"line\">pip install eventlet  # eventlet包提供了协程的支持</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装chrome插件firecamp  用于测试socketio请求</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811093000913.png\" alt=\"image-20190811093000913\"></p>\n<h4 id=\"4-事件处理-重点\"><a href=\"#4-事件处理-重点\" class=\"headerlink\" title=\"4. 事件处理 (重点)\"></a>4. 事件处理 (重点)</h4><ul>\n<li>事件: 类似于http中的路由</li>\n<li>消息: 类似于http中的请求</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811101056944.png\" alt=\"image-20190811101056944\"></p>\n<h4 id=\"5-项目功能-聊天\"><a href=\"#5-项目功能-聊天\" class=\"headerlink\" title=\"5. 项目功能-聊天\"></a>5. 项目功能-聊天</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811102506509.png\" alt=\"image-20190811102506509\"></p>\n<h4 id=\"6-项目功能-消息推送-重点\"><a href=\"#6-项目功能-消息推送-重点\" class=\"headerlink\" title=\"6. 项目功能-消息推送 (重点)\"></a>6. 项目功能-消息推送 (重点)</h4><ul>\n<li>RPC和消息队列的对比<ul>\n<li>如果需要服务端立即返回结果, 最好使用RPC(效率高, 不需要中转)</li>\n<li>如果不需要服务端返回结果, 可以使用消息队列(消费者可以执行异步任务, 减轻同一时间服务器的并发压力)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811164325759.png\" alt=\"image-20190811164325759\"></p>\n<ul>\n<li>将推送消息放入消息队列中</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190719110510834.png\" alt=\"image-20190719110510834\"></p>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190719110552211.png\" alt=\"image-20190719110552211\"></p>\n<ul>\n<li>获取用户身份</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811172316467.png\" alt=\"image-20190811172316467\"></p>\n<ul>\n<li>IM服务器从消息队列中获取数据</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811174353499.png\" alt=\"image-20190811174353499\"></p>\n<ul>\n<li>IM<ul>\n<li>当用户连接IM时, 取出user_id, 并进入其user_id对应的房间</li>\n<li>从消息队列中取出关注通知</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811174538414.png\" alt=\"image-20190811174538414\"></p>\n<ul>\n<li>web服务器<ul>\n<li>将关注通知放入消息队列, 消息发送给作者的user_id对应的房间</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE9-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/index/image-20190811174717532.png\" alt=\"image-20190811174717532\"></p>\n<ul>\n<li><p>细节</p>\n<ul>\n<li>测试  web应用必须使用生产模式,否则消息队列管理器会报错</li>\n</ul>\n</li>\n<li><p>RabbitMQ  <code>amqp://guest:guest@192.168.105.128:5672</code></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">上线收到通知的逻辑</span><br><span class=\"line\">1. 用户一旦连接IM, </span><br><span class=\"line\"><span class=\"meta prompt_\">1&gt; </span><span class=\"language-bash\">需要让user_id和sid建立关系</span></span><br><span class=\"line\"><span class=\"meta prompt_\">2&gt; </span><span class=\"language-bash\">一旦离线就删除关系</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">3&gt; </span><span class=\"language-bash\">关系可以存在redis中</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.web应用</span><br><span class=\"line\"><span class=\"meta prompt_\">1&gt; </span><span class=\"language-bash\">从redis中取user_id对应的sid</span></span><br><span class=\"line\"><span class=\"meta prompt_\">2&gt; </span><span class=\"language-bash\">如果能取出, 说明在线, 直接往消息队列中添加消息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">3&gt; </span><span class=\"language-bash\">如果不能取出, 说明离线, 将消息保存到redis中</span> </span><br><span class=\"line\"></span><br><span class=\"line\">3. im应用</span><br><span class=\"line\"><span class=\"meta prompt_\">1&gt; </span><span class=\"language-bash\">一旦建立连接, 先从redis中查询是否有消息被保存</span></span><br><span class=\"line\"><span class=\"meta prompt_\">2&gt; </span><span class=\"language-bash\">如果有,取出并发给客户端, 取出后从redis中删除数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">3&gt; </span><span class=\"language-bash\">同时还需要从消息队列中实时取出消息数据</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"django中使用websocket\"><a href=\"#django中使用websocket\" class=\"headerlink\" title=\"django中使用websocket\"></a>django中使用websocket</h4><ul>\n<li><strong>dwebsocket</strong><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> dwebsocket</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/weixin_39726347/article/details/88045752\">https://blog.csdn.net/weixin_39726347/article/details/88045752</a></p>\n<ul>\n<li>使用方法1:</li>\n</ul>\n<p>只需views.py文件中,将对应的视图函数添加装饰器</p>\n<ul>\n<li>accept_websocket-—可以接受websocket请求和普通http请求</li>\n<li>require_websocket—-只接受websocket请求,拒绝普通http请求</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dwebsocket.decorators <span class=\"keyword\">import</span> accept_websocket,require_websocket</span><br><span class=\"line\"><span class=\"meta\">@accept_websocket</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_websocket</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.is_websocket():</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>) <span class=\"comment\">## 向前端发送时间</span></span><br><span class=\"line\">            dit = &#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:time.strftime(<span class=\"string\">&#x27;%Y.%m.%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request.websocket.send(json.dumps(dit))</span><br></pre></td></tr></table></figure>\n\n\n<p>使用方法2: </p>\n<ul>\n<li><em>使用中间件</em></li>\n</ul>\n<p>步骤:</p>\n<ol>\n<li>settings.py文件中,添加如下信息</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dwebsocket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为所有的URL提供websocket，如果只是单独的视图需要可以不选</span></span><br><span class=\"line\"></span><br><span class=\"line\">MIDDLEWARE_CLASSES=[<span class=\"string\">&#x27;dwebsocket.middleware.WebSocketMiddleware&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">WEBSOCKET_ACCEPT_ALL=<span class=\"literal\">True</span>  <span class=\"comment\"># 可以允许每一个单独的视图实用websockets</span></span><br></pre></td></tr></table></figure>\n\n<p>官方说明:做了如上配置,仍然会拒绝普通视图的websockets。所以必须在视图上设置’ accept_websocket ’ ‘属性来允许websockets,所以继续做如下配置。</p>\n<ol start=\"2\">\n<li>views.py文件中,相关视图添加装饰器</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dwebsocket.decorators <span class=\"keyword\">import</span> accept_websocket,require_websocket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@accept_websocket</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_websocket</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.is_websocket():</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>) <span class=\"comment\">## 向前端发送时间</span></span><br><span class=\"line\">            dit = &#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:time.strftime(<span class=\"string\">&#x27;%Y.%m.%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request.websocket.send(json.dumps(dit))</span><br></pre></td></tr></table></figure>\n\n<p>看起来跟方法一没什么区别,还多了一步settings配置,但是区别在哪呢???<br>官方是这么说的:These attributes are always available if you use the middleware<br>翻译过来就是,如果使用中间件,有以下这下方法可用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.is_websocket()  <span class=\"comment\">#websocket请求返回True,普通请求返回False</span></span><br><span class=\"line\">request.websocket  <span class=\"comment\"># websocket建立连接后,request将有websocket提供的相关api属性,如果没有建立连接则是None</span></span><br><span class=\"line\">WebSocket.wait()  <span class=\"comment\"># 阻塞接收消息</span></span><br><span class=\"line\">WebSocket.read()  <span class=\"comment\"># 非阻塞接收消息</span></span><br><span class=\"line\">WebSocket.count_messages()  <span class=\"comment\">#返回队列中的消息数量</span></span><br><span class=\"line\">WebSocket.has_messages()  <span class=\"comment\"># 有消息返回True,反之False</span></span><br><span class=\"line\">WebSocket.send(message)  <span class=\"comment\"># 发送消息</span></span><br><span class=\"line\">WebSocket.__iter__()  <span class=\"comment\"># 当迭代器使用</span></span><br></pre></td></tr></table></figure>\n\n<p>官方连接 <a href=\"https://pypi.org/project/dwebsocket/0.4.2/\">https://pypi.org/project/dwebsocket/0.4.2/</a></p>\n<p><strong>前端测试文件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;WebSocketTest()&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">WebSocketTest</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;WebSocket&quot;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;您的浏览器支持 WebSocket!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 打开一个 web socket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;ws://192.168.1.51:8002/wx_app/alert_info/?room_id=0122011657&quot;</span>); </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                ws.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;发送数据&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;数据发送中...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> received_msg = evt.<span class=\"property\">data</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;数据已接收...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;数据:&quot;</span> + received_msg)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ws.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 关闭 websocket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;连接已关闭...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 浏览器不支持 WebSocket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;您的浏览器不支持 WebSocket!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><strong>channel</strong></li>\n</ul>\n","tags":["即时通讯socket"]},{"title":"远程过程调⽤RPC","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index.html","content":"<h3 id=\"一-RPC\"><a href=\"#一-RPC\" class=\"headerlink\" title=\"一. RPC\"></a>一. RPC</h3><h4 id=\"1-1-RPC介绍\"><a href=\"#1-1-RPC介绍\" class=\"headerlink\" title=\"1.1 RPC介绍\"></a>1.1 RPC介绍</h4><ul>\n<li>RPC (远程过程调用) 是一个计算机通信协议</li>\n<li>作用: 可以以<code>函数形式</code>来调用另一台计算机上的程序</li>\n<li>优点: 使用自定义的二进制形式进行数据传输, 效率极高</li>\n<li>应用场景: <code>子系统之间进行数据交互</code></li>\n<li>解决方案<ul>\n<li>google  gRPC</li>\n<li>facebook  thrift</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810085809709.png\" alt=\"image-20190810085809709\"></p>\n<h4 id=\"1-2-gRPC\"><a href=\"#1-2-gRPC\" class=\"headerlink\" title=\"1.2 gRPC\"></a>1.2 gRPC</h4><ul>\n<li><p>google开发的高性能的RPC框架</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>支持多语言和多平台</li>\n<li>使用http2.0标准, 支持双向流和多路复用</li>\n</ul>\n</li>\n<li><p>http2.0</p>\n<ul>\n<li>利用二进制的分帧层对请求头,请求体进行分组分包, 这样就允许在同一个连接可以发送和接收多路(多个请求)的数据</li>\n<li>主要特点<ul>\n<li>二进制分帧层   ——  对传输数据分包分组</li>\n<li>多路复用    ——   同一个连接中发送和接收多个请求的数据</li>\n<li>头部压缩    ——   对于请求头进行压缩处理, 重复内容不再传输</li>\n<li>服务器推送     ——    在服务端对传输内容进行关联, 主动推送关联的传输数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p> <img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190717091725958.png\" alt=\"image-20190717091725958\"></p>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/1561343877905.png\" alt=\"1561343877905\"></p>\n<ul>\n<li><p>使用流程</p>\n<ul>\n<li>根据proto3协议对应的<code>接口定义语言</code>来描述接口需求</li>\n<li>使用gRPC的编译器生成对应平台的客户端和服务端代码</li>\n<li>实现客户端和服务端的具体逻辑</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-gRPC的基本使用-重点\"><a href=\"#1-3-gRPC的基本使用-重点\" class=\"headerlink\" title=\"1.3 gRPC的基本使用 (重点)\"></a>1.3 gRPC的基本使用 (重点)</h4><ul>\n<li>IDL定义接口<ul>\n<li>使用编译器来生成grpc代码</li>\n<li>安装包 <code>pip install grpcio-tools</code></li>\n<li>编译命令  <code>python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. test.proto</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810100722322.png\" alt=\"image-20190810100722322\"></p>\n<ul>\n<li>服务端代码</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810102215844.png\" alt=\"image-20190810102215844\"></p>\n<ul>\n<li>客户端代码</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810104159825.png\" alt=\"image-20190810104159825\"></p>\n<ul>\n<li>IDL接口设计</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810110016656.png\" alt=\"image-20190810110016656\"></p>\n<h3 id=\"二-文章推荐\"><a href=\"#二-文章推荐\" class=\"headerlink\" title=\"二. 文章推荐\"></a>二. 文章推荐</h3><h4 id=\"2-1-接口设计\"><a href=\"#2-1-接口设计\" class=\"headerlink\" title=\"2.1 接口设计\"></a>2.1 接口设计</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 获取文章推荐</span><br><span class=\"line\">/articles</span><br><span class=\"line\"></span><br><span class=\"line\"># 请求方式</span><br><span class=\"line\">GET</span><br><span class=\"line\"></span><br><span class=\"line\"># 请求参数</span><br><span class=\"line\">user_id  用户id(JWT包含)  </span><br><span class=\"line\">channel_id  频道id</span><br><span class=\"line\">article_num 文章数量</span><br><span class=\"line\">time_stamp 时间戳  (用于区分 获取最新数据/历史数据)</span><br><span class=\"line\"></span><br><span class=\"line\"># 响应数据  json</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  articles <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      article_id<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      article_title<span class=\"punctuation\">:</span> <span class=\"string\">&quot;xx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      track<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        click<span class=\"punctuation\">:</span> <span class=\"string\">&quot;user:1:article:22:click&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        read<span class=\"punctuation\">:</span> <span class=\"string\">&quot;user:1:article:22:read&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        collect<span class=\"punctuation\">:</span> <span class=\"string\">&quot;user:1:article:22:collect&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span>文章<span class=\"number\">2</span>的数据<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span>文章<span class=\"number\">3</span>的数据<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  pre_time_stamp<span class=\"punctuation\">:</span> <span class=\"number\">1563294934513</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-埋点过程\"><a href=\"#2-2-埋点过程\" class=\"headerlink\" title=\"2.2 埋点过程\"></a>2.2 埋点过程</h4><p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190717105548805.png\" alt=\"image-20190717105548805\"></p>\n<h4 id=\"2-3-代码实现\"><a href=\"#2-3-代码实现\" class=\"headerlink\" title=\"2.3 代码实现\"></a>2.3 代码实现</h4><p>rpc与web服务器是分离的</p>\n<ul>\n<li>IDL定义接口</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810165257599.png\" alt=\"image-20190810165257599\"></p>\n<ul>\n<li>推荐系统的服务端代码</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190810170654438.png\" alt=\"image-20190810170654438\"></p>\n<ul>\n<li>web应用远程调用推荐系统</li>\n</ul>\n<p><img src=\"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/26_flask%E9%A1%B9%E7%9B%AE8-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E2%BD%A4RPC/index/image-20190717123059510.png\" alt=\"image-20190717123059510\"></p>\n<ul>\n<li>项目中有两个子系统的调用<ul>\n<li>web服务器向推荐系统来获取推荐文章 <ul>\n<li>首页-文章推荐</li>\n<li>详情页-猜你喜欢</li>\n</ul>\n</li>\n<li>im服务器从AI系统获取智能回复</li>\n</ul>\n</li>\n</ul>\n","tags":["RPC"]},{"title":"机器学习","url":"/2024/05/19/Python/%E8%AF%BE%E7%A8%8B/27_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.html","content":"<p><a href=\"%E8%AF%BE%E7%A8%8B/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%B2%E4%B9%89/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%BA%93%EF%BC%89/index.html\">机器学习（科学计算库）</a><br><a href=\"%E8%AF%BE%E7%A8%8B/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%B2%E4%B9%89/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%89/index.html\">机器学习（算法篇）</a> </p>\n<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1.基础\"></a>1.基础</h2><h3 id=\"1-1-人工智能\"><a href=\"#1-1-人工智能\" class=\"headerlink\" title=\"1.1 人工智能\"></a>1.1 人工智能</h3><ol>\n<li>人工智能发展三要素:</li>\n</ol>\n<ul>\n<li>数据</li>\n<li>算法</li>\n<li>计算力</li>\n</ul>\n<ol start=\"2\">\n<li>计算力之CPU、GPU对比：</li>\n</ol>\n<ul>\n<li>CPU主要适合I\\O密集型的任务</li>\n<li>GPU主要适合计算密集型任务</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>提问：什么类型的程序适合在GPU上运行？</strong><br>（1）<strong>计算密集型的程序。</strong><br>所谓计算密集型(Compute-intensive)的程序，就是其大部分运行时间花在了寄存器运算上，寄存器的速度和处理器的速度相当，从寄存器读写数据几乎没有延时。可以做一下对比，读内存的延迟大概是几百个时钟周期；读硬盘的速度就不说了，即便是SSD, 也实在是太慢了。　　<br>（2）<strong>易于并行的程序。</strong><br>GPU其实是一种SIMD(Single Instruction Multiple Data)架构， 他有成百上千个核，每一个核在同一时间最好能做同样的事情。</p>\n</li>\n<li><p>人工智能和机器学习，深度学习的关系</p>\n</li>\n</ol>\n<ul>\n<li>机器学习是人工智能的一个实现途径</li>\n<li>深度学习是机器学习的一个方法发展而来</li>\n</ul>\n<ol start=\"5\">\n<li>人工智能的发展<br>图灵测试      达特茅斯会议</li>\n</ol>\n<p>五个发展历程:</p>\n<ul>\n<li>起步发展期</li>\n<li>反思发展期</li>\n<li>应用发展期</li>\n<li>低迷发展期</li>\n<li>稳步发展期</li>\n</ul>\n<p>![[image-20240619201737173.png]]</p>\n<ol start=\"6\">\n<li>人工智能主要分支</li>\n</ol>\n<ul>\n<li><p>计算机视觉  CV</p>\n<p>  指机器感知环境的能力<br>  图像形成、图像处理、图像提取和图像的三维推理</p>\n</li>\n<li><p>自然语言处理(NLP)</p>\n<ul>\n<li><p>语音识别 : 指识别语音(说出的语言)并将其转换成对应文本的技术<br>  难题: 声纹识别和鸡尾酒会效应</p>\n</li>\n<li><p>文本挖掘&#x2F;分类: 用于理解、组织和分类结构化或非结构化文本文档<br>  句法分析、情绪分析和垃圾信息检测</p>\n</li>\n<li><p>机器翻译: 利用机器的力量自动将一种自然语言(源语言)的文本翻译成另一种语言(目标语言)</p>\n</li>\n</ul>\n</li>\n<li><p>机器人<br>  机器人学(Robotics)研究的是机器人的设计、制造、运作和应用，以及控制它们的计算机系统、传感反馈和信息处理。</p>\n<p>  可以分成两大类:</p>\n<ul>\n<li>固定机器人</li>\n<li>移动机器人</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-机器学习\"><a href=\"#1-2-机器学习\" class=\"headerlink\" title=\"1.2 机器学习\"></a>1.2 机器学习</h3><p>机器学习是从<strong>数据</strong>中<strong>自动分析获得模型</strong>，并利用<strong>模型</strong>对未知数据进行预测。</p>\n<p>机器学习工作流程:</p>\n<ul>\n<li>明确问题并抽象成的数学问题</li>\n<li>获取数据</li>\n<li>数据基本处理</li>\n<li>特征工程<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n</li>\n<li>机器学习(模型训练)与调优</li>\n<li>模型评估</li>\n<li>模型融合</li>\n<li>上线运行</li>\n</ul>\n<p>1.2.1 数据集</p>\n<p>数据简介:</p>\n<ul>\n<li>一行数据我们称为一个<strong>样本</strong></li>\n<li>一列数据我们成为一个<strong>特征</strong></li>\n<li>目标值(标签值)</li>\n</ul>\n<p>数据类型构成:</p>\n<ul>\n<li>数据类型一：特征值+目标值（目标值是连续的和离散的）</li>\n<li>数据类型二：只有特征值，没有目标值</li>\n</ul>\n<p>数据分割:</p>\n<ul>\n<li>机器学习一般的数据集会划分为两个部分：<ul>\n<li>训练数据：用于训练，<strong>构建模型</strong></li>\n<li>测试数据：在模型检验时使用，用于<strong>评估模型是否有效</strong></li>\n</ul>\n</li>\n<li>划分比例：<ul>\n<li>训练集：70% 80% 75%</li>\n<li>测试集：30% 20% 25%</li>\n</ul>\n</li>\n</ul>\n<p>1.2.2 数据基本处理: 缺失值   去除异常值</p>\n<p>1.2.3 特征工程</p>\n<ul>\n<li>使用<strong>专业背景知识和技巧处理数据</strong>，<strong>使得特征能在机器学习算法上发挥更好的作用的过程</strong>。</li>\n<li>直接影响机器学习的效果</li>\n</ul>\n<p>重要性: 数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p>\n<p>特征工程包括:</p>\n<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维<br>  避免维数灾难<br>  作用:<ul>\n<li>使数据集更容易使用</li>\n</ul>\n<ul>\n<li>降低算法的计算开销 </li>\n<li>去除噪声 </li>\n<li>减轻过拟合 </li>\n<li>易于获取有价值的信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-机器学习算法分类\"><a href=\"#1-3-机器学习算法分类\" class=\"headerlink\" title=\"1.3 机器学习算法分类\"></a>1.3 机器学习算法分类</h3><p>根据数据集组成不同,将机器学习算法分为:</p>\n<ul>\n<li><p>监督学习<br>  输入数据是由输入特征值和目标值所组成。</p>\n<ul>\n<li>目标值连续值–回归</li>\n<li>目标值离散值–分类</li>\n</ul>\n</li>\n<li><p>无监督学习<br>  输入数据是由输入特征值组成，没有目标值</p>\n</li>\n<li><p>半监督学习<br>  训练集同时包含有标记样本数据和未标记样本数据。</p>\n</li>\n<li><p>强化学习<br>  实质是make decisions 问题，即自动进行决策，并且可以做连续决策。<br>  在与环境的交互过程中通过学习策略以达成回报最大化或实现特定目标<br>  主要包含五个元素：agent, action, reward, environment, observation；<br>  目标: 学习从环境状态到行为的映射，使得智能体选择的行为能够获得环境最大的奖赏，使得外部环境对学习系统在某种意义下的评价(或整个系统的运行性能)为最佳。</p>\n</li>\n</ul>\n<p>![[1566025392255.png]]</p>\n<p>![[1566025731735.png]]</p>\n<p><strong>独立同分布</strong>(i.i.d.)</p>\n<ul>\n<li><p>在概率统计理论中，<strong>如果变量序列或者其他随机变量有相同的概率分布，并且互相独立，那么这些随机变量是独立同分布。</strong></p>\n<p>  在西瓜书中解释是：<strong>输入空间中的所有样本服从一个隐含未知的分布，训练数据所有样本都是独立地从这个分布上采样而得。</strong></p>\n</li>\n</ul>\n<p>机器学习领域的重要假设:</p>\n<ul>\n<li>IID独立同分布即假设<strong>训练数据和测试数据是满足相同分布的，它是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。</strong></li>\n</ul>\n<p>目前一些机器学习内容已经不再囿于独立同分布假设下，一些问题会假设样本没有同分布。<br>![[image-20240619202533852.png]]</p>\n<h3 id=\"1-4-模型评估\"><a href=\"#1-4-模型评估\" class=\"headerlink\" title=\"1.4 模型评估\"></a>1.4 模型评估</h3><ol>\n<li>分类模型评估</li>\n</ol>\n<ul>\n<li><p>准确率</p>\n</li>\n<li><p>精确率、召回率、F1-score、AUC指标</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>回归模型评估</li>\n</ol>\n<ul>\n<li><p>RMSE  – 均方根误差</p>\n</li>\n<li><p>相对平方误差（Relative Squared Error，RSE）、平均绝对误差（Mean Absolute Error，MAE)、相对绝对误差（Relative Absolute Error，RAE)</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>拟合</li>\n</ol>\n<ul>\n<li><p>欠拟合  under-fitting</p>\n</li>\n<li><p>过拟合  over-fitting</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>评估模型度量指标:</li>\n</ol>\n<p>​    <strong>ROC曲线</strong>（Receiver Operator Characteristic）即受试者工作特征曲线反映的是真阳性占总的实际阳性的比例。将它与在各种阈值设置情况下假阳性占总的实际阴性的比例进行对比。对角连线表示50%预测的准确性，并可作为评价的基准以便后续提高。曲线位于左边高出对角线的部分表示模型的精准度高，当然您也会希望实验的结果曲线出现在此区域。</p>\n<p>​    <strong>准确率和召回率</strong>是衡量信息检索系统性能的重要指标。准确率是指检索到相关文档数占检索到的文档总数的比例，而召回率是指检索到相关文档数占所有相关文档总数的比例。</p>\n<p>​    <strong>lift曲线</strong>是数据挖掘分类器最常用的方式之一，与ROC曲线不同的是lift考虑分类器的准确性，也就是使用分类器获得的正类数量和不使用分类器随机获取正类数量的比例。</p>\n<h3 id=\"1-5-深度学习\"><a href=\"#1-5-深度学习\" class=\"headerlink\" title=\"1.5 深度学习\"></a>1.5 深度学习</h3><h2 id=\"2-机器学习环境安装\"><a href=\"#2-机器学习环境安装\" class=\"headerlink\" title=\"2. 机器学习环境安装\"></a>2. 机器学习环境安装</h2><figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkvirtualenv ai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">matplotlib</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"number\">2.2</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">numpy</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"number\">1.14</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">pandas</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"number\">0.20</span>.<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">tables</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"number\">3.4</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">jupyter</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"number\">1.0</span>.<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>工具: Jupyter Notebook</p>\n<p>打开Jupyter Notebook</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入虚拟环境</span></span><br><span class=\"line\">workon ai</span><br><span class=\"line\"><span class=\"comment\"># 输入命令</span></span><br><span class=\"line\"><span class=\"keyword\">jupyter </span>notebook</span><br></pre></td></tr></table></figure>\n\n<p>安装jupyter_contrib_nbextensions库</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m pip <span class=\"keyword\">install </span><span class=\"keyword\">jupyter_contrib_nbextensions</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"comment\"># 在jupyter关闭状态下执行</span></span><br><span class=\"line\"><span class=\"keyword\">jupyter </span>contrib nbextension <span class=\"keyword\">install </span>--user --skip-running-check</span><br></pre></td></tr></table></figure>\n\n<p>![[image-20240619202605883.png]]</p>\n<h2 id=\"3-Matplotlib\"><a href=\"#3-Matplotlib\" class=\"headerlink\" title=\"3. Matplotlib\"></a>3. Matplotlib</h2><ul>\n<li>画图库, 实现数据可视化</li>\n</ul>\n<p>matplotlib.pyplot模块</p>\n<p>%matplotlib inline 作用</p>\n<p>中文显示问题</p>\n<ul>\n<li><p>方法一:<br>  下载SimHei字体</p>\n<ul>\n<li><p>Windows双击安装</p>\n</li>\n<li><p>Linux <code>sudo cp ~/SimHei.ttf /usr/share/fonts/SimHei.ttf</code></p>\n<p>删除~&#x2F;.matplotlib中的缓存文件</p>\n<p>修改配置文件matplotlibrc</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vi</span> <span class=\"string\">~/.matplotlib/matplotlibrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\"><span class=\"attr\">font.family         :</span> <span class=\"string\">sans-serif</span></span><br><span class=\"line\"><span class=\"attr\">font.sans-serif         :</span> <span class=\"string\">SimHei</span></span><br><span class=\"line\"><span class=\"attr\">axes.unicode_minus  :</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>方法二:</p>\n<p>  在Python脚本中动态设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pylab <span class=\"keyword\">import</span> mpl</span><br><span class=\"line\"><span class=\"comment\"># 设置显示中文字体</span></span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">&quot;font.sans-serif&quot;</span>] = [<span class=\"string\">&quot;SimHei&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 设置正常显示符号</span></span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">&quot;axes.unicode_minus&quot;</span>] = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"1-折线图-plot\"><a href=\"#1-折线图-plot\" class=\"headerlink\" title=\"1. 折线图 plot\"></a>1. 折线图 plot</h3><ul>\n<li><p>**plt.函数名()<strong>相当于面向过程的画图方法，</strong>axes.set_方法名()**相当于面向对象的画图方法。</p>\n</li>\n<li><p>一个坐标系中绘制多个图像</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> pylab <span class=\"keyword\">import</span> mpl</span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置显示中文字体</span></span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">&quot;font.sans-serif&quot;</span>] = [<span class=\"string\">&quot;SimHei&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 设置正常显示符号</span></span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">&quot;axes.unicode_minus&quot;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.准备数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">18</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_beijing = [random.uniform(<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.绘制图像</span></span><br><span class=\"line\">plt.plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\">plt.plot(x, y_beijing, color=<span class=\"string\">&quot;r&quot;</span>, linestyle=<span class=\"string\">&quot;--&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1 添加x,y轴刻度</span></span><br><span class=\"line\"><span class=\"comment\"># 构造x,y轴刻度标签</span></span><br><span class=\"line\">x_ticks_label = [<span class=\"string\">&quot;11点&#123;&#125;分&quot;</span>.<span class=\"built_in\">format</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 刻度显示</span></span><br><span class=\"line\">plt.xticks(x[::<span class=\"number\">5</span>], x_ticks_label[::<span class=\"number\">5</span>])</span><br><span class=\"line\">plt.yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2 添加网格显示</span></span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;--&quot;</span>, alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3 添加描述信息</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;中午11点--12点某城市温度变化图&quot;</span>, fontsize=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4 图像保存</span></span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;./test.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.5 添加图例</span></span><br><span class=\"line\">plt.legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多个坐标系显示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.准备数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">18</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_beijing = [random.uniform(<span class=\"number\">1</span>, <span class=\"number\">5</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\"><span class=\"comment\"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">2</span>, figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\"># Returns:    </span></span><br><span class=\"line\"><span class=\"comment\"># fig : 图对象</span></span><br><span class=\"line\"><span class=\"comment\"># axes : 返回相应数量的坐标系</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.绘制图像</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].plot(x, y_beijing, color=<span class=\"string\">&quot;r&quot;</span>, linestyle=<span class=\"string\">&quot;--&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1 添加x,y轴刻度</span></span><br><span class=\"line\"><span class=\"comment\"># 构造x,y轴刻度标签</span></span><br><span class=\"line\">x_ticks_label = [<span class=\"string\">&quot;11点&#123;&#125;分&quot;</span>.<span class=\"built_in\">format</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 刻度显示</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(x[::5], x_ticks_label[::5])</span></span><br><span class=\"line\"><span class=\"comment\"># plt.yticks(y_ticks[::5])</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticklabels(x_ticks_label[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticklabels(x_ticks_label[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2 添加网格显示</span></span><br><span class=\"line\"><span class=\"comment\"># plt.grid(True, linestyle=&quot;--&quot;, alpha=0.5)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;--&quot;</span>, alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;--&quot;</span>, alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3 添加描述信息</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_title(<span class=\"string\">&quot;中午11点--12点某城市温度变化图&quot;</span>, fontsize=<span class=\"number\">20</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_title(<span class=\"string\">&quot;中午11点--12点某城市温度变化图&quot;</span>, fontsize=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # 2.4 图像保存</span></span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;./test.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # 2.5 添加图例</span></span><br><span class=\"line\"><span class=\"comment\"># plt.legend(loc=0)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"折线图画数学函数图像\"><a href=\"#折线图画数学函数图像\" class=\"headerlink\" title=\"折线图画数学函数图像\"></a>折线图画数学函数图像</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 0.准备数据</span></span><br><span class=\"line\">x = np.linspace(-<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">y = np.sin(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.绘制函数图像</span></span><br><span class=\"line\">plt.plot(x, y)</span><br><span class=\"line\"><span class=\"comment\"># 2.1 添加网格显示</span></span><br><span class=\"line\">plt.grid()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-散点图-scatter\"><a href=\"#2-散点图-scatter\" class=\"headerlink\" title=\"2. 散点图 scatter\"></a>2. 散点图 scatter</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"comment\"># 0.准备数据</span></span><br><span class=\"line\">x = [<span class=\"number\">225.98</span>, <span class=\"number\">247.07</span>, <span class=\"number\">253.14</span>, <span class=\"number\">457.85</span>, <span class=\"number\">241.58</span>, <span class=\"number\">301.01</span>,  <span class=\"number\">20.67</span>, <span class=\"number\">288.64</span>,</span><br><span class=\"line\">       <span class=\"number\">163.56</span>, <span class=\"number\">120.06</span>, <span class=\"number\">207.83</span>, <span class=\"number\">342.75</span>, <span class=\"number\">147.9</span> ,  <span class=\"number\">53.06</span>, <span class=\"number\">224.72</span>,  <span class=\"number\">29.51</span>,</span><br><span class=\"line\">        <span class=\"number\">21.61</span>, <span class=\"number\">483.21</span>, <span class=\"number\">245.25</span>, <span class=\"number\">399.25</span>, <span class=\"number\">343.35</span>]</span><br><span class=\"line\">y = [<span class=\"number\">196.63</span>, <span class=\"number\">203.88</span>, <span class=\"number\">210.75</span>, <span class=\"number\">372.74</span>, <span class=\"number\">202.41</span>, <span class=\"number\">247.61</span>,  <span class=\"number\">24.9</span> , <span class=\"number\">239.34</span>,</span><br><span class=\"line\">       <span class=\"number\">140.32</span>, <span class=\"number\">104.15</span>, <span class=\"number\">176.84</span>, <span class=\"number\">288.23</span>, <span class=\"number\">128.79</span>,  <span class=\"number\">49.64</span>, <span class=\"number\">191.74</span>,  <span class=\"number\">33.1</span> ,</span><br><span class=\"line\">        <span class=\"number\">30.74</span>, <span class=\"number\">400.02</span>, <span class=\"number\">205.35</span>, <span class=\"number\">330.64</span>, <span class=\"number\">283.45</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.绘制散点图</span></span><br><span class=\"line\">plt.scatter(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-柱状图-bar\"><a href=\"#3-柱状图-bar\" class=\"headerlink\" title=\"3. 柱状图 bar\"></a>3. 柱状图 bar</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.准备数据</span></span><br><span class=\"line\"><span class=\"comment\"># 电影名字</span></span><br><span class=\"line\">movie_name = [<span class=\"string\">&#x27;雷神3：诸神黄昏&#x27;</span>,<span class=\"string\">&#x27;正义联盟&#x27;</span>,<span class=\"string\">&#x27;东方快车谋杀案&#x27;</span>,<span class=\"string\">&#x27;寻梦环游记&#x27;</span>,<span class=\"string\">&#x27;全球风暴&#x27;</span>,<span class=\"string\">&#x27;降魔传&#x27;</span>,<span class=\"string\">&#x27;追捕&#x27;</span>,<span class=\"string\">&#x27;七十七天&#x27;</span>,<span class=\"string\">&#x27;密战&#x27;</span>,<span class=\"string\">&#x27;狂兽&#x27;</span>,<span class=\"string\">&#x27;其它&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 横坐标</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(movie_name))</span><br><span class=\"line\"><span class=\"comment\"># 票房数据</span></span><br><span class=\"line\">y = [<span class=\"number\">73853</span>,<span class=\"number\">57767</span>,<span class=\"number\">22354</span>,<span class=\"number\">15969</span>,<span class=\"number\">14839</span>,<span class=\"number\">8725</span>,<span class=\"number\">8716</span>,<span class=\"number\">8318</span>,<span class=\"number\">7916</span>,<span class=\"number\">6764</span>,<span class=\"number\">52222</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.绘制柱状图</span></span><br><span class=\"line\">plt.bar(x, y, width=<span class=\"number\">0.5</span>, color=[<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;y&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;y&#x27;</span>,<span class=\"string\">&#x27;k&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1b修改x轴的刻度显示</span></span><br><span class=\"line\">plt.xticks(x, movie_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2 添加网格显示</span></span><br><span class=\"line\">plt.grid(linestyle=<span class=\"string\">&quot;--&quot;</span>, alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3 添加标题</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;电影票房收入对比&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-直方图-hist\"><a href=\"#4-直方图-hist\" class=\"headerlink\" title=\"4. 直方图 hist\"></a>4. 直方图 hist</h3><h3 id=\"5-饼图-pie\"><a href=\"#5-饼图-pie\" class=\"headerlink\" title=\"5. 饼图 pie\"></a>5. 饼图 pie</h3><h2 id=\"4-Numpy\"><a href=\"#4-Numpy\" class=\"headerlink\" title=\"4. Numpy\"></a>4. Numpy</h2><ul>\n<li>科学计算库, <strong>用于快速处理任意维度的数组和矩阵</strong></li>\n<li>比Python原生list运算效率高百倍,</li>\n</ul>\n<p>特点:</p>\n<ul>\n<li>ndarray中所有元素的类型都是相同的, 内存地址直接存储数据,list存储数据地址</li>\n<li>支持并行化运算(向量化运算)</li>\n<li>效率高, 使用C编写,解除了GIL(全局解释器锁)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">a = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100000000</span>):</span><br><span class=\"line\">    a.append(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">b=np.array(a)</span><br><span class=\"line\"><span class=\"comment\"># 通过%time魔法方法, 查看当前行的代码运行一次所花费的时间</span></span><br><span class=\"line\">%time sum2=np.<span class=\"built_in\">sum</span>(b)</span><br></pre></td></tr></table></figure>\n\n<p><strong>ndarray属性</strong><br>![[image-20240619202705962.png]]</p>\n<p><strong>ndarray类型</strong><br>![[image-20240619202729501.png]]</p>\n<p>array与asarray区别</p>\n<ul>\n<li>array相当于深拷贝</li>\n<li>asarray相当于浅拷贝</li>\n</ul>\n<p>生成固定范围的数组</p>\n<ul>\n<li>np.linspace (start, stop, num, endpoint)<ul>\n<li>创建等差数组 — 指定数量</li>\n<li>参数:<ul>\n<li>start:序列的起始值</li>\n<li>stop:序列的终止值</li>\n<li>num:要生成的等间隔样例数量，默认为50</li>\n<li>endpoint:序列中是否包含stop值，默认为ture</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>np.arange(start,stop, step, dtype)<ul>\n<li>创建等差数组 — 指定步长</li>\n<li>参数<ul>\n<li>step:步长,默认值为1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>np.logspace(start,stop, num)<ul>\n<li>创建等比数列</li>\n<li>参数:<ul>\n<li>num:要生成的等比数列数量，默认为50</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"正态分布\"><a href=\"#正态分布\" class=\"headerlink\" title=\"正态分布\"></a>正态分布</h3>","tags":["机器学习"]},{"title":"机器学习算法基础","url":"/2024/06/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/index.html","content":"<h1 id=\"算法模型通用\"><a href=\"#算法模型通用\" class=\"headerlink\" title=\"算法模型通用\"></a>算法模型通用</h1><h2 id=\"交叉验证与网格搜索\"><a href=\"#交叉验证与网格搜索\" class=\"headerlink\" title=\"交叉验证与网格搜索\"></a>交叉验证与网格搜索</h2><h3 id=\"交叉验证\"><a href=\"#交叉验证\" class=\"headerlink\" title=\"交叉验证\"></a>交叉验证</h3><p><strong>让模型准确率更加准确可信，不能提高模型准确率</strong><br>将训练数据分为训练集和验证集，将训练数据等分为几等份 就是 几折交叉验证，进行几次模型验证；<br>模型的准确度 为 模型多次验证的准确度的<strong>平均值</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717590034104-2c1b73c1-a022-4cc9-a2d6-90e563ea74ec.png#averageHue=%23ebedeb&clientId=u2ae43044-40c7-4&from=paste&height=413&id=z8lzW&originHeight=413&originWidth=628&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121904&status=done&style=none&taskId=u390feca2-ba07-4679-bba4-866014e6aca&title=&width=628\" alt=\"image.png\"></p>\n<h3 id=\"网格搜索（Grid-Search）\"><a href=\"#网格搜索（Grid-Search）\" class=\"headerlink\" title=\"网格搜索（Grid Search）\"></a>网格搜索（Grid Search）</h3><p><strong>超参数</strong> ：在算法运行之前手动设置的参数<br>网格搜索就是对超参的值的寻优<br>算法运行次数 &#x3D; 超参可能值数量 * 交叉验证次数<br><code>sklearn.model_selection.GridSearchCV(estimator, param_grid-None, cv=None)</code></p>\n<ul>\n<li>对估计器的指定参数值进行详尽搜索</li>\n<li>estimator：估计器对象</li>\n<li>param_grid：估计器参数（dict）{“n_neighbors”: [1,3,5]}</li>\n<li>cv：指定几折交叉验证</li>\n<li>fit：输入训练数据</li>\n<li>score：准确率</li>\n<li>结果分析：<ul>\n<li>bestscore_ ：在交叉验证中验证的最好结果</li>\n<li>bestestimator：最好的参数模型</li>\n<li>cvresults：每次交叉验证后的验证集准确率结果和训练集准确率结果<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets, model_selection, preprocessing, neighbors</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取数据集</span></span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\"><span class=\"comment\"># 数据预处理</span></span><br><span class=\"line\">x_train, x_test, y_train, y_test = model_selection.train_test_split(iris.data, iris.target, test_size=<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 特征工程--标准化</span></span><br><span class=\"line\">transfer = preprocessing.StandardScaler()</span><br><span class=\"line\">x_train_stand = transfer.fit_transform(x_train)</span><br><span class=\"line\">x_test_stand = transfer.fit_transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 机器学习</span></span><br><span class=\"line\">estimator = neighbors.KNeighborsClassifier(n_neighbors=<span class=\"number\">1</span>)</span><br><span class=\"line\">model = model_selection.GridSearchCV(estimator, param_grid=&#123;<span class=\"string\">&quot;n_neighbors&quot;</span>:[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>, <span class=\"number\">9</span>]&#125;, cv=<span class=\"number\">10</span>)</span><br><span class=\"line\">model.fit(x_train_stand, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型评估</span></span><br><span class=\"line\">model.score(x_test_stand, y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最好的模型：&quot;</span>, model.best_estimator_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最好的结果：&quot;</span>, model.best_score_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体模型结果：&quot;</span>, model.cv_results_)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"案例：Facebook-位置预测\"><a href=\"#案例：Facebook-位置预测\" class=\"headerlink\" title=\"案例：Facebook 位置预测\"></a>案例：Facebook 位置预测</h3><p>数据集 <a href=\"https://tianchi.aliyun.com/dataset/106510\">facebook位置预测数据集_数据集-阿里云天池</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> model_selection, preprocessing, neighbors</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.获取数据</span></span><br><span class=\"line\">data = pd.read_csv(<span class=\"string\">&#x27;./Facebook/train.csv&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.数据预处理</span></span><br><span class=\"line\"><span class=\"comment\"># 2.1.缩小数据范围</span></span><br><span class=\"line\">data = data.query(<span class=\"string\">&quot;x&gt;2.0 &amp; x&lt;2.5 &amp; y&gt;2.0 &amp; y&lt;2.5&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2.时间特征处理</span></span><br><span class=\"line\">time = pd.to_datetime(data[<span class=\"string\">&#x27;time&#x27;</span>], unit=<span class=\"string\">&#x27;s&#x27;</span>)</span><br><span class=\"line\">data[<span class=\"string\">&#x27;day&#x27;</span>] = time.dt.day</span><br><span class=\"line\">data[<span class=\"string\">&#x27;hour&#x27;</span>] = time.dt.hour</span><br><span class=\"line\">data[<span class=\"string\">&#x27;weekday&#x27;</span>] = time.dt.weekday</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3.去掉签到数量少的地方</span></span><br><span class=\"line\"><span class=\"comment\"># place_count = data.groupby(by=[&#x27;place_id&#x27;])[&#x27;place_id&#x27;].count()</span></span><br><span class=\"line\"></span><br><span class=\"line\">place_count = data[<span class=\"string\">&#x27;place_id&#x27;</span>].value_counts()</span><br><span class=\"line\">place_count = place_count[place_count &gt; <span class=\"number\">3</span>]</span><br><span class=\"line\">data = data.loc[data[<span class=\"string\">&#x27;place_id&#x27;</span>].isin(place_count.index), :]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4.确定特征值和目标值</span></span><br><span class=\"line\">x = data[[<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;y&#x27;</span>,<span class=\"string\">&#x27;accuracy&#x27;</span>,<span class=\"string\">&#x27;day&#x27;</span>,<span class=\"string\">&#x27;hour&#x27;</span>,<span class=\"string\">&#x27;weekday&#x27;</span>]]</span><br><span class=\"line\">y = data[<span class=\"string\">&#x27;place_id&#x27;</span>].to_list()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.5.分割数据</span></span><br><span class=\"line\">x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.特征处理</span></span><br><span class=\"line\"><span class=\"comment\"># 3.1.标准化</span></span><br><span class=\"line\"><span class=\"comment\"># 实例化转换器</span></span><br><span class=\"line\">transformer = preprocessing.StandardScaler()</span><br><span class=\"line\">x_train = transformer.fit_transform(x_train)</span><br><span class=\"line\">x_test = transformer.fit_transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.机器学习</span></span><br><span class=\"line\">_estimator = neighbors.KNeighborsClassifier()</span><br><span class=\"line\">estimator = model_selection.GridSearchCV(_estimator, param_grid=&#123;<span class=\"string\">&#x27;n_neighbors&#x27;</span>:[<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]&#125;,cv=<span class=\"number\">9</span>)</span><br><span class=\"line\">estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.模型评估</span></span><br><span class=\"line\">estimator.score(x_test, y_test)</span><br><span class=\"line\"><span class=\"comment\"># 评价指标</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最好的模型：&quot;</span>, estimator.best_estimator_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最好的结果：&quot;</span>, estimator.best_score_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体模型结果：&quot;</span>, estimator.cv_results_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;超参值：&quot;</span>, estimator.best_params_)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模型保存和加载\"><a href=\"#模型保存和加载\" class=\"headerlink\" title=\"模型保存和加载\"></a>模型保存和加载</h2><p><code>from sklearn.externals import joblib</code></p>\n<ul>\n<li>保存：<code>joblib.dump(estimator, &#39;test.pkl&#39;)</code></li>\n<li>加载：<code>estimator = joblib.load(&#39;test.pkl&#39;)</code></li>\n</ul>\n<h2 id=\"分类评估方法\"><a href=\"#分类评估方法\" class=\"headerlink\" title=\"分类评估方法\"></a>分类评估方法</h2><h3 id=\"精确率与召回率\"><a href=\"#精确率与召回率\" class=\"headerlink\" title=\"精确率与召回率\"></a>精确率与召回率</h3><h4 id=\"混淆矩阵\"><a href=\"#混淆矩阵\" class=\"headerlink\" title=\"混淆矩阵\"></a>混淆矩阵</h4><p>在分类任务下，预测结果与正确标记之间存在四种不同的组合，构成混淆矩阵<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719123835020-43e5bc0c-86f8-41b4-83f8-bcb5e332eb57.png#averageHue=%23e8e8e8&clientId=u5b53ae38-aefd-4&from=paste&height=320&id=dBPHv&originHeight=320&originWidth=576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45819&status=done&style=none&taskId=u9c3456c3-ff6c-4eec-868a-9d380c561de&title=&width=576\" alt=\"image.png\"></p>\n<h4 id=\"准确率\"><a href=\"#准确率\" class=\"headerlink\" title=\"准确率\"></a>准确率</h4><p>总样本中预测结果正确的比例<br>（TP + TN）&#x2F;（TP + FP + FN + TN）</p>\n<h4 id=\"精确率（Precision）–查的准不准\"><a href=\"#精确率（Precision）–查的准不准\" class=\"headerlink\" title=\"精确率（Precision）–查的准不准\"></a>精确率（Precision）–查的准不准</h4><p>预测结果为正例样本中 真实为正例的比例<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719123883705-cb6ba826-ab8f-4010-9ed9-bd84f47b3e89.png#averageHue=%23eae7e6&clientId=u5b53ae38-aefd-4&from=paste&height=233&id=S8DOX&originHeight=233&originWidth=461&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56784&status=done&style=none&taskId=uac49d0ec-5119-44ef-b346-8d477dce3ab&title=&width=461\" alt=\"image.png\"></p>\n<h4 id=\"召回率（Recall）–查的全不全\"><a href=\"#召回率（Recall）–查的全不全\" class=\"headerlink\" title=\"召回率（Recall）–查的全不全\"></a>召回率（Recall）–查的全不全</h4><p>真实为正例的样本中预测结果为正例的比例<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719123987760-5e9260f7-934a-4336-8ff5-9d80d27a1891.png#averageHue=%23e8e4e2&clientId=u5b53ae38-aefd-4&from=paste&height=274&id=fYzXL&originHeight=274&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83798&status=done&style=none&taskId=ubece3a24-1da2-470e-93e2-0257cb9c28e&title=&width=526\" alt=\"image.png\"></p>\n<h4 id=\"F1-score\"><a href=\"#F1-score\" class=\"headerlink\" title=\"F1-score\"></a>F1-score</h4><p>反映模型的稳健性<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719124395690-4b05227e-1e08-4e59-ab25-8e1056b2441c.png#averageHue=%23f6f6f6&clientId=u5b53ae38-aefd-4&from=paste&height=96&id=GaHJg&originHeight=96&originWidth=550&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33156&status=done&style=none&taskId=u7e41b691-2ada-462f-b23c-a69fb079757&title=&width=550\" alt=\"image.png\"><br>F1 越接近 1，模型稳健性越好</p>\n<h4 id=\"分类评估报告-api\"><a href=\"#分类评估报告-api\" class=\"headerlink\" title=\"分类评估报告 api\"></a>分类评估报告 api</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.metrics.classification_report(y_true, y_pred, labels=[], target_names=<span class=\"literal\">None</span>)</span><br><span class=\"line\">- y_true:真实目标值</span><br><span class=\"line\">- y_pred:预测目标值</span><br><span class=\"line\">- labels:指定类别对应的数字</span><br><span class=\"line\">- target_names: 目标类别名称</span><br><span class=\"line\">- <span class=\"keyword\">return</span>: 每个类别的精确率与召回率</span><br></pre></td></tr></table></figure>\n<h3 id=\"ROC-曲线与-AUC-指标\"><a href=\"#ROC-曲线与-AUC-指标\" class=\"headerlink\" title=\"ROC 曲线与 AUC 指标\"></a>ROC 曲线与 AUC 指标</h3><p>AUC 只能用来评价二分类<br>AUC 非常适合评价样本不平衡的分类器性能</p>\n<h4 id=\"TPR-与-FPR\"><a href=\"#TPR-与-FPR\" class=\"headerlink\" title=\"TPR 与 FPR\"></a>TPR 与 FPR</h4><ul>\n<li>TPR &#x3D; TP &#x2F; (TP + FN)<ul>\n<li>所有真实类别为1的样本中，预测类别为1的比例</li>\n</ul>\n</li>\n<li>FPR &#x3D; FP &#x2F; (FP + TN)<ul>\n<li>所有真实类别为0的样本中，预测类别为1的比例</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ROC-曲线\"><a href=\"#ROC-曲线\" class=\"headerlink\" title=\"ROC 曲线\"></a>ROC 曲线</h4><ol>\n<li>定义：ROC曲线是一种图形工具，用于展示分类模型在不同阈值下的真阳性率（True Positive Rate, TPR）与假阳性率（False Positive Rate, FPR）之间的关系。</li>\n<li>真阳性率（TPR）：也称为敏感度，是实际为正例的样本中被正确预测为正例的比例。</li>\n</ol>\n<ul>\n<li>公式：TPR &#x3D; TP &#x2F; (TP + FN)</li>\n</ul>\n<ol start=\"3\">\n<li>假阳性率（FPR）：是实际为负例的样本中被错误预测为正例的比例。</li>\n</ol>\n<ul>\n<li>公式：FPR &#x3D; FP &#x2F; (FP + TN)</li>\n</ul>\n<ol start=\"4\">\n<li>曲线绘制：通过改变分类模型的阈值，可以得到不同的TPR和FPR值，从而绘制出ROC曲线。</li>\n</ol>\n<ul>\n<li>ROC曲线的横轴就是FPRate，纵轴就是TPRate</li>\n<li>当 TPR 趋近于 1，FPR 趋近于 0 时，模型效果越好</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719127285095-7361ea76-6974-43ca-9101-54f02a4eb6c5.png#averageHue=%23fafafa&clientId=u5b53ae38-aefd-4&from=paste&height=586&id=Ro0u7&originHeight=586&originWidth=672&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67151&status=done&style=none&taskId=u4e83e603-446a-45a1-8d78-c65013af146&title=&width=672\" alt=\"image.png\"></p>\n<h4 id=\"AUC-指标\"><a href=\"#AUC-指标\" class=\"headerlink\" title=\"AUC 指标\"></a>AUC 指标</h4><ol>\n<li>定义：AUC（Area Under the Curve）是指ROC曲线下的面积。AUC值的范围从0到1。</li>\n<li>意义：</li>\n</ol>\n<ul>\n<li>AUC &#x3D; 0.5：表示模型的预测能力等同于随机猜测。</li>\n<li>AUC &gt; 0.5：表示模型具有一定的预测能力。</li>\n<li>AUC &lt; 0.5：表示模型的预测能力比随机猜测还差。</li>\n</ul>\n<ol start=\"3\">\n<li>优点：</li>\n</ol>\n<ul>\n<li><p>AUC不受类别不平衡问题的影响，因为它关注的是TPR和FPR的平衡。</p>\n</li>\n<li><p>AUC提供了一个综合的性能度量，可以比较不同模型的整体性能。</p>\n</li>\n<li><p>AUC的范围在[0, 1]之间，并且越接近1越好，越接近0 越差</p>\n</li>\n<li><p><strong>AUC&#x3D;1，完美分类器，采用这个预测模型时，不管设定什么阈值都能得出完美预测。绝大多数预测的场合，不存在完美分类器。</strong></p>\n</li>\n<li><p><strong>0.5&lt;AUC&lt;1，优于随机猜测。这个分类器（模型）妥善设定阈值的话，能有预测价值。</strong></p>\n</li>\n</ul>\n<h4 id=\"AUC-指标计算-api\"><a href=\"#AUC-指标计算-api\" class=\"headerlink\" title=\"AUC 指标计算 api\"></a>AUC 指标计算 api</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score</span><br><span class=\"line\">sklearn.metrics.roc_auc_score(y_true, y_score)</span><br><span class=\"line\">- 计算ROC曲线面积，即AUC值</span><br><span class=\"line\">- y_true：每个样本的真实类别，必须为<span class=\"number\">0</span>(反例),<span class=\"number\">1</span>(正例)标记</span><br><span class=\"line\">- y_score：预测得分，可以是正类的估计概率、置信值或者分类器方法的返回值</span><br></pre></td></tr></table></figure>\n<h4 id=\"案例-ROC-曲线\"><a href=\"#案例-ROC-曲线\" class=\"headerlink\" title=\"案例- ROC 曲线\"></a>案例- ROC 曲线</h4><p>假设有6次展示记录，有两次被点击了，得到一个展示序列（1:1,2:0,3:1,4:0,5:0,6:0），前面的表示序号，后面的表示点击（1）或没有点击（0）。<br>然后在这6次展示的时候都通过model算出了点击的概率序列。</p>\n<ol>\n<li><strong>如果概率的序列是（1:0.9,2:0.7,3:0.8,4:0.6,5:0.5,6:0.4）</strong><br>与原来的序列一起，得到序列（从概率从高到低排）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.9</td>\n<td>0.8</td>\n<td>0.7</td>\n<td>0.6</td>\n<td>0.5</td>\n<td>0.4</td>\n</tr>\n</tbody></table>\n<p>绘制的步骤是：<br>1）把概率序列从高到低排序，得到顺序（1:0.9,3:0.8,2:0.7,4:0.6,5:0.5,6:0.4）；<br>2）从概率最大开始取一个点作为正类，取到点1，计算得到TPR&#x3D;0.5，FPR&#x3D;0.0；<br>3）从概率最大开始，再取一个点作为正类，取到点3，计算得到TPR&#x3D;1.0，FPR&#x3D;0.0；<br>4）再从最大开始取一个点作为正类，取到点2，计算得到TPR&#x3D;1.0，FPR&#x3D;0.25;<br>5）以此类推，得到6对TPR和FPR。<br>然后把这6对数据组成6个点(0,0.5),(0,1.0),(0.25,1),(0.5,1),(0.75,1),(1.0,1.0)。<br>这6个点在二维坐标系中能绘出来。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719222053385-3f7d5298-237f-45d2-8445-2465d7e76ae6.png#averageHue=%23fbfbfb&clientId=u5b53ae38-aefd-4&from=paste&height=518&id=Iejt7&originHeight=518&originWidth=1462&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74361&status=done&style=none&taskId=ua0ffb3c8-88b6-443f-bff3-3bf4055eee4&title=&width=1462\" alt=\"roc1.png\"></p>\n<ol start=\"2\">\n<li><strong>如果概率的序列是（1:0.9,2:0.8,3:0.7,4:0.6,5:0.5,6:0.4）</strong><br>与原来的序列一起，得到序列（从概率从高到低排）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>0</th>\n<th>0</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.9</td>\n<td>0.8</td>\n<td>0.7</td>\n<td>0.6</td>\n<td>0.5</td>\n<td>0.4</td>\n</tr>\n</tbody></table>\n<p>绘制的步骤是：<br>6）把概率序列从高到低排序，得到顺序（1:0.9,2:0.8,3:0.7,4:0.6,5:0.5,6:0.4）；<br>7）从概率最大开始取一个点作为正类，取到点1，计算得到TPR&#x3D;0.5，FPR&#x3D;0.0；<br>8）从概率最大开始，再取一个点作为正类，取到点2，计算得到TPR&#x3D;0.5，FPR&#x3D;0.25；<br>9）再从最大开始取一个点作为正类，取到点3，计算得到TPR&#x3D;1.0，FPR&#x3D;0.25;<br>10）以此类推，得到6对TPR和FPR。<br>然后把这6对数据组成6个点(0,0.5),(0.25,0.5),(0.25,1),(0.5,1),(0.75,1),(1.0,1.0)。<br>这6个点在二维坐标系中能绘出来。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719222358857-747c979e-e8cd-43d9-8646-f216829110b9.png#averageHue=%23fbfbfb&clientId=u5b53ae38-aefd-4&from=drop&id=Uzudh&originHeight=504&originWidth=1392&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72899&status=done&style=none&taskId=u96bb8fdb-4626-44ad-b292-126b57479f6&title=\" alt=\"roc2.png\"></p>\n<ol start=\"3\">\n<li><strong>如果概率的序列是（1:0.4,2:0.6,3:0.5,4:0.7,5:0.8,6:0.9）</strong><br>与原来的序列一起，得到序列（从概率从高到低排）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.9</td>\n<td>0.8</td>\n<td>0.7</td>\n<td>0.6</td>\n<td>0.5</td>\n<td>0.4</td>\n</tr>\n</tbody></table>\n<p>绘制的步骤是：<br>11）把概率序列从高到低排序，得到顺序（6:0.9,5:0.8,4:0.7,2:0.6,3:0.5,1:0.4）；<br>12）从概率最大开始取一个点作为正类，取到点6，计算得到TPR&#x3D;0.0，FPR&#x3D;0.25；<br>13）从概率最大开始，再取一个点作为正类，取到点5，计算得到TPR&#x3D;0.0，FPR&#x3D;0.5；<br>14）再从最大开始取一个点作为正类，取到点4，计算得到TPR&#x3D;0.0，FPR&#x3D;0.75;<br>15）以此类推，得到6对TPR和FPR。<br>然后把这6对数据组成6个点(0.25,0.0),(0.5,0.0),(0.75,0.0),(1.0,0.0),(1.0,0.5),(1.0,1.0)。<br>这6个点在二维坐标系中能绘出来。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719222497717-032c33db-256d-45ff-a976-664cf4c6c41c.png#averageHue=%23fbfbfb&clientId=u5b53ae38-aefd-4&from=drop&id=gAxWA&originHeight=516&originWidth=1372&originalType=binary&ratio=1&rotation=0&showTitle=false&size=82251&status=done&style=none&taskId=u03821e91-7a43-4f95-bdd9-73357727ce6&title=\" alt=\"roc3.png\"></p>\n<h1 id=\"K-近邻算法–KNN\"><a href=\"#K-近邻算法–KNN\" class=\"headerlink\" title=\"K 近邻算法–KNN\"></a>K 近邻算法–KNN</h1><p><code>pip install scikit-learn</code><br>基础使用</p>\n<ul>\n<li><code>sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)</code></li>\n<li>n_neighbors ：使用的邻居数<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">x = [[<span class=\"number\">0</span>], [<span class=\"number\">1</span>],[<span class=\"number\">2</span>],[<span class=\"number\">3</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\">estimator = KNeighborsClassifier(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 训练</span></span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"><span class=\"comment\"># 预测</span></span><br><span class=\"line\">estimator.predict([[<span class=\"number\">6</span>]])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"距离度量\"><a href=\"#距离度量\" class=\"headerlink\" title=\"距离度量\"></a>距离度量</h2><h3 id=\"欧式距离（Euclidean-Distance）\"><a href=\"#欧式距离（Euclidean-Distance）\" class=\"headerlink\" title=\"欧式距离（Euclidean Distance）\"></a>欧式距离（Euclidean Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717493986139-aefe0d3f-83ff-41b3-909b-b121e08446ef.png#averageHue=%23f9f9f9&clientId=u05d12713-3db9-4&from=paste&height=258&id=ua56440da&originHeight=258&originWidth=632&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69165&status=done&style=none&taskId=u2f130f3f-8efc-41dd-9722-80eae91b2f3&title=&width=632\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>]]</span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>, <span class=\"number\">2</span>), <span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717494522545-8f52732b-2803-4b7b-954a-5e69a9543460.png#averageHue=%23263d4c&clientId=u05d12713-3db9-4&from=paste&height=123&id=u03fbb06d&originHeight=123&originWidth=365&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11880&status=done&style=none&taskId=u424e08cc-30cb-4d42-b8a2-5bc9e09147f&title=&width=365\" alt=\"image.png\"></p>\n<h3 id=\"曼哈顿距离（Manhattan-Distance）\"><a href=\"#曼哈顿距离（Manhattan-Distance）\" class=\"headerlink\" title=\"曼哈顿距离（Manhattan Distance）\"></a>曼哈顿距离（Manhattan Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717494135403-a09eb4ac-efea-4179-940d-adf2ad455113.png#averageHue=%23a7a68d&clientId=u05d12713-3db9-4&from=paste&height=523&id=ucfc5faed&originHeight=523&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=227352&status=done&style=none&taskId=u287f7789-6049-411e-83bb-f745e2fd841&title=&width=616\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>]]</span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>) + <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717494616725-79bb1510-4716-4968-945d-a9f0b90170d2.png#averageHue=%232a4051&clientId=u05d12713-3db9-4&from=paste&height=124&id=u0163f0cf&originHeight=124&originWidth=180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5476&status=done&style=none&taskId=u8511cdd1-feaf-4ae2-8cad-0d5eaea4e0d&title=&width=180\" alt=\"image.png\"></p>\n<h3 id=\"切比雪夫距离（Chebyshev-Distance）\"><a href=\"#切比雪夫距离（Chebyshev-Distance）\" class=\"headerlink\" title=\"切比雪夫距离（Chebyshev Distance）\"></a>切比雪夫距离（Chebyshev Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717494700581-8cc75a14-8880-4381-8434-44bc52ccdceb.png#averageHue=%23d9c6b4&clientId=u05d12713-3db9-4&from=paste&height=472&id=ubdb4f63d&originHeight=472&originWidth=633&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136878&status=done&style=none&taskId=u371ee497-c6ba-477d-9d0f-7ebc9af653e&title=&width=633\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>]]</span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">2</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">3</span>-<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>), <span class=\"built_in\">abs</span>(<span class=\"number\">4</span>-<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717494886074-258a89c5-47f5-4f30-b868-aad88c5681c0.png#averageHue=%23344653&clientId=u05d12713-3db9-4&from=paste&height=130&id=u3975c789&originHeight=130&originWidth=210&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7159&status=done&style=none&taskId=ud7e8c3ec-6a0a-409e-8198-58b87afb83a&title=&width=210\" alt=\"image.png\"></p>\n<h3 id=\"闵可夫斯基距离（Minkowski-Distance）\"><a href=\"#闵可夫斯基距离（Minkowski-Distance）\" class=\"headerlink\" title=\"闵可夫斯基距离（Minkowski Distance）\"></a>闵可夫斯基距离（Minkowski Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717495007425-64d75b31-c3a3-4a46-9dc9-cd6b0458acfb.png#averageHue=%23f5f5f5&clientId=u05d12713-3db9-4&from=paste&height=389&id=u2c1a51ed&originHeight=389&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=82708&status=done&style=none&taskId=uf27a308e-a82a-4b67-8e26-c5830039539&title=&width=564\" alt=\"image.png\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>以上四种距离计算公式，忽略了各特征的区别和权重，如 人的特征（身高、体重），并且 各特征的分布（期望、方差等）是不通的</p>\n<h3 id=\"标准化欧式距离（Standardized-Euclidean-Distance）\"><a href=\"#标准化欧式距离（Standardized-Euclidean-Distance）\" class=\"headerlink\" title=\"标准化欧式距离（Standardized Euclidean Distance）\"></a>标准化欧式距离（Standardized Euclidean Distance）</h3><p>针对欧式距离的缺点而改进，也可称为 加权欧式距离<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717495551401-1e88344c-2d27-4ae5-b812-44e00e0f246d.png#averageHue=%23f7f7f7&clientId=u05d12713-3db9-4&from=paste&height=304&id=ud88ba4f5&originHeight=304&originWidth=654&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73312&status=done&style=none&taskId=ub2f8370a-747d-4b66-8073-817833ad698&title=&width=654\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>]]</span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">2</span>-<span class=\"number\">1</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">2</span>-<span class=\"number\">1</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">3</span>-<span class=\"number\">1</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">3</span>-<span class=\"number\">1</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">1</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">1</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">3</span>-<span class=\"number\">2</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">3</span>-<span class=\"number\">2</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">2</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">2</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">3</span>) / <span class=\"number\">0.5</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>((<span class=\"number\">4</span>-<span class=\"number\">3</span>) / <span class=\"number\">1</span>, <span class=\"number\">2</span>) , <span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717495944769-4de895d5-1790-4563-a379-24f403c0cf77.png#averageHue=%2330424f&clientId=u05d12713-3db9-4&from=paste&height=128&id=JbuzQ&originHeight=128&originWidth=453&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15582&status=done&style=none&taskId=u18ad3f67-eab4-4282-a390-e879fb7c617&title=&width=453\" alt=\"image.png\"></p>\n<h3 id=\"余弦距离（Cosine-Distance）\"><a href=\"#余弦距离（Cosine-Distance）\" class=\"headerlink\" title=\"余弦距离（Cosine Distance）\"></a>余弦距离（Cosine Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717496131587-1746f791-4317-4d19-b0c4-0a61ee156b4d.png#averageHue=%23f7f7f7&clientId=u05d12713-3db9-4&from=paste&height=412&id=u80f01141&originHeight=412&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=104468&status=done&style=none&taskId=u49908606-e1d0-4250-a941-4c506790502&title=&width=656\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>]]</span><br><span class=\"line\">经计算：</span><br><span class=\"line\">(<span class=\"number\">1</span>*<span class=\"number\">1</span> + <span class=\"number\">1</span>*<span class=\"number\">2</span>) / (<span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">2</span>^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>*<span class=\"number\">2</span> + <span class=\"number\">1</span>*<span class=\"number\">5</span>) / (<span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">5</span>^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>*<span class=\"number\">1</span> + <span class=\"number\">1</span>*(-<span class=\"number\">4</span>)) / (<span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + (-<span class=\"number\">4</span>)^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>*<span class=\"number\">2</span> + <span class=\"number\">2</span>*<span class=\"number\">5</span>) / (<span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">2</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">5</span>^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>*<span class=\"number\">1</span> + <span class=\"number\">2</span>*(-<span class=\"number\">4</span>)) / (<span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + <span class=\"number\">2</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + (-<span class=\"number\">4</span>)^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\">(<span class=\"number\">2</span>*<span class=\"number\">1</span> + <span class=\"number\">5</span>*(-<span class=\"number\">4</span>)) / (<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">5</span>^<span class=\"number\">2</span> , <span class=\"number\">0.5</span>) * <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>^<span class=\"number\">2</span> + (-<span class=\"number\">4</span>)^<span class=\"number\">2</span>, <span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717497477749-344a2674-0c9b-490d-8581-745fbe055a1f.png#averageHue=%232e414e&clientId=u05d12713-3db9-4&from=paste&height=125&id=u3f5e5b04&originHeight=125&originWidth=578&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38611&status=done&style=none&taskId=u8d59e69c-56cc-4706-8fd3-670b36ec1e1&title=&width=578\" alt=\"image.png\"></p>\n<h3 id=\"汉明距离（Hamming-Distance）\"><a href=\"#汉明距离（Hamming-Distance）\" class=\"headerlink\" title=\"汉明距离（Hamming Distance）\"></a>汉明距离（Hamming Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717497561656-70b462ce-bd49-4beb-8958-868a93f14a5d.png#averageHue=%23efeded&clientId=u05d12713-3db9-4&from=paste&height=557&id=ue43028e7&originHeight=557&originWidth=639&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195837&status=done&style=none&taskId=ued0426bb-3af9-41fe-ae6e-9afc65bba7c&title=&width=639\" alt=\"image.png\"><br><strong>汉明重量</strong>：字符串相对于同样长度的零字符串的汉明距离，是字符串中非零的元素个数。对于二进制字符串来说，就是1的个数，所以11101的汉明重量是4。因此，如果向量空间中的元素a和b之间的汉明距离等于它们汉明重量的差a-b。<br>应用：汉明重量分析在包括信息论、编码理论、密码学等领域都有应用。比如在信息编码过程中，为了增强容错性，应使得编码间的最小汉明距离尽可能大。但是，如果要比较两个不同长度的字符串，不仅要进行替换，而且要进行插入与删除的运算，在这种场合下，通常使用更加复杂的编辑距离等算法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">11</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">注：以下计算方式中，把<span class=\"number\">2</span>个向量之间的汉明距离定义为<span class=\"number\">2</span>个向量不通的分量所占的百分比</span><br><span class=\"line\"></span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"杰卡德距离（Jaccard-Distance）\"><a href=\"#杰卡德距离（Jaccard-Distance）\" class=\"headerlink\" title=\"杰卡德距离（Jaccard Distance）\"></a>杰卡德距离（Jaccard Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717498200134-c6663845-5916-4688-abdb-787e95a7b212.png#averageHue=%23f3f3f3&clientId=u05d12713-3db9-4&from=paste&height=415&id=ub5051e4d&originHeight=415&originWidth=654&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105037&status=done&style=none&taskId=u801ad524-365e-492d-a1c5-dd30a1d7c70&title=&width=654\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>], [<span class=\"number\">1</span>,-<span class=\"number\">1</span>,<span class=\"number\">0</span>], [-<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">注：以下计算中，把杰卡德距离定义为不同的维度个数占“非全零维度”的比例</span><br><span class=\"line\">经计算：</span><br><span class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">2</span>  x1 x2</span><br><span class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">2</span>  x1 x3</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">2</span>  x2 x3</span><br></pre></td></tr></table></figure>\n<h3 id=\"马氏距离（Mahalanobis-Distance）\"><a href=\"#马氏距离（Mahalanobis-Distance）\" class=\"headerlink\" title=\"马氏距离（Mahalanobis Distance）\"></a>马氏距离（Mahalanobis Distance）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717498646189-4aa5fbe4-6030-46ef-966b-0e1c4080628e.png#averageHue=%23f3f3f3&clientId=u05d12713-3db9-4&from=paste&height=412&id=ucb02010e&originHeight=412&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=144120&status=done&style=none&taskId=ua195feaa-c306-4ed3-932a-88c22c4ab30&title=&width=643\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717498727357-5fa63eb4-52b6-444d-8b40-4825ec655976.png#averageHue=%23f1f1f1&clientId=u05d12713-3db9-4&from=paste&height=319&id=u7767d374&originHeight=319&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109525&status=done&style=none&taskId=u0053ae99-e88a-4567-9e36-60794cd3619&title=&width=650\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717498872745-51e686db-71fa-436c-9ae9-10a185335252.png#averageHue=%23f3f2ef&clientId=u05d12713-3db9-4&from=paste&height=506&id=u76eb207d&originHeight=506&originWidth=657&originalType=binary&ratio=1&rotation=0&showTitle=false&size=192483&status=done&style=none&taskId=u6bf3afa5-576e-467f-9a0a-65f412f15a7&title=&width=657\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717498910695-a4b29fbb-8f8a-440f-a153-aef805399cad.png#averageHue=%23f1f0f0&clientId=u05d12713-3db9-4&from=paste&height=498&id=ucd932e3a&originHeight=498&originWidth=647&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191628&status=done&style=none&taskId=ue4cca2a4-22de-4072-a463-0e9fc9e06a1&title=&width=647\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717499077004-68e0f279-473c-4b8a-bb56-8883a043ff4e.png#averageHue=%23f9f9f9&clientId=u05d12713-3db9-4&from=paste&height=319&id=ua2ee2ede&originHeight=319&originWidth=626&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61813&status=done&style=none&taskId=uc4755bda-23ce-4698-9820-851d2d4fbc5&title=&width=626\" alt=\"image.png\"></p>\n<h2 id=\"K-值的选择\"><a href=\"#K-值的选择\" class=\"headerlink\" title=\"K 值的选择\"></a>K 值的选择</h2><ul>\n<li>K 值的减小：整体模型变得复杂，容易发生过拟合</li>\n<li>K 值的增大：整体模型变得简单，欠拟合</li>\n<li>K&#x3D;N（N 为训练样本数量），则完全不足取，模型过于简单</li>\n</ul>\n<p><strong>近似误差</strong>：对现有训练集的训练误差。关注训练集，如果近似误差过小可能会导致过拟合。<br><strong>估计误差</strong>：对测试集的测试误差。关注测试集，估计误差小说明对未知数据的预测能力好，模型本身最接近最佳模型。</p>\n<h2 id=\"kd-树\"><a href=\"#kd-树\" class=\"headerlink\" title=\"kd 树\"></a>kd 树</h2><p>KNN 的问题：</p>\n<ul>\n<li>实现 k 近邻算法时，主要考虑的问题是如何对训练数据进行快速 k 近邻搜索。</li>\n<li>k 近邻算法最简单的实现是 线性扫描，计算耗时，算法复杂度 O(DN^2)，N 个样本，D 个特征。</li>\n<li>为提高 KNN 搜索效率，使用特殊的结构存储训练数据，以减小计算次数。</li>\n</ul>\n<p>kd 树：</p>\n<ul>\n<li>为避免每次重新计算一遍距离，算法会把距离信息保存在一棵树中，从树里查询距离信息，避免重新计算</li>\n<li>基本原理：如果 A 和 B 距离很远，B 和 C 距离很近，那么 A 和 C 的距离也很远</li>\n<li>算法复杂度 O(DNlog(N))</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717501527054-8bfdd7cd-1c44-4365-af23-89498ecde83f.png#averageHue=%23f9f9f9&clientId=u05d12713-3db9-4&from=paste&height=679&id=u664c258e&originHeight=679&originWidth=647&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132368&status=done&style=none&taskId=ub1890838-579a-4982-8ae0-68a95c146b7&title=&width=647\" alt=\"image.png\"></p>\n<ol>\n<li>树的建立</li>\n<li>最近领域搜索</li>\n</ol>\n<p>kd 树（K-dimension tree）是一种对 k 维空间中的实例点进行存储以便对其进行快速搜索的树形数据结构</p>\n<ul>\n<li>是一种二叉树</li>\n<li>构造 kd 树相当于不断地用垂直于坐标轴的超平面将 k 维空间切分，构成一系列的 k 维超矩形区域。kd 树的结点对应于一个 k 维超矩形区域</li>\n<li>利用 kd 树可以省去对大部分数据点的搜索，从而减少计算量</li>\n</ul>\n<h3 id=\"树的建立\"><a href=\"#树的建立\" class=\"headerlink\" title=\"树的建立\"></a>树的建立</h3><p>kd 树每层需要选定向量中的某一维，根据这一维按左小右大的方式划分数据，在构造过程中关键需要解决 2 个问题：</p>\n<ul>\n<li>选择向量的哪一维进行划分<ul>\n<li>简单方法：随机选择某一维度或按顺序选择</li>\n<li>更优方法：选择数据较分散的维度，分散程度可根据方差来衡量</li>\n</ul>\n</li>\n<li>如何划分数据<ul>\n<li>选择中位数进行划分</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717502839775-e9e81170-d109-497f-a80c-ab6ad8badf1f.png#averageHue=%23f7f6f6&clientId=u05d12713-3db9-4&from=paste&height=397&id=ue2bc5a08&originHeight=397&originWidth=660&originalType=binary&ratio=1&rotation=0&showTitle=false&size=111735&status=done&style=none&taskId=u9bd6a90e-fd55-49d3-8a5f-faf948abaa5&title=&width=660\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717502995430-fb0af607-a01d-4e66-873a-596fac276098.png#averageHue=%23f7f7f7&clientId=u05d12713-3db9-4&from=paste&height=271&id=u1e7d6d5a&originHeight=271&originWidth=398&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66311&status=done&style=none&taskId=u33201b7b-b5cc-45b3-b645-1b20482bff4&title=&width=398\" alt=\"image.png\"></p>\n<h3 id=\"最近领域搜索\"><a href=\"#最近领域搜索\" class=\"headerlink\" title=\"最近领域搜索\"></a>最近领域搜索</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717503237093-f3baa50c-3bef-40c1-bf4d-acd7c077f06e.png#averageHue=%23f4f4f4&clientId=u05d12713-3db9-4&from=paste&height=648&id=u8c10f2a3&originHeight=648&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=137439&status=done&style=none&taskId=u3350b4f7-bc9f-45e3-802f-4c251f99a89&title=&width=650\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717503767479-c1924267-5c24-4d0f-96f7-e71f52d88e2e.png#averageHue=%23f8f7f0&clientId=u05d12713-3db9-4&from=paste&height=299&id=u26fd55f5&originHeight=299&originWidth=646&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62502&status=done&style=none&taskId=u22d26be7-1358-4f49-8241-3f69396e75e&title=&width=646\" alt=\"image.png\"></p>\n<h4 id=\"查找点-2-1，3-1\"><a href=\"#查找点-2-1，3-1\" class=\"headerlink\" title=\"查找点(2.1，3.1)\"></a>查找点(2.1，3.1)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717503545979-e240db9c-ff5f-4dc8-817e-02c40243714c.png#averageHue=%23f1f1f1&clientId=u05d12713-3db9-4&from=paste&height=514&id=uc2cfc68f&originHeight=514&originWidth=659&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162610&status=done&style=none&taskId=u6edc7ec6-5c87-47be-b735-bd77ac56302&title=&width=659\" alt=\"image.png\"></p>\n<h4 id=\"查找点-2，4-5\"><a href=\"#查找点-2，4-5\" class=\"headerlink\" title=\"查找点(2，4.5)\"></a>查找点(2，4.5)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717504052835-0cff778c-394f-443e-93ba-85ae25459620.png#averageHue=%23f2f2f0&clientId=u05d12713-3db9-4&from=paste&height=577&id=u6b1b05b6&originHeight=577&originWidth=673&originalType=binary&ratio=1&rotation=0&showTitle=false&size=229384&status=done&style=none&taskId=ub0f2c8c6-8b20-4ed8-a276-d90168a2fec&title=&width=673\" alt=\"image.png\"></p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><p><code>scikit-learn</code>数据集 API</p>\n<ul>\n<li><code>scikit-learn.datasets</code><ul>\n<li>加载获取流行数据集</li>\n<li><code>datasets.load_*()</code><ul>\n<li>获取小规模数据集，数据包含在 datasets 里</li>\n</ul>\n</li>\n<li><code>datasets.fetch_*(data_home=None, subset=&#39;train&#39;)</code><ul>\n<li>获取大规模数据集，需要联网下载</li>\n<li>data_home 表示数据集下载的目录，默认是 <code>~/scikit_learn_data</code></li>\n<li>subset：‘train’（训练数据集）、‘test’（测试数据集）、‘all’（所有数据集）</li>\n</ul>\n</li>\n<li>返回值数据类型 <code>datasets.base.Bunch</code>字典格式<ul>\n<li>data：特征数据数组</li>\n<li>target：标签数组</li>\n<li>DESCR：数据描述</li>\n<li>feature_names：特征名</li>\n<li>target_names：标签名</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris, fetch_20newsgroups</span><br><span class=\"line\"></span><br><span class=\"line\">iris = load_iris()</span><br><span class=\"line\"></span><br><span class=\"line\">news = fetch_20newsgroups()</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例：鸢尾花数据集\"><a href=\"#案例：鸢尾花数据集\" class=\"headerlink\" title=\"案例：鸢尾花数据集\"></a>案例：鸢尾花数据集</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> font_manager</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">font_manager.fontManager.addfont(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>, <span class=\"string\">&#x27;static&#x27;</span>, <span class=\"string\">&#x27;simhei.ttf&#x27;</span>))</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class=\"line\">iris_df[<span class=\"string\">&#x27;target&#x27;</span>] = iris.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_iris</span>(<span class=\"params\">iris, col1, col2, target</span>):</span><br><span class=\"line\">    sns.lmplot(iris, x=col1, y=col2, hue=target, fit_reg=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    plt.xlabel(col1)</span><br><span class=\"line\">    plt.ylabel(col2)</span><br><span class=\"line\">    plt.title(<span class=\"string\">&#x27;鸢尾花种类分布&#x27;</span>)</span><br><span class=\"line\">    plt.savefig(<span class=\"string\">&#x27;鸢尾花种类分布.png&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">plot_iris(iris_df, <span class=\"string\">&#x27;petal width (cm)&#x27;</span>, <span class=\"string\">&#x27;sepal length (cm)&#x27;</span>, <span class=\"string\">&#x27;target&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717579157312-1f4ccbde-cfa4-4e90-816d-eaefa9d0f8cf.png#averageHue=%23fcfaf9&clientId=u6de17889-a7ab-4&from=drop&id=u3fe78600&originHeight=500&originWidth=557&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43510&status=done&style=none&taskId=ua6398c0f-91ee-4b70-844b-f1ea6bbb069&title=\" alt=\"鸢尾花种类分布.png\"></p>\n<h3 id=\"数据集划分\"><a href=\"#数据集划分\" class=\"headerlink\" title=\"数据集划分\"></a>数据集划分</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> model_selection</span><br><span class=\"line\">x_train, x_test, y_train, y_test = model_selection.train_test_split(iris.data, iris.target, test_size=<span class=\"number\">0.2</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"特征预处理\"><a href=\"#特征预处理\" class=\"headerlink\" title=\"特征预处理\"></a>特征预处理</h2><h4 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化\"></a>归一化</h4><p>通过对原始数据进行变换把数据映射到（默认为 [0，1] ）之间<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717581435342-99428cab-5eae-44bb-82ef-3c3145ee6b13.png#averageHue=%23f4f4f3&clientId=u2ae43044-40c7-4&from=paste&height=483&id=ucb7e90a0&originHeight=483&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&size=140284&status=done&style=none&taskId=ufb3b4bac-4030-4e47-a9b0-a9068757430&title=&width=631\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> MinMaxScaler</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">100</span></span><br><span class=\"line\">milage = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num)]</span><br><span class=\"line\">liters = [random.random() * <span class=\"number\">20</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num)]</span><br><span class=\"line\">consumtime = [random.random() * <span class=\"number\">24</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num)]</span><br><span class=\"line\">data = pd.DataFrame(&#123;<span class=\"string\">&#x27;milage&#x27;</span>:milage, <span class=\"string\">&#x27;liters&#x27;</span>:liters, <span class=\"string\">&#x27;consumtime&#x27;</span>:consumtime&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化转换器</span></span><br><span class=\"line\">transfer = MinMaxScaler(feature_range=(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># 转换</span></span><br><span class=\"line\">minmax_data = transfer.fit_transform(data[[<span class=\"string\">&#x27;milage&#x27;</span>,<span class=\"string\">&#x27;liters&#x27;</span>,<span class=\"string\">&#x27;consumtime&#x27;</span>]])</span><br><span class=\"line\">minmax_data</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>容易受异常数据的影响<br>稳定性较差，只适合传统精确小数据场景</p>\n</blockquote>\n<h4 id=\"标准化\"><a href=\"#标准化\" class=\"headerlink\" title=\"标准化\"></a>标准化</h4><p>通过对原始数据进行变换把数据变换到均值为 0，标准差为 1 的范围内。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717583128155-66b4b709-a76c-4459-ad1e-c121985779dd.png#averageHue=%23fbfafa&clientId=u2ae43044-40c7-4&from=paste&height=555&id=uaf7c142f&originHeight=555&originWidth=576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67710&status=done&style=none&taskId=u82ea502b-9e9c-4140-84f2-00edc0e9b0d&title=&width=576\" alt=\"image.png\"></p>\n<blockquote>\n<p>异常数据影响小<br>适合现代嘈杂大数据场景</p>\n</blockquote>\n<h2 id=\"案例：鸢尾花种类预测-流程实现\"><a href=\"#案例：鸢尾花种类预测-流程实现\" class=\"headerlink\" title=\"案例：鸢尾花种类预测-流程实现\"></a>案例：鸢尾花种类预测-流程实现</h2><p><code>sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, algorithm=&#39;auto&#39;)</code></p>\n<ul>\n<li><code>n_neighbors</code>: 邻居数</li>\n<li><code>algorithm</code>: (‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’)<ul>\n<li>auto : 算法自己决定适合的搜索算法</li>\n<li>brute ：暴力搜索，即线性扫描</li>\n<li>kd_tree ：构造 kd 树存储数据以便进行快速搜索的树形结构</li>\n<li>ball_tree : 为了克服 kd 树高维失效而发明的，其构造过程是以质心 C 和半径 r 分割样本空间，每个节点是一个超球体</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获取数据集\"><a href=\"#获取数据集\" class=\"headerlink\" title=\"获取数据集\"></a>获取数据集</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets, model_selection, preprocessing, neighbors</span><br><span class=\"line\"></span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据基本处理\"><a href=\"#数据基本处理\" class=\"headerlink\" title=\"数据基本处理\"></a>数据基本处理</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据分割</span></span><br><span class=\"line\">x_train, x_test, y_train, y_test = model_selection.train_test_split(iris.data, iris.target, test_size=<span class=\"number\">0.2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例化标准化转换器</span></span><br><span class=\"line\">transfer = preprocessing.StandardScaler()</span><br><span class=\"line\"><span class=\"comment\"># 标准化</span></span><br><span class=\"line\">x_train_stand = transfer.fit_transform(x_train)</span><br><span class=\"line\">x_test_stand = transfer.fit_transform(x_test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"机器学习（模型训练）\"><a href=\"#机器学习（模型训练）\" class=\"headerlink\" title=\"机器学习（模型训练）\"></a>机器学习（模型训练）</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例化估计器</span></span><br><span class=\"line\">model = neighbors.KNeighborsClassifier()</span><br><span class=\"line\"><span class=\"comment\"># 模型训练</span></span><br><span class=\"line\">model.fit(x_train_stand, y_train)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型评估\"><a href=\"#模型评估\" class=\"headerlink\" title=\"模型评估\"></a>模型评估</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出预测值</span></span><br><span class=\"line\">y_pre = model.predict(x_test_stand)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测值和真实值对比：&quot;</span>, y_pre == y_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出准确率</span></span><br><span class=\"line\">model.score(x_test_stand, y_test)</span><br></pre></td></tr></table></figure>\n<h2 id=\"手动实现-KNN\"><a href=\"#手动实现-KNN\" class=\"headerlink\" title=\"手动实现 KNN\"></a>手动实现 KNN</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 定义KNN算法类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KNN</span>:</span><br><span class=\"line\">    <span class=\"comment\"># KNN算法初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, n_neighbors=<span class=\"number\">5</span></span>):</span><br><span class=\"line\">        self.n_neighbors = n_neighbors</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fit</span>(<span class=\"params\">self, X, y</span>):</span><br><span class=\"line\">        self.X = X</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">                                        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">euclidean_distance</span>(<span class=\"params\">self, x1, x2</span>): </span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.sqrt(np.<span class=\"built_in\">sum</span>((x1 - x2) ** <span class=\"number\">2</span>)) <span class=\"comment\"># 两个向量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self, X_test</span>):  </span><br><span class=\"line\">        y_pred = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> test_sample <span class=\"keyword\">in</span> X_test:</span><br><span class=\"line\">            distances = [self.euclidean_distance(test_sample, x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self.X]</span><br><span class=\"line\">            nearest_indices:numpy.ndarray = np.argsort(distances)[:self.n_neighbors] <span class=\"comment\"># 排序</span></span><br><span class=\"line\">            nearest_labels = self.y[nearest_indices]</span><br><span class=\"line\">            unique_labels, counts = np.unique(nearest_labels, return_counts=<span class=\"literal\">True</span>)<span class=\"comment\"># 返回值是一个包含两个数组的元组，第一个数组是唯一的标签值，第二个数组是对应每个唯一标签值的计数</span></span><br><span class=\"line\">            predicted_label = unique_labels[np.argmax(counts)] <span class=\"comment\"># np.argmax(counts)返回数组中最大元素的索引</span></span><br><span class=\"line\">            y_pred.append(predicted_label)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.array(y_pred) <span class=\"comment\"># 将预测结果转换为数组并返回  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 加载鸢尾花数据集</span></span><br><span class=\"line\">iris = load_iris()</span><br><span class=\"line\">x = iris.data</span><br><span class=\"line\">y = iris.target</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 划分训练集和测试集</span></span><br><span class=\"line\">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">100</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 实例化KNN算法类</span></span><br><span class=\"line\">knn = KNN(n_neighbors=<span class=\"number\">5</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 将训练集送入knn算法</span></span><br><span class=\"line\">knn.fit(x_train, y_train)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 预测测试集</span></span><br><span class=\"line\">y_pred = knn.predict(x_test)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 预测结果展示</span></span><br><span class=\"line\">labels = [<span class=\"string\">&quot;山鸢尾&quot;</span>,<span class=\"string\">&quot;虹膜锦葵&quot;</span>,<span class=\"string\">&quot;变色鸢尾&quot;</span>]   </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_pred)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第%d次测试:\\t预测值:%s\\t\\t真实值:%s&quot;</span>%((i+<span class=\"number\">1</span>),labels[y_pred[i]],labels[y_test[i]])) </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 计算准确率</span></span><br><span class=\"line\"><span class=\"comment\"># accuracy_score()函数位于sklearn.metrics模块中，属于Scikit-learn库的一部分</span></span><br><span class=\"line\">accuracy = accuracy_score(y_test, y_pred) <span class=\"comment\"># accuracy_score()函数会比较真实标签值和预测标签值，并计算出准确分类的样本数占总样本数的比例，即准确率。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;准确率:&quot;</span>, accuracy)</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>优点：</p>\n<ol>\n<li>简单直观：KNN算法的思想简单明了，易于理解和实现。</li>\n<li>无需训练过程：KNN是一种基于实例的学习方法，不需要显式地进行训练，而是根据训练数据集直接进行预测。</li>\n<li>对数据分布没有假设：KNN算法对数据分布没有假设，适用于各种类型的数据。</li>\n<li>可以进行多分类，适合类域交叉样本：KNN算法可以处理多分类问题，并且在类别不平衡的情况下也能有效工作。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>计算复杂度高：KNN算法需要计算测试样本和所有训练样本之间的距离，当样本规模较大时，计算复杂度较高。</li>\n<li>存储开销大：KNN算法需要保存所有的训练样本，对内存要求较高。</li>\n<li>预测速度慢：由于需要计算距离并比较所有训练样本，KNN算法的预测速度相对较慢。</li>\n<li>对异常值敏感：KNN算法对异常值敏感，如果训练集中有噪声或异常值，可能会对预测结果产生较大影响。</li>\n<li>需要确定K值：KNN算法中的K值需要人为设定，选择不当可能导致预测结果不准确。</li>\n<li>不擅长不均衡样本</li>\n</ol>\n</blockquote>\n<h1 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h1><p>利用回归方程对一个或多个自变量（特征值）和因变量（目标值）之间关系进行建模的一种方式。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717661265917-6aad685b-c326-4d71-a4ed-ca8048eee3bd.png#averageHue=%23fbfbfb&clientId=uc07adeab-8ed0-4&from=paste&height=504&id=ufa30f1e9&originHeight=504&originWidth=615&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87894&status=done&style=none&taskId=u7026b9de-6183-442b-a075-6d1850e70b1&title=&width=615\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717661356920-17e4a609-43ea-4ffb-b314-07003ac5e098.png#averageHue=%23fdfdfd&clientId=uc07adeab-8ed0-4&from=paste&height=199&id=u91d19bb7&originHeight=199&originWidth=622&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28730&status=done&style=none&taskId=u70ce3be8-ee0b-4675-9046-79e45123a16&title=&width=622\" alt=\"image.png\"><br>分类：</p>\n<ol>\n<li>线性关系</li>\n<li>非线性关系</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717661583084-7d0852cd-cc6d-43a6-8076-2f6668eea461.png#averageHue=%23fbfbfb&clientId=uc07adeab-8ed0-4&from=paste&height=203&id=uef212c4b&originHeight=410&originWidth=516&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38166&status=done&style=none&taskId=ud3981062-312d-4942-9da4-73757d0c230&title=&width=256\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717661635999-ca2b55f6-ab30-48a6-a913-37856c703324.png#averageHue=%23fbf9f8&clientId=uc07adeab-8ed0-4&from=paste&height=219&id=u4ebe7545&originHeight=481&originWidth=514&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101221&status=done&style=none&taskId=ue9418c25-dba7-4084-a030-6f8d2b81706&title=&width=234\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717661671937-27ac84a8-a342-4d5e-a777-4d40f6e6223e.png#averageHue=%23f7f5f3&clientId=uc07adeab-8ed0-4&from=paste&height=214&id=uf8eb9777&originHeight=285&originWidth=366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42202&status=done&style=none&taskId=u8f7055ac-d19c-44df-a5b3-4e896842b21&title=&width=275\" alt=\"image.png\"></p>\n<p><code>sklearn.linear_model.LinearRegression()</code></p>\n<ul>\n<li><code>LinearRegression.coef_</code>：回归系数<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> linear_model</span><br><span class=\"line\"></span><br><span class=\"line\">x = [[<span class=\"number\">80</span>, <span class=\"number\">86</span>],</span><br><span class=\"line\">     [<span class=\"number\">82</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">     [<span class=\"number\">85</span>, <span class=\"number\">78</span>],</span><br><span class=\"line\">     [<span class=\"number\">90</span>, <span class=\"number\">90</span>],</span><br><span class=\"line\">     [<span class=\"number\">86</span>, <span class=\"number\">82</span>],</span><br><span class=\"line\">     [<span class=\"number\">82</span>, <span class=\"number\">90</span>],</span><br><span class=\"line\">     [<span class=\"number\">78</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">     [<span class=\"number\">92</span>, <span class=\"number\">94</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">84.2</span>, <span class=\"number\">80.6</span>, <span class=\"number\">80.1</span>, <span class=\"number\">90</span>, <span class=\"number\">83.2</span>, <span class=\"number\">87.6</span>, <span class=\"number\">79.4</span>, <span class=\"number\">93.4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">estimator = linear_model.LinearRegression()</span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看回归系数</span></span><br><span class=\"line\">estimator.coef_</span><br><span class=\"line\"></span><br><span class=\"line\">estimator.predict([[<span class=\"number\">80</span>, <span class=\"number\">100</span>]])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数学导数\"><a href=\"#数学导数\" class=\"headerlink\" title=\"数学导数\"></a>数学导数</h2><p><a href=\"https://www.yuque.com/shenmidezhangshaoye/zl4zhb/vgwh218h1erf8wwy?view=doc_embed\">数学基础知识</a></p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717830537753-4c572f13-e013-48de-ba5f-07feed470bac.png#averageHue=%23f7f7f7&clientId=u62119e98-5ac7-4&from=paste&height=166&id=u4e4e1feb&originHeight=166&originWidth=565&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41718&status=done&style=none&taskId=u0bd94c48-d0a9-476a-8513-8e974957b9c&title=&width=565\" alt=\"image.png\"></p>\n<h2 id=\"优化算法\"><a href=\"#优化算法\" class=\"headerlink\" title=\"优化算法\"></a>优化算法</h2><h3 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717830749149-cbf321d0-81bc-499c-86b9-4eba1e7cd51b.png#averageHue=%23f9f8f8&clientId=u62119e98-5ac7-4&from=paste&height=454&id=u1c6f2e07&originHeight=569&originWidth=565&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92700&status=done&style=none&taskId=u4952e788-f16d-4863-8691-8e1a2aec766&title=&width=451\" alt=\"image.png\"></p>\n<h4 id=\"推导\"><a href=\"#推导\" class=\"headerlink\" title=\"推导\"></a>推导</h4><h5 id=\"推导方式一\"><a href=\"#推导方式一\" class=\"headerlink\" title=\"推导方式一\"></a>推导方式一</h5><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717831936296-a0affc9b-3574-4952-ac02-8b27434217d7.png#averageHue=%23f9f9f9&clientId=u62119e98-5ac7-4&from=paste&height=568&id=ufd5c5fe1&originHeight=568&originWidth=578&originalType=binary&ratio=1&rotation=0&showTitle=false&size=148729&status=done&style=none&taskId=uee1413a8-a574-4aa8-9ab1-24ee9629f00&title=&width=578\" alt=\"image.png\"></p>\n<h5 id=\"推导方式二\"><a href=\"#推导方式二\" class=\"headerlink\" title=\"推导方式二\"></a>推导方式二</h5><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717833662907-8e1bc051-935f-4ccd-9767-351feafc3f76.png#averageHue=%23b0aca6&clientId=u62119e98-5ac7-4&from=paste&height=716&id=u71c0a13c&originHeight=716&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=586445&status=done&style=none&taskId=u152f6205-dcf7-4e6b-b05b-ca3d533cd9c&title=&width=800\" alt=\"image.png\"><br><a href=\"https://www.yuque.com/shenmidezhangshaoye/zl4zhb/vgwh218h1erf8wwy#gPa5w\">应用–正规方程公式推导</a></p>\n<h3 id=\"梯度下降\"><a href=\"#梯度下降\" class=\"headerlink\" title=\"梯度下降\"></a>梯度下降</h3><h4 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717851368693-7cbd6682-ab6a-4957-96b3-1274fc1fd44f.png#averageHue=%23f3f3f3&clientId=u62119e98-5ac7-4&from=paste&height=74&id=u6b3f1251&originHeight=74&originWidth=248&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8584&status=done&style=none&taskId=u1842d8a7-41da-4c36-8d74-09dbb90b24b&title=&width=248\" alt=\"image.png\"><br>学习率<br>微分   梯度</p>\n<ol>\n<li>单变量函数的梯度下降</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717850874357-cf625d43-2cca-4b69-97af-98d186b3f3aa.png#averageHue=%23fbfbfb&clientId=u62119e98-5ac7-4&from=paste&height=416&id=u77af5fec&originHeight=488&originWidth=504&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68850&status=done&style=none&taskId=u1411d0ec-2d5b-4e8e-95bc-8f5ea81cb45&title=&width=430\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717850904497-17ec3cc4-0197-47d0-b4ba-41a51da1dba5.png#averageHue=%23fbfbfb&clientId=u62119e98-5ac7-4&from=paste&height=419&id=u0486fe67&originHeight=528&originWidth=507&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58662&status=done&style=none&taskId=u844ad467-334f-44c6-a4e2-f77846f60a9&title=&width=402\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>多变量函数的梯度下降</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717850957608-2530adf2-0646-48f8-908d-7b9762181f4e.png#averageHue=%23fafaf9&clientId=u62119e98-5ac7-4&from=paste&height=528&id=ue62cf0b4&originHeight=573&originWidth=577&originalType=binary&ratio=1&rotation=0&showTitle=false&size=140646&status=done&style=none&taskId=u52774a8b-1f0f-4a26-af81-971f6d42432&title=&width=532\" alt=\"image.png\"></p>\n<h4 id=\"全梯度下降算法（FG）\"><a href=\"#全梯度下降算法（FG）\" class=\"headerlink\" title=\"全梯度下降算法（FG）\"></a>全梯度下降算法（FG）</h4><ul>\n<li>计算训练集所有样本误差，对其求和再取平均值作为目标函数</li>\n<li>因为在执行更新时，需要在整个数据集上计算所有的梯度，所以全梯度下降法的速度很慢。</li>\n<li>无法处理超出内存容量限制的数量集</li>\n<li>不能在线更新模型，即 在运行过程中，不能增加新的样本</li>\n</ul>\n<h4 id=\"随机梯度下降算法（SG）\"><a href=\"#随机梯度下降算法（SG）\" class=\"headerlink\" title=\"随机梯度下降算法（SG）\"></a>随机梯度下降算法（SG）</h4><ul>\n<li>每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。</li>\n<li>简单、高效，通常能较好的避免更新迭代收敛到局部最优解</li>\n<li>缺点：<ul>\n<li>每一轮梯度更新都完全与上一轮的数据和梯度无关</li>\n<li>若遇上噪声 则容易陷入局部最优解</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"随机平均梯度下降算法（SAG）\"><a href=\"#随机平均梯度下降算法（SAG）\" class=\"headerlink\" title=\"随机平均梯度下降算法（SAG）\"></a>随机平均梯度下降算法（SAG）</h4><ul>\n<li>克服了 SG 的“每一轮梯度更新都完全与上一轮的数据和梯度无关”</li>\n<li>在内存中为每一个样本都维护一个旧的梯度，随机选择第 i 个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新参数。</li>\n<li>每一轮更新仅需计算一个样本的梯度，计算成本等同于 SG，但收敛速度快得多</li>\n</ul>\n<h4 id=\"小批量梯度下降算法（mini-batch）\"><a href=\"#小批量梯度下降算法（mini-batch）\" class=\"headerlink\" title=\"小批量梯度下降算法（mini-batch）\"></a>小批量梯度下降算法（mini-batch）</h4><ul>\n<li>在一定程度上，兼顾了 全梯度下降 和 随机梯度下降 两种方法的优点</li>\n<li>每次从训练样本集中随机抽取一个小样本集，在抽出来的小样本集上采用 FG 迭代更新权重</li>\n</ul>\n<h4 id=\"对比结论\"><a href=\"#对比结论\" class=\"headerlink\" title=\"对比结论\"></a>对比结论</h4><ol>\n<li>FG 方法花费的时间成本最多，内存存储最大。</li>\n<li>SAG 在训练初期表现不佳，优化速度较慢。这是因为常将初始梯度设置为 0，而 SAG 每轮梯度更新都结合了上一轮梯度值。</li>\n<li>综合考虑迭代次数和运行时间，SG 表现性能都很好，能在训练初期快速摆脱初始梯度值，快速将平均损失函数降到很低。但要注意，在使用 SG 方法时要慎重选择步长，否则容易错过最优解。</li>\n<li>mini-batch 结合了 SG 和 FG，表现居于 SG 和 FG 之间。在目前的机器学习领域，mini-batch 是使用最多的梯度下降算法，因为它避开了 FG 运算效率低、成本大 和 SG 收敛效果不稳定 的缺点。</li>\n</ol>\n<h3 id=\"线性回归-API\"><a href=\"#线性回归-API\" class=\"headerlink\" title=\"线性回归 API\"></a>线性回归 API</h3><p><code>sklearn.linear_model.LinearRegression()</code></p>\n<ul>\n<li>通过正规方程优化</li>\n<li><code>fit_intercept</code>：是否计算偏置</li>\n<li><code>LinearRegression.coef_</code>：回归系数</li>\n<li><code>LinearRegression.intercept_</code>：偏置</li>\n</ul>\n<p><code>sklearn.linear_model.SGDRegressor(loss=&#39;squared_loss&#39;, fit_intercept=True, learning_rate=&#39;invscaling&#39;,eta0=0.01)</code></p>\n<ul>\n<li><code>SGDRegressor</code>类实现了随机梯度下降学习，它支持不同的 loss 函数和正则化惩罚项来拟合线性回归模型</li>\n<li><code>loss</code>：损失类型<ul>\n<li><code>squared_loss</code>：普通最小二乘法</li>\n</ul>\n</li>\n<li><code>fit_intercept</code>：是否计算偏置</li>\n<li><code>learning_rate</code>：string，学习率<ul>\n<li><code>constant</code>：<code>eta = eta0</code></li>\n<li><code>optimal</code>：<code>eta = 1.0 / (alpha * (t + t0))</code> [default]</li>\n<li><code>invscalling</code> ：<code>eta = eta0 / pow(t, power_t)</code> ，<code>power_t=0.25</code> 存在父类当中</li>\n</ul>\n</li>\n<li>对于一个常数值的学习率来说，可以使用 <code>constant</code>，并指定 eta0 来指定学习率。</li>\n<li><code>SGDRegressor.coef_</code>：回归系数</li>\n<li><code>SGDRegressor.intercept_</code>：偏置</li>\n</ul>\n<h3 id=\"案例：波士顿房价预测\"><a href=\"#案例：波士顿房价预测\" class=\"headerlink\" title=\"案例：波士顿房价预测\"></a>案例：波士顿房价预测</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717914489672-f520a37e-1b4d-484f-b8a3-21bdf2b88337.png#averageHue=%23c3c3c1&clientId=u62119e98-5ac7-4&from=paste&height=372&id=u72f26833&originHeight=381&originWidth=461&originalType=binary&ratio=1&rotation=0&showTitle=false&size=150120&status=done&style=none&taskId=u9e10d1d0-a2e8-40fc-b8d9-446396de66c&title=&width=450\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717914510699-06099243-5208-4118-b412-c18ec4b8413c.png#averageHue=%23f4f4f4&clientId=u62119e98-5ac7-4&from=paste&height=343&id=u7490abb1&originHeight=519&originWidth=623&originalType=binary&ratio=1&rotation=0&showTitle=false&size=172849&status=done&style=none&taskId=uf9fd6b34-567f-4a99-9b6c-8a87f78c5c2&title=&width=412\" alt=\"image.png\"><br>回归性能评估–均方误差<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1717914609658-7f46b431-2920-4cd5-9410-4b4e5bf535f2.png#averageHue=%23f8f8f8&clientId=u62119e98-5ac7-4&from=paste&height=261&id=u3401f2ce&originHeight=308&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53621&status=done&style=none&taskId=uddae0b37-31de-4aef-8190-003feeebb4f&title=&width=545\" alt=\"image.png\"></p>\n<h4 id=\"正规方程-1\"><a href=\"#正规方程-1\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets,model_selection, preprocessing,linear_model,metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_model1</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线性回归：正规方程&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.获取数据集</span></span><br><span class=\"line\">    data = datasets.fetch_california_housing()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 2.数据预处理</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据分割</span></span><br><span class=\"line\">    x_train, x_test, y_train, y_test = model_selection.train_test_split(data.data, data.target, test_size=<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.特征工程--标准化</span></span><br><span class=\"line\">    transformer = preprocessing.StandardScaler()</span><br><span class=\"line\">    x_train = transformer.fit_transform(x_train)</span><br><span class=\"line\">    x_test = transformer.fit_transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.机器学习--线性回归--正规方程</span></span><br><span class=\"line\">    estimator = linear_model.LinearRegression()</span><br><span class=\"line\">    estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.模型评估</span></span><br><span class=\"line\">    y_predict = estimator.predict(x_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型的系数为：&quot;</span>, estimator.coef_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型的偏置为：&quot;</span>, estimator.intercept_)</span><br><span class=\"line\"></span><br><span class=\"line\">    score = estimator.score(x_test, y_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;准确率：&quot;</span>, score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6.模型评价--均方误差</span></span><br><span class=\"line\">    err = metrics.mean_squared_error(y_test, y_predict)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;误差为：&quot;</span>, err)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">模型的系数为： [ <span class=\"number\">0.84103131</span>  <span class=\"number\">0.11130489</span> -<span class=\"number\">0.27438264</span>  <span class=\"number\">0.29033755</span> -<span class=\"number\">0.00429525</span> -<span class=\"number\">0.04094309</span></span><br><span class=\"line\"> -<span class=\"number\">0.88850992</span> -<span class=\"number\">0.86048318</span>]</span><br><span class=\"line\">模型的偏置为： <span class=\"number\">2.0640874249026724</span></span><br><span class=\"line\">误差为： <span class=\"number\">0.5549964508519143</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"梯度下降-1\"><a href=\"#梯度下降-1\" class=\"headerlink\" title=\"梯度下降\"></a>梯度下降</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_model2</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线性回归：梯度下降&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.获取数据</span></span><br><span class=\"line\">    data = datasets.fetch_california_housing()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.数据预处理</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据分割</span></span><br><span class=\"line\">    x_train, x_test, y_train, y_test = model_selection.train_test_split(data.data, data.target, test_size=<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.特征工程--标准化</span></span><br><span class=\"line\">    transformer = preprocessing.StandardScaler()</span><br><span class=\"line\">    x_train = transformer.fit_transform(x_train)</span><br><span class=\"line\">    x_test = transformer.fit_transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.机器学习--线性回归--正规方程</span></span><br><span class=\"line\">    <span class=\"comment\"># estimator = linear_model.SGDRegressor(loss=&#x27;squared_error&#x27;, fit_intercept=True, learning_rate=&#x27;invscaling&#x27;,eta0=0.01)</span></span><br><span class=\"line\">    <span class=\"comment\"># estimator = linear_model.SGDRegressor(loss=&#x27;squared_error&#x27;, fit_intercept=True, learning_rate=&#x27;optimal&#x27;)</span></span><br><span class=\"line\">    estimator = linear_model.SGDRegressor(loss=<span class=\"string\">&#x27;squared_error&#x27;</span>, fit_intercept=<span class=\"literal\">True</span>, learning_rate=<span class=\"string\">&#x27;constant&#x27;</span>,eta0=<span class=\"number\">0.01</span>)</span><br><span class=\"line\">    estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5.模型评估</span></span><br><span class=\"line\">    y_predict = estimator.predict(x_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型的系数为：&quot;</span>, estimator.coef_)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型的偏置为：&quot;</span>, estimator.intercept_)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6.模型评价--均方误差</span></span><br><span class=\"line\">    err = metrics.mean_squared_error(y_test, y_predict)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;误差为：&quot;</span>, err)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># invscaling</span></span><br><span class=\"line\">模型的系数为： [ <span class=\"number\">0.81688798</span>  <span class=\"number\">0.10179519</span> -<span class=\"number\">0.22647939</span>  <span class=\"number\">0.31256283</span> -<span class=\"number\">0.00257367</span>  <span class=\"number\">0.00194664</span> -<span class=\"number\">0.89681826</span> -<span class=\"number\">0.8857027</span> ]</span><br><span class=\"line\">模型的偏置为： [<span class=\"number\">2.07232493</span>]</span><br><span class=\"line\">误差为： <span class=\"number\">0.5134261990580209</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># optimal</span></span><br><span class=\"line\">模型的系数为： [-<span class=\"number\">3.99256500e+09</span>  <span class=\"number\">9.87210858e+09</span>  <span class=\"number\">1.72987497e+10</span>  <span class=\"number\">3.71137485e+10</span> <span class=\"number\">1.89630581e+09</span> -<span class=\"number\">6.34930015e+11</span> -<span class=\"number\">2.56848031e+09</span> -<span class=\"number\">3.36593398e+09</span>]</span><br><span class=\"line\">模型的偏置为： [-<span class=\"number\">5.71810851e+09</span>]</span><br><span class=\"line\">误差为： <span class=\"number\">4.045881204754298e+23</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># constant</span></span><br><span class=\"line\">模型的系数为： [-<span class=\"number\">2.56669465e+10</span>  <span class=\"number\">1.72959710e+10</span>  <span class=\"number\">1.70773754e+11</span>  <span class=\"number\">9.07167174e+10</span>  <span class=\"number\">3.57775592e+10</span> -<span class=\"number\">6.22634283e+11</span>  <span class=\"number\">7.77501486e+09</span> -<span class=\"number\">1.57808740e+10</span>]</span><br><span class=\"line\">模型的偏置为： [-<span class=\"number\">1.02306253e+10</span>]</span><br><span class=\"line\">误差为： <span class=\"number\">4.403164594797046e+23</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"欠拟合、过拟合\"><a href=\"#欠拟合、过拟合\" class=\"headerlink\" title=\"欠拟合、过拟合\"></a>欠拟合、过拟合</h2><p>欠拟合：模型过于简单。在训练数据上不能获得更好的拟合，并且在测试数据上也不能很好的拟合数据。</p>\n<ul>\n<li>原因：原始特征过多，存在嘈杂特征，模型过于复杂</li>\n<li>解决方法：<ul>\n<li>重新清洗数据</li>\n<li>增大数据的训练量</li>\n<li>正则化</li>\n<li>减少特征维度，防止维灾难</li>\n</ul>\n</li>\n</ul>\n<p>过拟合：模型过于复杂。在训练数据上能够获得很好的拟合，但在测试数据上不能很好的拟合。</p>\n<ul>\n<li>原因：学习到数据的特征过少</li>\n<li>解决方法：<ul>\n<li>添加其他特征</li>\n<li>添加多项式特征</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><p>进行特征选择<br>数据提供的特征有些影响模型复杂度或这个特征的数据异常点较多，所以算法在学习时尽量减少这个特征的影响（甚至删除特征的影响），这就是正则化。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718087378237-6d102d14-4be9-4180-9b68-5262da849d12.png#averageHue=%23f7f5f4&clientId=u62119e98-5ac7-4&from=paste&height=234&id=uba7748cd&originHeight=234&originWidth=637&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71362&status=done&style=none&taskId=u53bc9db8-68ec-4009-9893-9cfb8acf615&title=&width=637\" alt=\"image.png\"></p>\n<blockquote>\n<p>尽量减少高次项特征的影响</p>\n</blockquote>\n<p>L1 正则化</p>\n<ul>\n<li>作用：可以使其中一些特征的系数为 0，删除特征的影响</li>\n<li>LASSO 回归</li>\n<li>有交点的线，不平滑</li>\n</ul>\n<p>L2 正则化</p>\n<ul>\n<li>作用：可以使得其中一些特征的系数很小，接近于 0，削弱特征的影响</li>\n<li>Ridge 回归</li>\n<li>平滑曲线</li>\n</ul>\n<h3 id=\"正则化线性模型\"><a href=\"#正则化线性模型\" class=\"headerlink\" title=\"正则化线性模型\"></a>正则化线性模型</h3><h4 id=\"Ridge-Regression（岭回归）\"><a href=\"#Ridge-Regression（岭回归）\" class=\"headerlink\" title=\"Ridge Regression（岭回归）\"></a>Ridge Regression（岭回归）</h4><p>岭回归是线性回归的正则化版本，即在线性回归的代价函数中添加正则项$α \\sum_{i&#x3D;1}^{n} Θ_i^2$，以达到在拟合数据的同时，使模型权重尽可能小的目的。岭回归代价函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718120757313-b78690e0-012d-4731-a62f-4f53a4f52f47.png#averageHue=%23fcfcfc&clientId=u190cb7ce-e2d0-4&from=paste&height=201&id=u7439e0a7&originHeight=201&originWidth=594&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19872&status=done&style=none&taskId=u2dee49db-60ee-43e2-98bc-420f08bec4a&title=&width=594\" alt=\"image.png\"></p>\n<ul>\n<li>α&#x3D;0 时，岭回归退化为线性回归</li>\n</ul>\n<p><code>sklearn.linear_model.Ridge(alpha=1.0, fit_intercept=True, solver=&quot;auto&quot;, normal=False)</code></p>\n<ul>\n<li>具有 L2 正则化的线性回归</li>\n<li>alpha：正则化力度，取值：0<del>1  1</del>10</li>\n<li>solver：会根据数据自动选择优化方法<ul>\n<li>SAG：如果数据集、特征都比较大，选择该随机梯度下降优化</li>\n</ul>\n</li>\n<li>normalize：数据是否进行标准化<ul>\n<li>False：可以在 fit 之前调用 <code>preprocessing.StandardScaler</code>标准化数据</li>\n</ul>\n</li>\n<li>Ridge.coef_：回归权重</li>\n<li>Ridge.intercept_：回归偏置</li>\n<li>Ridge 方法相当于 <code>SGDRegressor(penalty=&#39;l2&#39;, loss=&#39;squared_loss&#39;)</code>，只不过 SGDRegressor 实现了一个普通的随机梯度下降学习，推荐使用 Ridge（实现了 SAG）</li>\n</ul>\n<p><code>sklearn.linear_model.RidgeCV(_BaseRidgeCV, RegressorMixin)</code></p>\n<ul>\n<li>具有 l2 正则化的线性回归，可以进行交叉验证</li>\n</ul>\n<p>正则化程度对权重系数的影响</p>\n<ul>\n<li>正则化力度越大，权重系数越小</li>\n<li>正则化力度越小，权重系数越大</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718534952750-6efe7c36-4edd-49bd-bdfd-0aa00c97e341.png#averageHue=%23faf9f9&clientId=u5226c25a-0953-4&from=paste&height=461&id=u96e6b681&originHeight=461&originWidth=594&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95979&status=done&style=none&taskId=u0cfa4f5c-889e-43ed-a086-c41e64ee09a&title=&width=594\" alt=\"image.png\"></p>\n<h4 id=\"Lasso-回归\"><a href=\"#Lasso-回归\" class=\"headerlink\" title=\"Lasso 回归\"></a>Lasso 回归</h4><p>代价函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718532174973-6a631726-d38a-4e12-a509-66df0150174d.png#averageHue=%23f9f9f9&clientId=u5226c25a-0953-4&from=paste&height=84&id=u915a905e&originHeight=84&originWidth=217&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6718&status=done&style=none&taskId=u2d52840d-0298-4b10-a594-a4b922088f9&title=&width=217\" alt=\"image.png\"></p>\n<ul>\n<li>倾向于完全消除不重要的权重</li>\n<li>代价函数在$Θ_i &#x3D; 0$处是不可导的。（两直线的交点是不可导的）</li>\n<li>解决方法：在$Θ_i &#x3D; 0$处用次梯度向量代替梯度，次梯度向量如下：</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718532488951-30e6db35-9d3e-4196-8147-5bb768bd211f.png#averageHue=%23f6f6f6&clientId=u5226c25a-0953-4&from=paste&height=161&id=u7088cea6&originHeight=161&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35597&status=done&style=none&taskId=ua767c09e-f445-461e-a80f-1f7a16b7fd1&title=&width=614\" alt=\"image.png\"></p>\n<ul>\n<li>能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）</li>\n</ul>\n<h4 id=\"Elastic-Net-弹性网络\"><a href=\"#Elastic-Net-弹性网络\" class=\"headerlink\" title=\"Elastic Net 弹性网络\"></a>Elastic Net 弹性网络</h4><p>弹性网络在岭回归和 Lasso 回归中进行了折中，通过混合比 r 进行控制：</p>\n<ul>\n<li>r&#x3D;0：变为岭回归</li>\n<li>r&#x3D;1：变为 Lasso 回归</li>\n</ul>\n<p>代价函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718533173398-292f6309-e00a-4170-8eda-321d1befb19c.png#averageHue=%23f7f7f7&clientId=u5226c25a-0953-4&from=paste&height=71&id=u6bc6cde7&originHeight=71&originWidth=325&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9631&status=done&style=none&taskId=ucad828f4-bb64-480a-9158-2f98ee0e4bc&title=&width=325\" alt=\"image.png\"></p>\n<h4 id=\"Early-Stopping\"><a href=\"#Early-Stopping\" class=\"headerlink\" title=\"Early Stopping\"></a>Early Stopping</h4><p>在验证错误率达到最小值时停止训练。</p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> Ridge, ElasticNet, Lasso</span><br></pre></td></tr></table></figure>\n<p>应避免使用朴素线性回归，而应对模型进行一定的正则化处理</p>\n<ul>\n<li>常用：岭回归</li>\n<li>假设只有少部分特征是有用的：<ul>\n<li>弹性网络</li>\n<li>Lasso </li>\n<li>一般来说，弹性网络的使用更为广泛，因为在特征维度高于训练样本数量，或 特征是强相关的情况下，Lasso 回归的表现不太稳定</li>\n</ul>\n</li>\n</ul>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h2 id=\"维灾难\"><a href=\"#维灾难\" class=\"headerlink\" title=\"维灾难\"></a>维灾难</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718119167705-27869d2d-9b38-4bfa-bb8f-50339eb06dd2.png#averageHue=%23f9f9f9&clientId=u190cb7ce-e2d0-4&from=paste&height=378&id=u3999592f&originHeight=378&originWidth=662&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88210&status=done&style=none&taskId=uaf94bcd9-8e06-40a5-ab73-3eadaaf62d6&title=&width=662\" alt=\"image.png\"><br>随着维度的增加，分类器性能逐步上升，到达某点之后，其性能便逐渐下降。<br>维度过多导致过拟合，发生了维灾难。</p>\n<h1 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h1><ul>\n<li>分类算法</li>\n</ul>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>广告点击率</li>\n<li>是否为垃圾邮件</li>\n<li>是否患病</li>\n<li>是否金融诈骗</li>\n<li>是否虚假账号</li>\n<li>属于两个类别之间的判断，解决二分类问题的利器</li>\n</ul>\n<h2 id=\"逻辑回归原理\"><a href=\"#逻辑回归原理\" class=\"headerlink\" title=\"逻辑回归原理\"></a>逻辑回归原理</h2><h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2024/jpeg/12527061/1718985161233-56f47dfe-753d-4e1e-8580-4260e12bae15.jpeg#averageHue=%23f5f4f3&clientId=uaabd6b20-084d-4&from=paste&height=134&id=u5f6e2c0b&originHeight=134&originWidth=856&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31444&status=done&style=none&taskId=uec8dc040-8c4b-4d9e-9eab-bd83fc060fc&title=&width=856\" alt=\"1718985153851.jpg\"><br>逻辑回归的输入是线性回归的输出</p>\n<h3 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h3><ul>\n<li>sigmoid 函数</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718536337805-472d7673-43fb-47d8-986b-85e8d57635a7.png#averageHue=%23fafaf9&clientId=u5226c25a-0953-4&from=paste&height=112&id=u66491726&originHeight=112&originWidth=315&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15811&status=done&style=none&taskId=u26ab4fda-7253-4164-a693-d5aa87b6528&title=&width=315\" alt=\"image.png\"></p>\n<ul>\n<li>判断标准<ul>\n<li>回归的结果输入到 sigmoid 函数当中</li>\n<li>输出结果：[0,1] 区间中的一个概率值，默认 0.5 为阈值，以概率进行分类</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718726184302-908f0905-ab82-4ecb-85bd-c7425dafec6e.png#averageHue=%23f9f9f9&clientId=u0ce174d5-4c70-4&from=paste&height=479&id=u0eaabcc5&originHeight=479&originWidth=612&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32416&status=done&style=none&taskId=ufabbf728-29a1-4531-8f80-c9ad90dca33&title=&width=612\" alt=\"image.png\"></p>\n<blockquote>\n<p>逻辑回归最终的分类是通过属于某个类别的概率值来判断是否属于某个类别，并且这个类别默认标记为1(正例),另外的一个类别会标记为0(反例)。（方便损失计算）<br>输出结果解释(重要)：假设有两个类别A，B，并且假设我们的概率值为属于A(1)这个类别的概率值。现在有一个样本的输入到逻辑回归输出结果0.55，那么这个概率值超过0.5，意味着我们训练或者预测的结果就是A(1)类别。那么反之，如果得出结果为0.3那么，训练或者预测结果就为B(0)类别。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718537008465-b4636258-7708-4b60-985e-0201b5e2c342.png#averageHue=%23f5f5f5&clientId=u5226c25a-0953-4&from=paste&height=206&id=uf4019354&originHeight=206&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63884&status=done&style=none&taskId=uc1de935d-b736-48c1-b153-6fd38ebe638&title=&width=638\" alt=\"image.png\"></p>\n<blockquote>\n<p>假设概率&gt;0.6 时为 A，概率小于 0.6 时为 B</p>\n</blockquote>\n<h3 id=\"损失\"><a href=\"#损失\" class=\"headerlink\" title=\"损失\"></a>损失</h3><p>逻辑回归的损失，称之为对数似然损失，公式如下：</p>\n<ul>\n<li>分开类别</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718537131561-369ff101-9608-4b71-8670-d95eb7704dfc.png#averageHue=%23f7f7f7&clientId=u5226c25a-0953-4&from=paste&height=87&id=u193e6687&originHeight=87&originWidth=508&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28079&status=done&style=none&taskId=u136ecf73-7b48-450b-a6e3-eb5fa4b0362&title=&width=508\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718538209583-4ec36b7d-e398-4fdc-a664-60239583e31f.png#averageHue=%23f9f7f6&clientId=u5226c25a-0953-4&from=paste&height=314&id=u1c39b3f0&originHeight=314&originWidth=419&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37570&status=done&style=none&taskId=u02b2a115-d9a5-407c-9835-8e588aca13a&title=&width=419\" alt=\"image.png\"></p>\n<blockquote>\n<p>假设 y&#x3D;1 时代表 A，y&#x3D;0 时代表 B<br>概率越大 是 A 的可能性越大，即 h(x)越大，-log(h(x))越小<br>概率越小 是 B 的可能性越大，即 h(x)越小，1-h(x) 越大，-log(1-h(x))越小<br>损失函数 cost 越小，精确率越高</p>\n</blockquote>\n<ul>\n<li>综合完整损失函数</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1718538248494-516fa530-f0c6-4cc5-b660-95aceaa983ec.png#averageHue=%23f8f8f8&clientId=u5226c25a-0953-4&from=paste&height=83&id=u8fe851dc&originHeight=83&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26498&status=done&style=none&taskId=uc7b6908b-ed1a-4858-8d5c-46ea1d3011e&title=&width=598\" alt=\"image.png\"></p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>使用梯度下降优化算法，去减少损失函数的值。这样去更新逻辑回归前面对应算法的权重参数，提升原本属于 1 类别的概率，降低原本属于 0 类别的概率</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p><code>sklearn.linear_model.LogisticRegression(solver=&#39;liblinear&#39;, penalty=&#39;l2&#39;, C=1.0)</code></p>\n<ul>\n<li>solver 可选参数：<code>[&#39;liblinear&#39;, &#39;sag&#39;, &#39;saga&#39;,&#39;newton-cg&#39;,&#39;lbfgs&#39;]</code><ul>\n<li>默认：’liblinear’ ，用于优化问题的算法</li>\n<li>对于小数据集来说，’liblinear’是个不错的选择，而 ‘sag’ 和 ‘saga’ 对于大型数据集会更快</li>\n<li>对于多类问题，只有 ‘newton-cg’，’sag’，’saga’ 和 ‘lbfgs’ 可以处理多项损失，’liblinear’仅限于 ‘one-versus-rest’ 分类</li>\n</ul>\n</li>\n<li>penalty：正则化的种类</li>\n<li>C：正则化力度<blockquote>\n<p>默认将类别数量少的当作正例</p>\n</blockquote>\n</li>\n</ul>\n<p><code>LogisticRegression</code>方法相当于 <code>SGDClassifier(loss=&#39;log&#39;,penalty=&#39;&#39;)</code>，SGDClassifier 实现了一个普通的随机梯度下降学习，而使用<code>LogisticRegression</code>（实现了 SAG）</p>\n<h2 id=\"案例-良-恶性肿瘤预测\"><a href=\"#案例-良-恶性肿瘤预测\" class=\"headerlink\" title=\"案例-良&#x2F;恶性肿瘤预测\"></a>案例-良&#x2F;恶性肿瘤预测</h2><blockquote>\n<p>数据描述<br>（1）699条样本，共11列数据，第一列用语检索的id，后9列分别是与肿瘤相关的医学特征，最后一列表示肿瘤类型的数值。<br>（2）包含16个缺失值，用”?”标出。</p>\n</blockquote>\n<figure class=\"highlight gcode\"><table><tr><td class=\"code\"><pre><span class=\"line\">过程：</span><br><span class=\"line\"><span class=\"number\">1.</span>获取数据</span><br><span class=\"line\"><span class=\"number\">2.</span>基本数据处理</span><br><span class=\"line\"><span class=\"number\">2.1</span> 缺失值处理</span><br><span class=\"line\"><span class=\"number\">2.2</span> 确定特征值,目标值</span><br><span class=\"line\"><span class=\"number\">2.3</span> 分割数据</span><br><span class=\"line\"><span class=\"number\">3.</span>特征工程<span class=\"comment\">(标准化)</span></span><br><span class=\"line\"><span class=\"number\">4.</span>机器学习<span class=\"comment\">(逻辑回归)</span></span><br><span class=\"line\"><span class=\"number\">5.</span>模型评估</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> preprocessing, model_selection, linear_model, metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.获取数据</span></span><br><span class=\"line\">names = [<span class=\"string\">&#x27;Sample code number&#x27;</span>, <span class=\"string\">&#x27;Clump Thickness&#x27;</span>, <span class=\"string\">&#x27;Uniformity of Cell Size&#x27;</span>, <span class=\"string\">&#x27;Uniformity of Cell Shape&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;Marginal Adhesion&#x27;</span>, <span class=\"string\">&#x27;Single Epithelial Cell Size&#x27;</span>, <span class=\"string\">&#x27;Bare Nuclei&#x27;</span>, <span class=\"string\">&#x27;Bland Chromatin&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;Normal Nucleoli&#x27;</span>, <span class=\"string\">&#x27;Mitoses&#x27;</span>, <span class=\"string\">&#x27;Class&#x27;</span>]</span><br><span class=\"line\">data = pd.read_csv(<span class=\"string\">&quot;https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data&quot;</span>, names=names)</span><br><span class=\"line\">data.head(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.数据处理</span></span><br><span class=\"line\"><span class=\"comment\"># 缺失值处理</span></span><br><span class=\"line\">data.replace(<span class=\"string\">&quot;?&quot;</span>, np.NaN, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data.dropna(inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 确定特征值和目标值</span></span><br><span class=\"line\">x = data.iloc[:, <span class=\"number\">1</span>: <span class=\"number\">10</span>]</span><br><span class=\"line\">y = data.loc[:, <span class=\"string\">&quot;Class&quot;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.分割数据集</span></span><br><span class=\"line\">x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.标准化</span></span><br><span class=\"line\"><span class=\"comment\"># 转换器</span></span><br><span class=\"line\">transformer = preprocessing.StandardScaler()</span><br><span class=\"line\">x_train = transformer.fit_transform(x_train)</span><br><span class=\"line\">x_test = transformer.fit_transform(x_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.机器学习-逻辑回归</span></span><br><span class=\"line\">estimator = linear_model.LogisticRegression(penalty=<span class=\"string\">&quot;l2&quot;</span>, C=<span class=\"number\">1.0</span>, solver=<span class=\"string\">&quot;liblinear&quot;</span>)</span><br><span class=\"line\">estimator.fit(x_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.模型评估</span></span><br><span class=\"line\">y_predict = estimator.predict(x_test)</span><br><span class=\"line\">score = estimator.score(x_test, y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;准确率：<span class=\"subst\">&#123;score&#125;</span>&quot;</span>)</span><br><span class=\"line\">err = metrics.mean_squared_error(y_test, y_predict)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;均方误差：&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 评估报告</span></span><br><span class=\"line\">ret = metrics.classification_report(y_test, y_predict, labels=[<span class=\"number\">2</span>,<span class=\"number\">4</span>], target_names=[<span class=\"string\">&quot;良性&quot;</span>,<span class=\"string\">&quot;恶性&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                 precision    recall  f1-score   support</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        良性       0.98      0.97      0.97        93</span></span><br><span class=\"line\"><span class=\"string\">        恶性       0.93      0.95      0.94        44</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    accuracy                           0.96       137</span></span><br><span class=\"line\"><span class=\"string\">   macro avg       0.96      0.96      0.96       137</span></span><br><span class=\"line\"><span class=\"string\">weighted avg       0.96      0.96      0.96       137</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在很多分类场景当中我们不一定只关注预测的准确率！！！！！<br>比如以这个癌症举例子！！！<strong>我们并不关注预测的准确率，而是关注在所有的样本当中，癌症患者有没有被全部预测（检测）出来。</strong></p>\n</blockquote>\n<h1 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h1><p><strong>决策树：是一种树形结构，其中每个内部节点表示一个属性上的判断，每个分支代表一个判断结果的输出，最后每个叶节点代表一种分类结果，本质是一颗由多个判断节点组成的树</strong>。<br><img src=\"images/%E7%9B%B8%E4%BA%B2%E5%AF%B9%E8%AF%9D.png\" alt=\"ç›¸äº²å¯¹è¯\"></p>\n<h2 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h2><p>物理学上，“混乱”程度的量度被称为熵；分子总是从有序趋向无序 是为熵增。<br>信息理论</p>\n<ol>\n<li>从信息的完整性上进行描述：</li>\n</ol>\n<ul>\n<li>当系统的有序状态一致时，数据越集中的地方熵值越小，数据越分散的地方熵值越大。</li>\n</ul>\n<ol start=\"2\">\n<li>从信息的有序性上进行的描述:</li>\n</ol>\n<ul>\n<li>当数据量一致时，系统越有序，熵值越低；系统越混乱或者分散，熵值越高。</li>\n</ul>\n<p><strong>“信息熵” (information entropy)是度量样本集合纯度最常用的一种指标。</strong></p>\n<p>假定当前样本集合 D 中第 k 类样本所占的比例为 𝑝𝑘<em>pk</em> (k &#x3D; 1, 2,. . . , |y|) ，𝑝𝑘&#x3D;𝐶𝑘𝐷<em>pk</em>&#x3D;<em>DCk</em>, D为样本的所有数量，𝐶𝑘_Ck_为第k类样本的数量。<br>则 D的信息熵定义为(（log是以2为底，lg是以10为底）:**<img src=\"https://cdn.nlark.com/yuque/0/2024/png/12527061/1719226594417-11cfa4ee-f075-4a4a-bedf-d970ccc3a2b3.png#averageHue=%23f7f7f7&clientId=u5b53ae38-aefd-4&from=drop&id=u8bd4af7e&originHeight=126&originWidth=1552&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30007&status=done&style=none&taskId=ua1455a79-03d9-438a-b612-e9ca5dd1138&title=\" alt=\"公式1.png\"><br>信息熵 Ent(D)的值越小，则 D 的纯度越高。</p>\n<blockquote>\n<p>当每个事件概率相同时，熵最大，这件事越不确定</p>\n</blockquote>\n<h2 id=\"决策树的划分依据\"><a href=\"#决策树的划分依据\" class=\"headerlink\" title=\"决策树的划分依据\"></a>决策树的划分依据</h2><h3 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h3><p><strong>信息增益</strong>：以某特征划分数据集前后的熵的差值。<br>熵可以表示样本集合的不确定性，熵越大，样本的不确定性就越大。<br><strong>使用划分前后集合熵的差值来衡量使用当前特征对于样本集合D划分效果的好坏</strong> 。<br><strong>信息增益 &#x3D; entroy(前) - entroy(后)</strong></p>\n<blockquote>\n<p>注：信息增益表示得知特征X的信息而使得类Y的信息熵减少的程度</p>\n</blockquote>\n<p>特征a对训练数据集D的信息增益Gain(D,a),定义为<strong>集合D的信息熵Ent(D)</strong> 与<strong>给定特征a条件下D的信息条件熵𝐸𝑛𝑡(𝐷∣𝑎)</strong> 之差，即公式为：</p>\n<p><img src=\"images/%E5%85%AC%E5%BC%8F2.png\" alt=\"image-20190701180230634\"></p>\n<p>公式的详细解释：<br>信息熵的计算：<br><img src=\"images/%E5%85%AC%E5%BC%8F3.png\" alt=\"image-20190701180248293\"></p>\n<p>条件熵的计算：<br><img src=\"images/%E5%85%AC%E5%BC%8F4.png\" alt=\"image-20190701180307869\"></p>\n<p>其中：<br>𝐷𝑣D​v​​ 表示a属性中第v个分支节点包含的样本数<br>𝐶𝑘𝑣C​kv​​ 表示a属性中第v个分支节点包含的样本数中，第k个类别下包含的样本数</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>如下图，第一列为论坛号码，第二列为性别，第三列为活跃度，最后一列用户是否流失。<br>我们要解决一个问题：<strong>性别和活跃度两个特征，哪个对用户流失影响更大</strong>？</p>\n<p><img src=\"images/entropy_example1.png\" alt=\"image-20190214123146695\"></p>\n<p>通过计算信息增益可以解决这个问题，统计上右表信息<br>其中Positive为正样本（已流失），Negative为负样本（未流失），下面的数值为不同划分下对应的人数。<br>可得到三个熵：</p>\n<p><strong>a.计算类别信息熵</strong><br>整体熵：<br><img src=\"images/%E5%85%AC%E5%BC%8F5.png\" alt=\"image-20190701180330245\"></p>\n<p><strong>b.计算性别属性的信息熵(a&#x3D;”性别”)</strong><br><img src=\"images/%E6%80%A7%E5%88%AB%E4%BF%A1%E6%81%AF%E7%86%B5.png\" alt=\"image-20190701175350303\"></p>\n<p><strong>c.计算性别的信息增益(a&#x3D;”性别”)</strong><br><img src=\"images/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A1.png\" alt=\"image-20190701173018397\"></p>\n<p><strong>b.计算活跃度属性的信息熵(a&#x3D;”活跃度”)</strong><br><img src=\"images/%E6%B4%BB%E8%B7%83%E4%BF%A1%E6%81%AF%E7%86%B5.png\" alt=\"image-20190701175748466\"></p>\n<p><strong>c.计算活跃度的信息增益(a&#x3D;”活跃度”)</strong><br><img src=\"images/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A2.png\" alt=\"image-20190701173116116\"></p>\n<p><strong>活跃度的信息增益比性别的信息增益大</strong>，也就是说，<strong>活跃度对用户流失的影响比性别大。</strong> 在做特征选择或者数据分析的时候，我们应该重点考察活跃度这个指标。</p>\n<blockquote>\n<p>信息增益存在的问题：偏向于选择类别较多的特征进行划分</p>\n</blockquote>\n<h3 id=\"信息增益比\"><a href=\"#信息增益比\" class=\"headerlink\" title=\"信息增益比\"></a>信息增益比</h3><p>在上面的介绍中，有意忽略了”编号”这一列.若把”编号”也作为一个候选划分属性，则根据信息增益公式可计算出它的信息增益为 0.9182，远大于其他候选划分属性。但是很明显这么分类,最后出现的结果不具有泛化效果.无法对新样本进行有效预测.</p>\n<p><strong>信息增益准则对可取值数目较多的属性有所偏好</strong>，为减少这种偏好可能带来的不利影响，著名的 <strong>C4.5 决策树算法 不直接使用信息增益，而是使用”增益率” (gain ratio) 来选择最优划分属性.</strong></p>\n<p><strong>增益率：</strong> 增益率是用信息增益Gain(D, a)和属性a的信息熵 的比值来共同定义的。</p>\n<p><img src=\"images/%E5%85%AC%E5%BC%8F6.png\" alt=\"image-20190701180359267\"></p>\n<blockquote>\n<p>属性 a 的可能取值数目越多(即 V 越大)，则 IV(a) 的值通常会越大.</p>\n</blockquote>\n<h3 id=\"基尼值和基尼指数\"><a href=\"#基尼值和基尼指数\" class=\"headerlink\" title=\"基尼值和基尼指数\"></a>基尼值和基尼指数</h3>","tags":["机器学习"]}]