<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神秘的张少爷</title>
  
  <subtitle>Stay Hungry，Stay Foolish</subtitle>
  <link href="https://mygodonload.github.io/atom.xml" rel="self"/>
  
  <link href="https://mygodonload.github.io/"/>
  <updated>2024-06-19T08:06:56.145Z</updated>
  <id>https://mygodonload.github.io/</id>
  
  <author>
    <name>神秘的张少爷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mygodonload.github.io/2024/06/19/hello-world/index.html"/>
    <id>https://mygodonload.github.io/2024/06/19/hello-world/index.html</id>
    <published>2024-06-19T07:32:48.898Z</published>
    <updated>2024-06-19T08:06:56.145Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/themes/">主题</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mygodonload.github.io/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index.html"/>
    <id>https://mygodonload.github.io/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index.html</id>
    <published>2024-06-19T07:32:48.742Z</published>
    <updated>2021-05-19T14:58:02.034Z</updated>
    
    <content type="html"><![CDATA[<p>  学习资源：<a href="https://www.bilibili.com/video/BV1XZ4y1G7No?p=30">https://www.bilibili.com/video/BV1XZ4y1G7No?p=30</a></p><p>简单示例</p><ul><li>main.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">// 引用包， .h 为头文件，声明同名.c文件中的方法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;crypt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义宏，建议大写，与变量进行区分</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+b=%d\n&quot;</span>, Add(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> r=<span class="number">0.0f</span>;  <span class="comment">//定义变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;r);  <span class="comment">//键盘输入并赋值给r，相当于python的input</span></span><br><span class="line">    <span class="comment">// &amp; 在C语言中为 1.取地址 2.逻辑运算符：与</span></span><br><span class="line">    <span class="type">float</span> s = area(r);  <span class="comment">//定义变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s=%f\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆的面积：%.2f\n&quot;</span>, area(r));</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> data1=<span class="number">0</span>, data2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;data1, &amp;data2);  <span class="comment">//多个数据输入，格式与python的input相同</span></span><br><span class="line">    <span class="comment">// scanf(&quot;%d:%d&quot;, &amp;data1, &amp;data2);</span></span><br><span class="line">    <span class="comment">// scanf(&quot;%d#%d&quot;, &amp;data1, &amp;data2);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data1 = %d , data2 = %d \n&quot;</span>, data1, data2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两数之和为：%d&quot;</span>, Add(data1, data2));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>crypt.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEMO_CRYPT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEMO_CRYPT_H</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">area</span><span class="params">(<span class="type">float</span> r)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//DEMO_CRYPT_H</span></span></span><br></pre></td></tr></table></figure><ul><li>crypt.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;crypt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义宏，建议大写，与变量进行区分</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">area</span><span class="params">(<span class="type">float</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * r * r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>char、short、int、long、float、double、</p><p>unsigned、signed、struct、union、enum、void</p></li><li><p>结构体struct   共用体union</p><ul><li>结构体成员拥有独立的内存空间</li><li>共用体成员共用同一内存空间</li></ul></li><li><p>enum枚举  void 无类型</p></li><li><p>auto 自动类型</p></li><li><p>register 寄存器变量</p><ul><li><p>显式定义寄存器变量，将变量存入寄存器中</p><p>未声明寄存器类型，系统会将频繁使用的变量存入寄存器中</p></li><li><p>寄存器类型变量 没有内存地址， 取地址符&amp;</p></li></ul></li><li><p>static 静态变量</p></li><li><p>const 只读变量</p></li><li><p>sizeof  测类型大小</p></li><li><p>typedef  为已有类型 起别名   相当于python的as</p></li><li><p>volatile 防止编译器优化</p><p>每次变量取值均从内存中获取，不存入编译器</p></li><li><p>不以f结尾的浮点数 为double类型，如3.14</p><p>已f结尾的浮点数  weifloat类型，如3.14f</p></li></ul><h4 id="char类型说明"><a href="#char类型说明" class="headerlink" title="char类型说明"></a>char类型说明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">// 4字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">// 1字节</span></span><br></pre></td></tr></table></figure><blockquote><p>字符在内存中是以ASCII码形式存储，而ASCII码是int类型</p></blockquote><p><strong>接收输入</strong></p><ul><li>scanf()</li><li>getchar()</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;获取一个字符：&quot;</span>);</span><br><span class="line">    <span class="type">char</span> ch1, ch2;</span><br><span class="line"><span class="comment">//    scanf(&quot;%c&quot;, &amp;ch);  只能获取第一个字符</span></span><br><span class="line">    ch1 = getchar();     <span class="comment">//按顺序获取字符</span></span><br><span class="line">    getchar();           <span class="comment">//舍弃一个字符</span></span><br><span class="line">    ch2 = getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch1=%c\n&quot;</span>, ch1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch1=%d\n&quot;</span>, ch1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch1=%c\n&quot;</span>, ch2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch1=%d\n&quot;</span>, ch2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>转义字符</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;##%c##\n&quot;</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;##%90##\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;##%%90##\n&quot;</span>);  <span class="comment">// 两个%号</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:%d\n&quot;</span>, <span class="string">&#x27;0&#x27;</span>);  <span class="comment">// 单引号代表字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B:%d\n&quot;</span>, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;C:%d\n&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;D:%d\n&quot;</span>, <span class="string">&quot;0&quot;</span>);  <span class="comment">// 双引号代表字符串，读取的是字符串首字符在内存中的地址，字符串在内存中以\0结尾</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// 4  存储的是ASCII码，int类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// 2  字符串占用内存存储单元数量，结尾存在\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;ab&quot;</span>)); <span class="comment">// 3  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##\##</span><br><span class="line">####</span><br><span class="line">##%<span class="number">90</span>##</span><br><span class="line">A:<span class="number">48</span></span><br><span class="line">B:<span class="number">0</span></span><br><span class="line">C:<span class="number">0</span></span><br><span class="line">D:<span class="number">4210733</span></span><br></pre></td></tr></table></figure><blockquote><p>“ab” 字符串作为类型 ，代表的是字符串占空间的大小</p><p>“ab”字符串作为地址， 代表的是字符串首元素的内存地址</p></blockquote><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> data1 = <span class="number">-20</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data2 = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, data1 + data2);  <span class="comment">//转换为无符号数参加计算，输出结果为什么是有符号整数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(data1 + data2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有符号与无符号整数参加计算，将有符号数转换为无符号数</span></span><br><span class="line">    <span class="comment">//data1转换为无符号数（-20的补码，为正数）</span></span><br><span class="line">    <span class="comment">// -20的补码 + 10  = 正数</span></span><br><span class="line">    <span class="keyword">if</span> (data1 + data2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大于&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小于&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">short</span> data = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch + ch));  <span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch + data));  <span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(data + data));  <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>char类型与short类型进行计算时均会转换为int类型</p></blockquote><ul><li>强制类型转换</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//float x = 3.14;</span></span><br><span class="line">    <span class="type">float</span> x = <span class="number">3.14f</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//j = x;  //强制将float类型转换为int类型</span></span><br><span class="line">    j = (<span class="type">int</span>)x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;j=%d\n&quot;</span>, j);  <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><h5 id="左移运算符"><a href="#左移运算符" class="headerlink" title="左移运算符"></a>左移运算符</h5><ul><li>左边丢弃，右边补0</li></ul><h5 id="右移运算符"><a href="#右移运算符" class="headerlink" title="右移运算符"></a>右移运算符</h5><ul><li>逻辑右移：右边丢弃，左边补0</li><li>算数右移<ul><li>无符号数：右边丢弃，左边补0</li><li>有符号数：<ul><li>正数：右边丢弃，左边补0</li><li>负数：右边丢弃，左边补1</li></ul></li></ul></li></ul><h5 id="与"><a href="#与" class="headerlink" title="与 &amp;"></a>与 &amp;</h5><ul><li>同and ：同True 为True</li></ul><h5 id="或"><a href="#或" class="headerlink" title="或 |"></a>或 |</h5><ul><li>同or： 同False 为False</li></ul><h5 id="异或"><a href="#异或" class="headerlink" title="异或 ^"></a>异或 ^</h5><ul><li>同为False  异为True</li></ul><h5 id="非"><a href="#非" class="headerlink" title="非 ~"></a>非 ~</h5><ul><li>取反</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1606837294804.png" alt="1606837294804"></p><p>按位置0</p><ul><li><code>data &amp; ~(0x01&lt;&lt;5 | 0x01&lt;&lt;1)</code></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/Users\神秘的张少爷\AppData\Roaming\Typora\typora-user-images\1606837549579.png" alt="1606837549579"></p><p>按位置1</p><ul><li><code>data | (0x01&lt;&lt;4 | 0x01&lt;&lt;3)</code></li></ul><h4 id="条件运算符（三目运算符）"><a href="#条件运算符（三目运算符）" class="headerlink" title="条件运算符（三目运算符）"></a>条件运算符（三目运算符）</h4><ul><li><p><code>表达式 ？ 值1：值2</code></p><p>与if-else类似，表达式为True，取值1；否则取值2</p></li></ul><h4 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h4><ul><li><pre><code>int data1 = 0;int data2 = 0;data1 = 3,4,5,6;  // 3 赋值运算符优先级大于逗号运算符，data1 = 3被优先执行data2 = (3,4,5,6);  //6 （）优先级最高，最后的值赋值给data2<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 复合运算符</span><br><span class="line"></span><br><span class="line">- `+=  -=  /=  %=`</span><br><span class="line"></span><br><span class="line">#### 自增、自减运算符</span><br><span class="line"></span><br><span class="line">- `++i   --i`  先加、减，后使用 </span><br><span class="line"></span><br></pre></td></tr></table></figure>int i = 3;int j = 0;j = ++i;  //先加、减 i+=1， 后使用j=i// i = 4, j = 4<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- `i++  i--`  先使用，后加、减</span><br><span class="line"></span><br></pre></td></tr></table></figure>int i = 3;int j = 0;j = i++;  //先使用j=i，后加、减 i+=1， // i = 4, j = 3<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  <span class="built_in">int</span> i = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">int</span> j = <span class="number">3</span>;</span><br><span class="line">  i++;</span><br><span class="line">  ++j;</span><br><span class="line">  <span class="comment">// i == j</span></span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><ul><li><code>for(初始语句；条件语句；步进语句)&#123;&#125;</code></li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><h4 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h4><ul><li><p>需要有标记</p></li><li><pre><code class="c">goto here;...here:  ...<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">### 数组</span><br><span class="line"></span><br><span class="line">![<span class="number">1607244181497</span>](C语言学习\<span class="number">1607244181497.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607243977057</span>](C语言学习\<span class="number">1607243977057.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607244111066</span>](C语言学习\<span class="number">1607244111066.</span>png)</span><br><span class="line"></span><br><span class="line">#### 字符数组</span><br><span class="line"></span><br><span class="line">![<span class="number">1607261099907</span>](C语言学习\<span class="number">1607261099907.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607262653762</span>](C语言学习\<span class="number">1607262653762.</span>png)</span><br><span class="line"></span><br><span class="line">&gt; %s 格式化输出字符数组，容易因为结尾没有‘\<span class="number">0</span>’而造成内存溢出 出现乱码</span><br><span class="line"></span><br><span class="line">![<span class="number">1607262690877</span>](C语言学习\<span class="number">1607262690877.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607261485428</span>](C语言学习\<span class="number">1607261485428.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607263503498</span>](C语言学习\<span class="number">1607263503498.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607265819739</span>](C语言学习\<span class="number">1607265819739.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607266552102</span>](C语言学习\<span class="number">1607266552102.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607266727637</span>](C语言学习\<span class="number">1607266727637.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607267031558</span>](C语言学习\<span class="number">1607267031558.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607267204278</span>](C语言学习\<span class="number">1607267204278.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607267233986</span>](C语言学习\<span class="number">1607267233986.</span>png)</span><br><span class="line"></span><br><span class="line">&gt; 只接收字符数组元素数量 - <span class="number">1</span> 个输入的字符</span><br><span class="line"></span><br><span class="line">**字符大小写转换**</span><br><span class="line"></span><br><span class="line">![<span class="number">1607271049077</span>](C语言学习\<span class="number">1607271049077.</span>png)</span><br><span class="line"></span><br><span class="line">#### 二位字符数组</span><br><span class="line"></span><br><span class="line">![<span class="number">1607272133619</span>](C语言学习\<span class="number">1607272133619.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607272599937</span>](C语言学习\<span class="number">1607272599937.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607272578037</span>](C语言学习\<span class="number">1607272578037.</span>png)</span><br><span class="line"></span><br><span class="line">### 函数</span><br><span class="line"></span><br><span class="line">- 函数返回值类型 函数名 形参名 形参类型</span><br><span class="line"></span><br><span class="line">**定义无参函数**</span><br><span class="line"></span><br><span class="line">![<span class="number">1607619229810</span>](C语言学习\<span class="number">1607619229810.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![<span class="number">1607870440160</span>](C语言学习\<span class="number">1607870440160.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1607870517891</span>](C语言学习\<span class="number">1607870517891.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 内存</span><br><span class="line"></span><br><span class="line">- 内存布局</span><br><span class="line"></span><br><span class="line">![<span class="number">1607875274102</span>](C语言学习\<span class="number">1607875274102.</span>png)</span><br><span class="line"></span><br><span class="line">### 静态变量</span><br><span class="line"></span><br><span class="line">#### 普通局部变量</span><br><span class="line"></span><br><span class="line">- 未初始化，则内容不确定</span><br><span class="line"></span><br><span class="line">#### 普通全局变量</span><br><span class="line"></span><br><span class="line">- 未初始化，则内容为<span class="number">0</span></span><br><span class="line">- 使用全局变量时，加extern声明</span><br><span class="line"></span><br><span class="line">#### 静态局部变量</span><br><span class="line"></span><br><span class="line">- static修饰</span><br><span class="line">- 作用范围：离他最近的&#123;&#125;中有效</span><br><span class="line">- 生命周期：整个进程，程序结束后才被释放；脱离最近局部代码块后虽不可识别，但内存未被释放</span><br><span class="line">- 存储在 全局区</span><br><span class="line">- 未初始化，则内容为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">![<span class="number">1608223319449</span>](C语言学习\<span class="number">1608223319449.</span>png)</span><br><span class="line"></span><br><span class="line">#### 静态全局变量</span><br><span class="line"></span><br><span class="line">- 作用范围：当前源文件有效，不能在其他文件中使用</span><br><span class="line">- 生命周期：整个进程</span><br><span class="line">- 存储在 全局区</span><br><span class="line">- 未初始化，则内容为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">### 全局函数（普通函数）  静态函数（局部函数）</span><br><span class="line"></span><br><span class="line">#### 全局函数</span><br><span class="line"></span><br><span class="line">- 其他文件可以使用，加extern</span><br><span class="line"></span><br><span class="line">#### 静态函数</span><br><span class="line"></span><br><span class="line">- 只能在当前文件中使用</span><br><span class="line"></span><br><span class="line">&gt; 如果想在其他文件中调用静态函数，需要将静态函数封装在同一文件的全局函数中。</span><br><span class="line"></span><br><span class="line">### 预处理</span><br><span class="line"></span><br><span class="line">![<span class="number">1608225098348</span>](C语言学习\<span class="number">1608225098348.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1608225478865</span>](C语言学习\<span class="number">1608225478865.</span>png)</span><br><span class="line"></span><br><span class="line">#### 宏（define）</span><br><span class="line"></span><br><span class="line">##### 不带参数的宏</span><br><span class="line"></span><br><span class="line">- 定义 `#define PI <span class="number">3.14</span>f`</span><br><span class="line">- 只在当前文件有效</span><br><span class="line">- 终止宏的作用范围   `undef PI`</span><br><span class="line"></span><br><span class="line">##### 带参数的宏（宏函数）</span><br><span class="line"></span><br><span class="line">- 在预处理阶段进行替换</span><br><span class="line">- 在执行代码的时候没有函数调用的过程，不需要函数的出入栈，节约时间</span><br><span class="line">- 空间 替换 时间， 在所有调用的位置进行宏的展开，浪费空间，节约时间</span><br><span class="line"></span><br><span class="line">![<span class="number">1608384787549</span>](C语言学习\<span class="number">1608384787549.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1608396106145</span>](C语言学习\<span class="number">1608396106145.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1608397970594</span>](C语言学习\<span class="number">1608397970594.</span>png)</span><br><span class="line"></span><br><span class="line">### 条件编译</span><br><span class="line"></span><br><span class="line">- 一般情况下，源程序中所有的行都要参加编译，但有时希望对部分源程序行只在满足一定条件时才编译，即对这部分源程序行指定编译条件。</span><br><span class="line"></span><br><span class="line">#### 测试存在  ifdef</span><br><span class="line"></span><br><span class="line">![<span class="number">1608446635064</span>](C语言学习\<span class="number">1608446635064.</span>png)</span><br><span class="line"></span><br><span class="line">#### 测试不存在   ifndef</span><br><span class="line"></span><br><span class="line">![<span class="number">1608446668407</span>](C语言学习\<span class="number">1608446668407.</span>png)</span><br><span class="line"></span><br><span class="line">#### 根据表达式定义</span><br><span class="line"></span><br><span class="line">![<span class="number">1608446689040</span>](C语言学习\<span class="number">1608446689040.</span>png)</span><br><span class="line"></span><br><span class="line">**通过条件编译控字符串大小写转换**</span><br><span class="line"></span><br><span class="line">![<span class="number">1608458866921</span>](C语言学习\<span class="number">1608458866921.</span>png)</span><br><span class="line"></span><br><span class="line">![<span class="number">1608458908294</span>](C语言学习\<span class="number">1608458908294.</span>png)</span><br><span class="line"></span><br><span class="line">### 防止头文件重复包含</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> `#pragma once` 所有文件首行</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> C/C++的标准制定</span><br><span class="line"></span><br><span class="line">   - ```c</span><br><span class="line">     #ifndef 宏</span><br><span class="line">     #define 宏</span><br><span class="line">      头文件具体内容</span><br><span class="line">     #endif</span><br></pre></td></tr></table></figure> - ![1608470598938](C语言学习\1608470598938.png)</code></pre></li></ul><h3 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608475726689.png" alt="1608475726689"></p><blockquote><p><font color="red">无符号数的正数</font> ：原码 &#x3D; 反码 &#x3D; 补码</p><p>任何数据在计算机中都是以<font color="red">补码</font>的形式存储的</p></blockquote><p><strong>计算机为什么使用补码</strong>：</p><ul><li>将减法运算变为加法运算</li><li>统一了0的编码（-0 与 +0）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608476674688.png" alt="1608476674688"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608481254024.png" alt="1608481254024"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608481282244.png" alt="1608481282244"></p><h4 id="存储-读取"><a href="#存储-读取" class="headerlink" title="存储 读取"></a>存储 读取</h4><ul><li><p>存</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608483319025.png" alt="1608483319025"></p><blockquote><p>16进制：若提前声明为有符号数，则首字符小于8为正，大于等于8（即8到F）为负</p></blockquote></li><li><p>取</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608484025200.png" alt="1608484025200"></p></li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>指针即地址</li></ul><h4 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h4><ul><li><p>本质是变量， 存放的是内存地址，在32位平台 内存地址为4字节</p></li><li><p>*p 是 指针变量p的解引用</p></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608651473443.png" alt="1608651473443"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608651563083.png" alt="1608651563083"></p><h4 id="指针变量的类型"><a href="#指针变量的类型" class="headerlink" title="指针变量的类型"></a>指针变量的类型</h4><p>int *p</p><ul><li>指针变量 自身类型  <code>int *</code></li><li>指针变量 指向的类型  <code>int</code></li></ul><p>有两种存储方式：（由系统决定，只使用一种）</p><ul><li><p>正向存储</p></li><li><p>反向存储 （绝大多数系统）</p><p>由低位向高位存储   int  123456  高位（1） –&gt; 低位（6）</p></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608652448811.png" alt="1608652448811"></p><h4 id="指针变量的宽度"><a href="#指针变量的宽度" class="headerlink" title="指针变量的宽度"></a>指针变量的宽度</h4><ul><li>由指向的类型  的长度决定</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608652781547.png" alt="1608652781547"></p><blockquote><p>p : 0x01020304</p><p>p2: 0x0304</p><p>p3: 0x04</p></blockquote><h4 id="指针变量的跨度"><a href="#指针变量的跨度" class="headerlink" title="指针变量的跨度"></a>指针变量的跨度</h4><ul><li>由指向的类型  的长度决定</li><li>下一个相同类型 值的地址</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653323759.png" alt="1608653323759"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653600141.png" alt="1608653600141"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653646644.png" alt="1608653646644"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1608653880272.png" alt="1608653880272"></p><h4 id="指针变量的初始化"><a href="#指针变量的初始化" class="headerlink" title="指针变量的初始化"></a>指针变量的初始化</h4><blockquote><p>未初始化的后果: 因访问非法内存，会主动杀死进程，不会抛出异常</p></blockquote><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614514160173.png" alt="1614514160173"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614516967359.png" alt="1614516967359"></p><blockquote><p>int num &#x3D; 10;</p><p>num的类型是int类型</p><p>&amp;num的类型是int *类型   int *p &#x3D; &amp;num</p><p>int *p;</p><p>&amp;p –&gt; int **</p></blockquote><h4 id="指针注意事项"><a href="#指针注意事项" class="headerlink" title="指针注意事项"></a>指针注意事项</h4><ol><li><p>void num; 错误，不能定义变量空间大小， 不能开辟有效空间</p></li><li><p>void *p； 正确，void *为指针变量，能够正确开辟4字节空间</p><p>p可以保存任意一级指针， 任意类型</p></li></ol><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614525130058.png" alt="1614525130058"></p><blockquote><p>指针类型为void *，无指针宽度， 无法读取指针指向值</p></blockquote><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528807601.png" alt="1614528807601"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528888660.png" alt="1614528888660"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614528967534.png" alt="1614528967534"></p><h3 id="数组元素的指针"><a href="#数组元素的指针" class="headerlink" title="数组元素的指针"></a>数组元素的指针</h3><ul><li><p>arr[i]   arr(arr为首元素地址) + i </p><p>arr[3][-2] &#x3D; arr[1]       arr + 3 + (-2)</p></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614875309724.png" alt="1614875309724"></p><h4 id="arr-与-arr的区别"><a href="#arr-与-arr的区别" class="headerlink" title="arr 与 &amp;arr的区别"></a>arr 与 &amp;arr的区别</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614876238015.png" alt="1614876238015"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1614876416343.png" alt="1614876416343"></p><h4 id="指向同一数组的两个指针变量之间的关系"><a href="#指向同一数组的两个指针变量之间的关系" class="headerlink" title="指向同一数组的两个指针变量之间的关系"></a>指向同一数组的两个指针变量之间的关系</h4><ul><li>指向同一数组的两个指针变量相减  返回的是相差的元素个数</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615010292932.png" alt="1615010292932"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615008207864.png" alt="1615008207864"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615010272100.png" alt="1615010272100"></p><h3 id="数组的-与-的关系"><a href="#数组的-与-的关系" class="headerlink" title="数组的[]与 *() 的关系"></a>数组的<font color="red">[]</font>与<font color="red"> *() </font>的关系</h3><ul><li>arr[i]  &#x3D;&#x3D;  *(arr + i)</li></ul><h3 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h3><ul><li>静态数组 与 动态数组</li></ul><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针<font color="red">数组</font></h3><ul><li>元素为指针的数组</li><li>int *p[5]  本质：数组p[5]，元素类型 int *</li><li>初始化  int *p[5] &#x3D; [10, 20, 30]</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615032483941.png" alt="1615032483941"></p><blockquote><p>字符串本质上是数组<br>arr实际上是一个二维数组</p></blockquote><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组<font color="red">指针</font></h3><ul><li>int (*p)[5]   本质：指针p，指向值类型 int arr[5]</li><li>p的指向值类型是数组，指针宽度为数组长度</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615020181846.png" alt="1615020181846"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615021783324.png" alt="1615021783324"></p><h3 id="二维数组分析"><a href="#二维数组分析" class="headerlink" title="二维数组分析"></a>二维数组分析</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615029770767.png" alt="1615029770767"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615030250630.png" alt="1615030250630"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615031635199.png" alt="1615031635199"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615913563189.png" alt="1615913563189"></p><h4 id="二维数组与一维数组的关系"><a href="#二维数组与一维数组的关系" class="headerlink" title="二维数组与一维数组的关系"></a>二维数组与一维数组的关系</h4><ul><li><font color="red">任何维度的数组在物理存储上都是一维的</font></li></ul><p>通过一维数组的方式访问二维数组</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615032184224.png" alt="1615032184224"></p><h3 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615037325544.png" alt="1615037325544"></p><h3 id="指针作为函数参数"><a href="#指针作为函数参数" class="headerlink" title="指针作为函数参数"></a>指针作为函数参数</h3><ul><li>如果想在<font color="blue">函数内部</font><font color="red">修改</font><font color="blue">外部变量</font>的值，就需要将函数外部变量的地址传递给函数（以指针作为函数的参数）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615038526488.png" alt="1615038526488"></p><p>修改指针指向</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615046652395.png" alt="1615046652395"></p><h3 id="一维数组名作为函数参数"><a href="#一维数组名作为函数参数" class="headerlink" title="一维数组名作为函数参数"></a>一维数组名作为函数参数</h3><p> <img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615049857483.png" alt="1615049857483"></p><h3 id="二位数组作为函数参数"><a href="#二位数组作为函数参数" class="headerlink" title="二位数组作为函数参数"></a>二位数组作为函数参数</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615139054540.png" alt="1615139054540"></p><h3 id="指针作为函数返回值"><a href="#指针作为函数返回值" class="headerlink" title="指针作为函数返回值"></a>指针作为函数返回值</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141215968.png" alt="1615141215968"></p><ul><li>使用静态变量 （静态变量在进程执行结束释放）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141331137.png" alt="1615141331137"></p><h3 id="函数名为函数入口地址"><a href="#函数名为函数入口地址" class="headerlink" title="函数名为函数入口地址"></a>函数名为函数入口地址</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141926710.png" alt="1615141926710"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615141991894.png" alt="1615141991894"></p><h3 id="函数名作为参数"><a href="#函数名作为参数" class="headerlink" title="函数名作为参数"></a>函数名作为参数</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615393707171.png" alt="1615393707171"></p><h3 id="动态内存申请（堆区操作函数）"><a href="#动态内存申请（堆区操作函数）" class="headerlink" title="动态内存申请（堆区操作函数）"></a>动态内存申请（堆区操作函数）</h3><h4 id="分配内存空间函数-malloc"><a href="#分配内存空间函数-malloc" class="headerlink" title="分配内存空间函数 malloc"></a>分配内存空间函数 malloc</h4><ul><li><code>void *malloc(unsigned int num_bytes);</code>   申请内存地址 存储数据类型不确定  num_size:空间大小的字节数</li><li>调用：<code>(类型说明符 *)malloc(size)</code>   必须做强制类型转换，指定数据类型</li><li>在内存的动态存储器（堆区）中分配长度为size字节的连续区域，用来存储 <strong>类型指定说明符</strong>指定的类型</li><li>函数原型返回<code>void *</code>指针，使用时必须做强制类型转换，指定数据类型</li><li>分配的内存空间内容不确定（原有数据），使用memset初始化</li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li>分配空间的起始地址 （分配成功）</li><li>NULL （分配失败）</li></ul><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>在调用<code>malloc</code>之后，一定要判断 内存空间是否申请成功</li><li>多次申请的内存，内存地址不一定时连续的</li></ul><h4 id="释放内存函数-free函数"><a href="#释放内存函数-free函数" class="headerlink" title="释放内存函数  free函数"></a>释放内存函数  free函数</h4><ul><li>头文件 ： #include&lt;stdlib.h&gt;</li><li><code>void free(void *ptr)</code></li><li>说明：free函数释放ptr指向的内存</li><li>注意：<strong>ptr指向的内存必须是malloc calloc relloc动态申请的内存</strong>，即只能释放堆区空间</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615482186552.png" alt="1615482186552"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li>根据用户输入，动态定义数组空间大小</li></ol><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615484129779.png" alt="1615484129779"></p><h4 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h4><ul><li><code>void *calloc(size_t nmemb, size_t size);</code></li><li>在堆区中，申请nmemb块，每块的大小为size个字节的连续区域</li><li><code>char *p = (char *)calloc(5, 100)</code></li><li><code>calloc</code>函数申请的内存自动初始化为0</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615643898218.png" alt="1615643898218"></p><h4 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h4><ul><li>动态追加或减少空间</li><li><code>void *realloc(void *s, unsigned int newsize);</code></li><li>在原先s指向的内存基础上重新申请内存，新的内存大小为new_size个字节，如果原先内存后面有足够大的空间，就追加，如果后面的内存空间不足，则realloc函数会在堆区找一个newsize个字节大小的内存申请，将原内存中的内容拷贝过来，然后释放原先的内存，最后返回新内存的地址。</li><li>s：原内存空间首地址； newsize：新申请的空间大小</li><li>返回值：新申请空间的首地址</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615653704339.png" alt="1615653704339"></p><h4 id="堆区空间使用的注意事项"><a href="#堆区空间使用的注意事项" class="headerlink" title="堆区空间使用的注意事项"></a>堆区空间使用的注意事项</h4><ol><li><p>指向堆区空间的指针变量 不要随便更改指向</p><p><strong>内存泄漏</strong> ： 指针p指向变动，calloc申请的空间无法释放</p><ul><li>进程结束系统会自动释放</li></ul></li><li><p>不要操作已释放的空间</p></li><li><p>不要对堆空间重复释放</p></li></ol><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615657871278.png" alt="1615657871278"></p><h4 id="防止多次释放"><a href="#防止多次释放" class="headerlink" title="防止多次释放"></a>防止多次释放</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615658148743.png" alt="1615658148743"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串赋值"><a href="#字符串赋值" class="headerlink" title="字符串赋值"></a>字符串赋值</h4><ul><li>char name[n]  不能“&#x3D;”直接赋值，使用函数strcpy</li></ul><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><ul><li>只要是以str开头的函数都是字符串处理函数， 遇到‘\0’结束</li><li><code>#include&lt;string.h&gt;</code></li></ul><h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h5><ul><li><code>int strlen(const char *str)</code>    const：常量</li><li>字符串长度，不包含‘\0’</li><li>参数：字符串内存空间的首地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test19</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">128</span>] = <span class="string">&quot;hahaha&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf));  <span class="comment">//128</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf));  <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf1[] = <span class="string">&quot;hahaha&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf1) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf1));  <span class="comment">//7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf1) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf1));  <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf2[] = <span class="string">&quot;haha\0ha&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf2) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf2));  <span class="comment">//8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf2) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf2));  <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf3[] = <span class="string">&quot;haha\123\\ha&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf3) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf3));  <span class="comment">//9</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf3) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf3));  <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \\作用和python相同</span></span><br><span class="line"><span class="comment">// \123 代表一个字符  八进制转义 --&gt; 83（十进制,1*8^2 + 2*8^1 +_3*8^0）</span></span><br><span class="line"><span class="comment">// ascII码  83为 S</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf3);  <span class="comment">// hahaS\ha  </span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf4[] = <span class="string">&quot;haha\1234\\ha&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf4) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf4));  <span class="comment">//10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf4) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf4));  <span class="comment">//9</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf4);  <span class="comment">// hahaS4\ha </span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf5[] = <span class="string">&quot;haha\12\\ha&quot;</span>;  <span class="comment">// \12 --&gt; 10(十进制) 为换行符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf5) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf5));  <span class="comment">//9</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf5) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf5));  <span class="comment">//8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf5);  <span class="comment">// haha(换行符\t,换行)\ha </span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf6[] = <span class="string">&quot;haha\823\\ha&quot;</span>;</span><br><span class="line"><span class="comment">// \823 不是八进制数，所以和python一样‘\’后第一个字符保持原样输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf6) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf6));  <span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf6) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf6));  <span class="comment">//10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf6);  <span class="comment">// haha823\ha</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf7[] = <span class="string">&quot;haha\x2fha&quot;</span>;</span><br><span class="line"><span class="comment">// \x2f \x为16进制，转义 --&gt; ‘/’</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(buf7) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(buf7));  <span class="comment">//8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen(buf7) = %d\n&quot;</span>, <span class="built_in">strlen</span>(buf7));  <span class="comment">//7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf7);  <span class="comment">// haha/ha</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code> char buf8[] = &quot;\0haha\0ha&quot;;</code></p></blockquote><p><strong>练习：</strong></p><p>​自定义strlen函数测量字符串长度</p><h5 id="strcpy-strncpy"><a href="#strcpy-strncpy" class="headerlink" title="strcpy &#x2F; strncpy"></a>strcpy &#x2F; strncpy</h5><ol><li><p><strong>strcpy</strong> </p><ul><li><code>char *strcpy(char *dest, const char *src)</code></li><li>将src指向的字符串复制到dest指向的空间中</li><li>返回值：返回dest字符串的首地址</li><li><strong>注意：遇到‘\0’结束拷贝，‘\0’也会拷贝过去</strong></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615734899331.png" alt="1615734899331"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615735409746.png" alt="1615735409746"></p></li><li><p><strong>strncpy</strong></p><ul><li><code>char *strncpy(char *dest, const char *src, int num)</code></li><li>将src指向的字符串的前num个 复制到dest所指向的空间中</li><li>返回值：返回dest字符串的首地址</li><li><strong>注意：‘\0’不拷贝</strong></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736428291.png" alt="1615736428291"></p></li></ol><h5 id="strcat-strncat"><a href="#strcat-strncat" class="headerlink" title="strcat &#x2F; strncat"></a>strcat &#x2F; strncat</h5><ol><li><strong>strcat</strong></li></ol><ul><li><code>char *strcat(char *dest, const char *src)</code></li><li>将src的字符串拼接到dest的末尾（dest第一个’\0’的位置）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736675876.png" alt="1615736675876"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615736929332.png" alt="1615736929332"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615737269467.png" alt="1615737269467"></p><ol start="2"><li><strong>strncat</strong></li></ol><ul><li><code>char *strncat(char *dest, const char *src, int num)</code></li></ul><h5 id="strcmp-strncmp"><a href="#strcmp-strncmp" class="headerlink" title="strcmp &#x2F; strncmp"></a>strcmp &#x2F; strncmp</h5><ol><li><strong>strcmp</strong></li></ol><ul><li>&#96;int strcmp(const char *s1, const char *s2);</li><li>将s1和s2指向的字符串 逐个字符比较</li><li>返回值：<ul><li>&gt;0 : s1 &gt; s2</li><li>&lt;0 : s1 &lt; s2</li><li>&#x3D;&#x3D;0: s1 &#x3D;&#x3D; s2</li></ul></li></ul><p> <img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615909011144.png" alt="1615909011144"></p><ol start="2"><li><p><strong>strncmp</strong></p><ul><li>局部比较</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615909136851.png" alt="1615909136851"></p></li></ol><h4 id="字符串变换函数"><a href="#字符串变换函数" class="headerlink" title="字符串变换函数"></a>字符串变换函数</h4><h5 id="strchr-字符查找函数"><a href="#strchr-字符查找函数" class="headerlink" title="strchr  字符查找函数"></a>strchr  字符查找函数</h5><ul><li><code>char *strchr(const char *str1, char ch)</code></li><li>在字符串str1中查找字母ch出现的位置</li><li>返回值：返回第一次出现的地址；如果找不到，返回NULL</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910584152.png" alt="1615910584152"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910767542.png" alt="1615910767542"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910804851.png" alt="1615910804851"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615910859033.png" alt="1615910859033"></p><h5 id="strstr-字符串查找函数"><a href="#strstr-字符串查找函数" class="headerlink" title="strstr  字符串查找函数"></a>strstr  字符串查找函数</h5><ul><li><code>char *strstr(const char *s1, const char *s2)</code></li><li>在字符串str1中查找字符串s2出现的地址</li><li>返回值：返回第一次出现的地址；如果找不到，返回NULL</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615911209801.png" alt="1615911209801"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1615911404284.png" alt="1615911404284"></p><h5 id="memset-内存空间设置函数"><a href="#memset-内存空间设置函数" class="headerlink" title="memset  内存空间设置函数"></a>memset  内存空间设置函数</h5><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616083160090.png" alt="1616083160090"></p><h5 id="atoi-atol-atof-字符串转换功能"><a href="#atoi-atol-atof-字符串转换功能" class="headerlink" title="atoi &#x2F; atol &#x2F; atof  字符串转换功能"></a>atoi &#x2F; atol &#x2F; atof  字符串转换功能</h5><ul><li>将字符串转换为数值  int、long、float</li><li>头文件： <code>stdlib.h</code></li></ul><h5 id="strtok-字符串分割函数"><a href="#strtok-字符串分割函数" class="headerlink" title="strtok  字符串分割函数"></a>strtok  字符串分割函数</h5><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616258485175.png" alt="1616258485175"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616323911830.png" alt="1616323911830"></p><blockquote><p>注意：因为是对字符串本体进行替换切割，所以不能切割字符串常量</p></blockquote><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616342668857.png" alt="1616342668857"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343236165.png" alt="1616343236165"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343377352.png" alt="1616343377352"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343485987.png" alt="1616343485987"></p><p> <img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616343707967.png" alt="1616343707967"></p><h4 id="printf组包"><a href="#printf组包" class="headerlink" title="printf组包"></a>printf组包</h4><h5 id="spirntf"><a href="#spirntf" class="headerlink" title="spirntf"></a>spirntf</h5><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616344622971.png" alt="1616344622971"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616431658516.png" alt="1616431658516"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616431718075.png" alt="1616431718075"></p><h5 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h5><h4 id="sscanf解包"><a href="#sscanf解包" class="headerlink" title="sscanf解包"></a>sscanf解包</h4><h5 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h5><h5 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h5><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616513012763.png" alt="1616513012763"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516177996.png" alt="1616516177996"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516563147.png" alt="1616516563147"></p><ul><li><strong>使用%*s  %*d 跳过提取的内容</strong></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616516793201.png" alt="1616516793201"></p><ul><li><strong>使用 %[n]s %[n]d 提取指定宽度的字符串或数据</strong></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616517374110.png" alt="1616517374110"></p><ul><li><strong>%[a-z]</strong> 提取a-z的字符串</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597333338.png" alt="1616597333338"></p><ul><li><strong>%[aBc]</strong> 只提取a、B、c的字符串</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597741839.png" alt="1616597741839"></p><ul><li><strong>[^abc]</strong> 提取非a、b、c的字符串</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616597884318.png" alt="1616597884318"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616599839803.png" alt="1616599839803"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616600761194.png" alt="1616600761194"></p><h5 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h5><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul><li>修饰变量为只读（限制通过变量名写入，可通过地址写入）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616601488114.png" alt="1616601488114"></p><ul><li><p>*<em>const int <em>p</em></em></p><ul><li>const在*的左边，表示const修饰的是*, 而不是p</li><li>不能通过<em><strong>p</strong>修改指向空间的内容，但是可以修改p指向的空间地址（</em>p 只读， p可读可写）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616602502316.png" alt="1616602502316"></p></li><li><p><strong>int * const p</strong></p><ul><li>const在*的右边，便是const修饰的是p，而不是*</li><li>可以通过*p修改指向空间的内容，但不可以修改p指向的空间地址（*P可读可写，p只读）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616603192860.png" alt="1616603192860"></p></li><li><p><strong>const int * const p</strong></p></li></ul><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509612859.png" alt="1617509612859"></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616690154204.png" alt="1616690154204"></p><h4 id="结构体定义形式"><a href="#结构体定义形式" class="headerlink" title="结构体定义形式"></a>结构体定义形式</h4><ol><li>先定义类型 再定义变量</li><li>定义类型的同时定义变量</li><li>定义一次性结构体</li></ol><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616690526011.png" alt="1616690526011"></p><ul><li>struct 是结构体关键字 </li><li>stu 是结构体类型名</li><li>使用结构体类型 必须是 struct stu</li><li>num name 叫做结构体中的成员</li><li>定义结构体类型时，不要给成员初始化， 并未为结构体分配空间</li><li>结构体成员拥有独立的空间</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616692258085.png" alt="1616692258085"></p><ul><li><p>结构体变量赋值</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616842826767.png" alt="1616842826767"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616842854956.png" alt="1616842854956"></p></li><li><p>结构体变量初始化</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616847831688.png" alt="1616847831688"></p></li><li><p>清空结构体变量</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616847938029.png" alt="1616847938029"></p></li><li><p>结构体之间的赋值</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616862670293.png" alt="1616862670293"></p></li></ul><h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616865170402.png" alt="1616865170402"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1616866581302.png" alt="1616866581302"></p><h4 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617519519844.png" alt="1617519519844"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617519553547.png" alt="1617519553547"></p><ul><li>从堆区给结构体申请空间</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524987601.png" alt="1617524987601"></p><ul><li>结构体指针作为函数参数</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524731011.png" alt="1617524731011"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617524747415.png" alt="1617524747415"></p><ul><li>从堆区申请一个结构体数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void test27() &#123;</span><br><span class="line"><span class="built_in">int</span> n = <span class="number">0</span>;</span><br><span class="line">printf(<span class="string">&quot;输入结构体数量：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">// 定义结构体指针</span><br><span class="line">struct stu *arr;</span><br><span class="line">// 分配空间</span><br><span class="line">arr = (struct stu *)calloc(n, sizeof(struct stu));</span><br><span class="line">// 初始化</span><br><span class="line">// me</span><br><span class="line">    mset(arr, <span class="number">0</span>, sizeof(arr));</span><br><span class="line"></span><br><span class="line">// printf(<span class="string">&quot;%d\n&quot;</span>, sizeof((*arr).name));</span><br><span class="line">printf(<span class="string">&quot;输入%d个学生信息：\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">// scanf_s(<span class="string">&quot;%d %s %d&quot;</span>, &amp;(*(arr + i)).num, (*(arr + i)).name, sizeof((*arr).name), &amp;(*(arr + i)).age);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %s %d&quot;</span>, &amp;(arr + i)-&gt;num, (arr + i)-&gt;name, sizeof(arr-&gt;name), &amp;(arr + i)-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;-----------------------------\n&quot;</span>);</span><br><span class="line">// 根据年龄排序</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*(arr + j)).age &gt; (*(arr + j + <span class="number">1</span>)).age) &#123;</span><br><span class="line">struct stu temp;</span><br><span class="line">temp = *(arr + j);</span><br><span class="line">*(arr + j) = *(arr + j + <span class="number">1</span>);</span><br><span class="line">*(arr + j + <span class="number">1</span>) = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">printf(<span class="string">&quot;%d - %s - %d\n&quot;</span>, (*(arr + i)).num, (*(arr + i)).name, (*(arr + i)).age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 释放空间</span><br><span class="line"><span class="keyword">if</span> (arr != NULL) &#123;</span><br><span class="line">free(arr);</span><br><span class="line">arr = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体的内存对齐"><a href="#结构体的内存对齐" class="headerlink" title="结构体的内存对齐"></a>结构体的内存对齐</h4><ul><li>结构体类型大小 为 对齐后的大小，不等于各成员类型的大小之和</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537010434.png" alt="1617537010434"></p><ul><li>对齐规则</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537084831.png" alt="1617537084831"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617537981571.png" alt="1617537981571"></p><h4 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617539445731.png" alt="1617539445731"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617543658002.png" alt="1617543658002"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617553525565.png" alt="1617553525565"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617553722780.png" alt="1617553722780"></p><h4 id="指定对齐规则"><a href="#指定对齐规则" class="headerlink" title="指定对齐规则"></a>指定对齐规则</h4><ul><li><code>#pragma pack (value)</code></li><li>value 值为 2的整数倍</li><li>实际对齐值 &#x3D; min(指定对齐值，默认数据类型对齐值)</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617554702446.png" alt="1617554702446"></p><h4 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617611596796.png" alt="1617611596796"></p><ul><li>位段压缩</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617611932762.png" alt="1617611932762"></p><ul><li><p>位段不能取地址</p><ul><li>内存地址是按字节编址，最小单位为一个字节</li></ul></li><li><p>位段的赋值</p><ul><li>不要超过位段的大小 ， 只会保留段位大小的数据（数据从低位向高位存储）</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617629878265.png" alt="1617629878265"></p></li><li><p>无意义位段</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634058730.png" alt="1617634058730"></p></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634141772.png" alt="1617634141772"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617634720640.png" alt="1617634720640"></p><ul><li><p>另起位段</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617636961478.png" alt="1617636961478"></p></li></ul><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><ul><li>union</li><li>所有成员共享同一份空间，大小由最大成员决定</li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617637566105.png" alt="1617637566105"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617638200226.png" alt="1617638200226"></p><blockquote><p>求：A.a + A.b + A.c的值    0x01020203</p></blockquote><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617639445772.png" alt="1617639445772"></p><h3 id="结构体-与-共用体-的区别"><a href="#结构体-与-共用体-的区别" class="headerlink" title="结构体 与 共用体 的区别"></a>结构体 与 共用体 的区别</h3><ul><li>结构体<ul><li>struct</li><li>所有成员拥有独立空间</li></ul></li><li>共用体（联合体）<ul><li>union</li><li>所有成员共享同一份空间</li></ul></li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li><p>将变量的值一一列举出来，变量的值只限于列举出来的值的范围内</p></li><li><pre><code class="python">enum 枚举名&#123;    枚举值（枚举元素）&#125;；<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">![<span class="number">1617640571878</span>](C语言学习\<span class="number">1617640571878.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 排序算法</span><br><span class="line"></span><br><span class="line">#### 冒泡排序</span><br><span class="line"></span><br><span class="line">![<span class="number">1617035924356</span>](C语言学习\<span class="number">1617035924356.</span>png)</span><br><span class="line"></span><br><span class="line">```<span class="function">python</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test26</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *arr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指定数字数量：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入%d个数字\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开辟内存空间</span></span><br><span class="line">arr = (<span class="type">int</span> *)<span class="built_in">calloc</span>(n, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="comment">// 判断空间是否开辟成功</span></span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;calloc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, arr + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="keyword">if</span> (arr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617121401672.png" alt="1617121401672"></p><h4 id="结构体数组排序"><a href="#结构体数组排序" class="headerlink" title="结构体数组排序"></a>结构体数组排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 定义结构体</span><br><span class="line">struct stu &#123;</span><br><span class="line"><span class="built_in">int</span> num;</span><br><span class="line">char name[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test27() &#123;</span><br><span class="line"><span class="built_in">int</span> n = <span class="number">0</span>;</span><br><span class="line">printf(<span class="string">&quot;输入结构体数量：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">// 定义结构体指针</span><br><span class="line">struct stu *arr;</span><br><span class="line">// 分配空间</span><br><span class="line">arr = (struct stu *)calloc(n, sizeof(struct stu));</span><br><span class="line">// 初始化</span><br><span class="line">// memset(arr, <span class="number">0</span>, sizeof(arr));</span><br><span class="line"></span><br><span class="line">// printf(<span class="string">&quot;%d\n&quot;</span>, sizeof((*arr).name));</span><br><span class="line">printf(<span class="string">&quot;输入%d个学生信息：\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">scanf_s(<span class="string">&quot;%d %s %d&quot;</span>, &amp;(*(arr + i)).num, (*(arr + i)).name, sizeof((*arr).name), &amp;(*(arr + i)).age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;-----------------------------\n&quot;</span>);</span><br><span class="line">// 根据年龄排序</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*(arr + j)).age &gt; (*(arr + j + <span class="number">1</span>)).age) &#123;</span><br><span class="line">struct stu temp;</span><br><span class="line">temp = *(arr + j);</span><br><span class="line">*(arr + j) = *(arr + j + <span class="number">1</span>);</span><br><span class="line">*(arr + j + <span class="number">1</span>) = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">printf(<span class="string">&quot;%d - %s - %d\n&quot;</span>, (*(arr + i)).num, (*(arr + i)).name, (*(arr + i)).age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 释放空间</span><br><span class="line"><span class="keyword">if</span> (arr != NULL) &#123;</span><br><span class="line">free(arr);</span><br><span class="line">arr = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><ul><li><p>使用步骤：</p><ul><li>先用已有类型定义一个变量</li><li>用 别名 替换 变量名</li><li>在表达式前添加 typedef</li></ul></li><li><p>用例</p><ul><li><p>typedef int INT32;</p></li><li><p>typedef int ARR_TYPE[5];</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509321074.png" alt="1617509321074"></p></li><li><p>typedef int *P_TYPE;</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509452249.png" alt="1617509452249"></p></li><li><p>typedef int (*FUN_P)(int x, int y);   函数指针类型</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617509784618.png" alt="1617509784618"></p></li><li><p>结构体类型</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617510034360.png" alt="1617510034360"></p><p>结构体指针类型</p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617510468750.png" alt="1617510468750"></p></li></ul></li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="数组在存储数据上的缺点"><a href="#数组在存储数据上的缺点" class="headerlink" title="数组在存储数据上的缺点"></a>数组在存储数据上的缺点</h4><ul><li>静态数组必须确定数组大小，不能实现动态的申请、释放</li><li>动态数组不便于局部数据的申请、释放（中间元素的插入、删除）</li><li>优点：便于遍历</li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p>链表是一种物理存储上非连续，数据元素的逻辑顺序通过链表中指针链接次序实现的一种线性存储结构</p></li><li><p>特点：</p><ul><li><p>链表由一系列节点组成，节点在运行时动态生成（molloc),每个节点包括两个部分：</p><ul><li>数据域：存储数据元素</li><li>指针域：存储下一个节点地址</li></ul></li><li><p>节点一般采用 结构体 的组织形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct student</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num;</span><br><span class="line">    <span class="built_in">float</span> score;</span><br><span class="line">    struct student *<span class="built_in">next</span>;</span><br><span class="line">&#125; STU;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642359352.png" alt="1617642359352"></p></li></ul><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642765166.png" alt="1617642765166"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642789017.png" alt="1617642789017"></p><p><img src="/2024/06/19/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5C1617642831332.png" alt="1617642831332"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h4 id="字符存在正负之分"><a href="#字符存在正负之分" class="headerlink" title="字符存在正负之分"></a>字符存在正负之分</h4><ul><li>字符是一个字节，储存范围 -128~127</li></ul><h4 id="int-与-unsigned-int"><a href="#int-与-unsigned-int" class="headerlink" title="int 与 unsigned int"></a>int 与 unsigned int</h4><ul><li>在内存地址中的存储是相通的，该内存地址的数是有符号数还是无符号数 取决于输出方式  %d（有符号数） %u（无符号数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">test3</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 有符号数与无符号数相乘，先转换为无符号数再计算</span></span><br><span class="line">    <span class="type">char</span> c1=<span class="number">0xFE</span>;</span><br><span class="line">    <span class="type">char</span> c2=<span class="number">0x02</span>;</span><br><span class="line">    <span class="type">int</span> s1=c1*c2;  <span class="comment">//有符号数相乘</span></span><br><span class="line">    <span class="comment">// c1转换为unsigned int 占4个字符 0xFFFFFFFE，c2转换为unsigned char 占1个字符</span></span><br><span class="line">    <span class="comment">// -2 * 2 = -4  两个有符号数相乘，占4字节  有符号：-4  无符号：4294967292</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s2=c1*(<span class="type">unsigned</span> <span class="type">char</span>)c2;</span><br><span class="line">    <span class="comment">// c1转换为unsigned char 占1个字符 为254，c2转换为unsigned int 占4个字符0x00000002</span></span><br><span class="line">    <span class="comment">// -2 * 2 = -4  两个有符号数相乘，占1字节  有符号：-4  无符号：508</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s3=(<span class="type">unsigned</span> <span class="type">char</span>)c1*c2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s4=(<span class="type">unsigned</span> <span class="type">int</span>)c1*c2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s5=(<span class="type">unsigned</span> <span class="type">char</span>)c1*(<span class="type">unsigned</span> <span class="type">int</span>)c2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%u,%u,%u,%u\n&quot;</span>,s1,s2,s3,s4,s5);  <span class="comment">// -4,4294967292,508,4294967292</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, c1);  <span class="comment">// 4294967294</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s2);</span><br><span class="line">    <span class="comment">// s2 与 s3 有符号数相等  无符号数不同（因为占位数不同）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  学习资源：&lt;a href=&quot;https://www.bilibili.com/video/BV1XZ4y1G7No?p=30&quot;&gt;https://www.bilibili.com/video/BV1XZ4y1G7No?p=30&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单示例&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>django之对FileField操作</title>
    <link href="https://mygodonload.github.io/2020/11/18/django%E4%B9%8B%E5%AF%B9FileField%E6%93%8D%E4%BD%9C/index.html"/>
    <id>https://mygodonload.github.io/2020/11/18/django%E4%B9%8B%E5%AF%B9FileField%E6%93%8D%E4%BD%9C/index.html</id>
    <published>2020-11-18T08:19:04.000Z</published>
    <updated>2020-11-18T08:31:54.588Z</updated>
    
    <content type="html"><![CDATA[<p><code>FieldFile.save(name, content, save=True)</code></p><ul><li><p><code>name</code>：命名文件名</p></li><li><p><code>content</code>:必须是<code>django.core.files.File</code>或<code>django.core.files.base.ContentFile</code>二者之一的一个实例</p></li><li><pre><code>ContentFile(content, name)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  `content`: 字符串 或 二进制</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentFile</span>(<span class="title class_ inherited__">File</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A File-like object that takes just raw content, rather than an actual file.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content, name=<span class="literal">None</span></span>):</span><br><span class="line">        stream_class = StringIO <span class="keyword">if</span> <span class="built_in">isinstance</span>(content, <span class="built_in">str</span>) <span class="keyword">else</span> BytesIO</span><br><span class="line">        <span class="built_in">super</span>().__init__(stream_class(content), name=name)</span><br><span class="line">        self.size = <span class="built_in">len</span>(content)</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoadUser</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.UUIDField(primary_key=<span class="literal">True</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    data_file = models.FileField(</span><br><span class="line">        verbose_name=<span class="string">&#x27;负荷数据文件&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,</span><br><span class="line">        upload_to=<span class="string">&#x27;load_data_files&#x27;</span>, storage=OverwriteStorage())</span><br></pre></td></tr></table></figure><h4 id="自定义文件存储类"><a href="#自定义文件存储类" class="headerlink" title="自定义文件存储类"></a>自定义文件存储类</h4><ul><li>文件进行覆盖保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverwriteStorage</span>(<span class="title class_ inherited__">FileSystemStorage</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_available_name</span>(<span class="params">self, name, max_length=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> self.exists(name):</span><br><span class="line">            os.remove(os.path.join(settings.MEDIA_ROOT, name))</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><h4 id="从请求中获取文件"><a href="#从请求中获取文件" class="headerlink" title="从请求中获取文件"></a>从请求中获取文件</h4><ul><li>表单请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    存储用户负荷数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 接收参数</span></span><br><span class="line">    file = request.FILES.get(<span class="string">&#x27;data_file&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 参数验证</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    load_user, created = LoadUser.objects.update_or_create(defaults=data, tech_group_id=tech_group_id)</span><br><span class="line">    file.name = <span class="built_in">str</span>(load_user.<span class="built_in">id</span>) + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">    load_user.data_file = file</span><br><span class="line">    load_user.save()</span><br></pre></td></tr></table></figure><h4 id="手动向FileField保存文件"><a href="#手动向FileField保存文件" class="headerlink" title="手动向FileField保存文件"></a>手动向FileField保存文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = ContentFile(previous_instance.data_file.read(), <span class="built_in">str</span>(load_user.<span class="built_in">id</span>) + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">load_user.data_file.save(<span class="built_in">str</span>(load_user.<span class="built_in">id</span>) + <span class="string">&#x27;.xlsx&#x27;</span>, f)</span><br></pre></td></tr></table></figure><p><code>FileField.save(name, content)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;FieldFile.save(name, content, save=True)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：命名文件名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;content&lt;/code&gt;:必须是&lt;c</summary>
      
    
    
    
    
    <category term="django" scheme="https://mygodonload.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库</title>
    <link href="https://mygodonload.github.io/2020/10/04/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/index.html"/>
    <id>https://mygodonload.github.io/2020/10/04/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/index.html</id>
    <published>2020-10-04T08:50:44.000Z</published>
    <updated>2020-10-04T09:01:38.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li>非关系型数据库</li><li>易扩展</li><li>大数据量，高性能</li><li>灵活的数据模型</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;非关系型数据库&lt;/li&gt;
&lt;li&gt;易扩展&lt;/li&gt;
&lt;li&gt;大数据量，高性能&lt;/li&gt;
&lt;li&gt;灵活的数据模型&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中的一些函数对比</title>
    <link href="https://mygodonload.github.io/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index.html"/>
    <id>https://mygodonload.github.io/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index.html</id>
    <published>2020-09-26T14:31:24.000Z</published>
    <updated>2020-09-26T16:34:32.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filter-、map-、reduce"><a href="#filter-、map-、reduce" class="headerlink" title="filter()、map()、reduce()"></a>filter()、map()、reduce()</h2><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/1601130937320.png" alt="1601130937320"></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><ul><li>过滤</li></ul><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/filter.png" alt="1601130980572"></p><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><ul><li>经过lambda函数生成新的列表</li></ul><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/map.png" alt="1601131155244"></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><ul><li>累记操作 （累加 常用sum()）</li></ul><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/reduce.png" alt="1601131496968"></p><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/reduce1.png" alt="1601131667117"></p><h2 id="eval-、exec"><a href="#eval-、exec" class="headerlink" title="eval()、exec()"></a>eval()、exec()</h2><p>eval() 和 exec() 函数的功能是相似的，都可以执行一个字符串形式的 Python 代码（代码以字符串的形式提供），相当于一个 Python 的解释器。二者不同之处在于，eval() 执行完要返回结果，而 exec() 执行完不返回结果。<br>eval() 函数的语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(source, <span class="built_in">globals</span>=<span class="literal">None</span>, <span class="built_in">locals</span>=<span class="literal">None</span>, /)</span><br></pre></td></tr></table></figure><p>exec() 函数的语法格式如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(source, <span class="built_in">globals</span>=<span class="literal">None</span>, <span class="built_in">locals</span>=<span class="literal">None</span>, /)</span><br></pre></td></tr></table></figure><p>可以看到，二者的语法格式除了函数名，其他都相同，其中各个参数的具体含义如下：</p><ul><li>source：这个参数是一个字符串，代表要执行的语句 。该语句受后面两个字典类型参数 globals 和 locals 的限制，只有在 globals 字典和 locals 字典作用域内的函数和变量才能被执行。</li><li>globals：这个参数管控的是一个全局的命名空间，即 source可以使用全局命名空间中的函数。如果只是提供了 globals 参数，而没有提供自定义的 __builtins__，则系统会将当前环境中的 _<em>builtins</em>_ 复制到自己提供的 globals 中，然后才会进行计算；如果连 globals 这个参数都没有被提供，则使用 Python 的全局命名空间。</li><li>locals：这个参数管控的是一个局部的命名空间，和 globals 类似，当它和 globals 中有重复或冲突时，以 locals 的为准。如果 locals 没有被提供，则默认为 globals。</li></ul><blockquote><p>注意，<strong>builtins</strong> 是 Python 的内建模块，平时使用的 int、str、abs 都在这个模块中。通过 print(dic[“<strong>builtins</strong>“]) 语句可以查看 <strong>builtins</strong> 所对应的 value。</p></blockquote><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/eval.png" alt="1601134395639"></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/exec.png" alt="1601133301583"></p><blockquote><p>若在提供的作用域中没有__builtins__，则会将全局变量中的__builtins__复制到global中</p></blockquote><p><img src="/2020/09/26/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/index/exec1.png" alt="1601133698525"></p><p><strong>区别</strong>：</p><ul><li>eval() 执行完会返回结果，而 exec() 执行完不返回结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;a = 2&quot;</span>) <span class="comment">#相当于直接执行 a=2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = <span class="built_in">exec</span>(<span class="string">&quot;2+3&quot;</span>) <span class="comment">#相当于直接执行 2+3，但是并没有返回值，a 应为 None</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = <span class="built_in">eval</span>(<span class="string">&#x27;2+3&#x27;</span>) <span class="comment">#执行 2+3，并把结果返回给 a</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="built_in">None</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><p> 客户端向服务端发送一段字符串代码，服务端无需关心具体的内容，直接跳过 eval() 或 exec() 来执行，这样的设计会使服务端与客户端的耦合度更低，系统更易扩展。 </p><p><strong>缺点：</strong></p><p> 在使用 eval() 或是 exec() 来处理请求代码时，函数 eval() 和 exec() 常常会被黑客利用，成为可以执行系统级命令的入口点，进而来攻击网站。</p><p>解决方法是：通过设置其命名空间里的可执行函数，来限制 eval() 和 exec() 的执行范围。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;filter-、map-、reduce&quot;&gt;&lt;a href=&quot;#filter-、map-、reduce&quot; class=&quot;headerlink&quot; title=&quot;filter()、map()、reduce()&quot;&gt;&lt;/a&gt;filter()、map()、reduce()&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python类的魔法方法</title>
    <link href="https://mygodonload.github.io/2020/09/26/Python%E7%B1%BB%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/index.html"/>
    <id>https://mygodonload.github.io/2020/09/26/Python%E7%B1%BB%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/index.html</id>
    <published>2020-09-26T13:55:56.000Z</published>
    <updated>2020-09-26T16:17:55.662Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>魔法方法</th><th>含义</th></tr></thead><tbody><tr><td></td><td><strong>基本的魔法方法</strong></td></tr><tr><td>_<em>new</em>_(cls[, …])</td><td>1. <strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法 2. 它的第一个参数是这个类，其他的参数是用来直接传递给 <strong>init</strong> 方法 3. <strong>new</strong> 决定是否要使用该 <strong>init</strong> 方法，因为 <strong>new</strong> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <strong>new</strong> 没有返回实例对象，则 <strong>init</strong> 不会被调用 4. <strong>new</strong> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</td></tr><tr><td>_<em>init</em>_(self[, …])</td><td>构造器，当一个实例被创建的时候调用的初始化方法</td></tr><tr><td>_<em>del</em>_(self)</td><td>析构器，当一个实例被销毁的时候调用的方法</td></tr><tr><td>_<em>call</em>_(self[, args…])</td><td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b)</td></tr><tr><td>_<em>len</em>_(self)</td><td>定义当被 len() 调用时的行为</td></tr><tr><td>_<em>repr</em>_(self)</td><td>定义当被 repr() 调用时的行为</td></tr><tr><td>_<em>str</em>_(self)</td><td>定义当被 str() 调用时的行为</td></tr><tr><td>_<em>bytes</em>_(self)</td><td>定义当被 bytes() 调用时的行为</td></tr><tr><td>_<em>hash</em>_(self)</td><td>定义当被 hash() 调用时的行为</td></tr><tr><td>_<em>bool</em>_(self)</td><td>定义当被 bool() 调用时的行为，应该返回 True 或 False</td></tr><tr><td>_<em>format</em>_(self, format_spec)</td><td>定义当被 format() 调用时的行为</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>有关属性</strong></td></tr><tr><td>_<em>getattr</em>_(self, name)</td><td>定义当用户试图获取一个不存在的属性时的行为</td></tr><tr><td>_<em>getattribute</em>_(self, name)</td><td>定义当该类的属性被访问时的行为</td></tr><tr><td>_<em>setattr</em>_(self, name, value)</td><td>定义当一个属性被设置时的行为</td></tr><tr><td>_<em>delattr</em>_(self, name)</td><td>定义当一个属性被删除时的行为</td></tr><tr><td>_<em>dir</em>_(self)</td><td>定义当 dir() 被调用时的行为</td></tr><tr><td>_<em>get</em>_(self, instance, owner)</td><td>定义当描述符的值被取得时的行为</td></tr><tr><td>_<em>set</em>_(self, instance, value)</td><td>定义当描述符的值被改变时的行为</td></tr><tr><td>_<em>delete</em>_(self, instance)</td><td>定义当描述符的值被删除时的行为</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>比较操作符</strong></td></tr><tr><td>_<em>lt</em>_(self, other)</td><td>定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y)</td></tr><tr><td>_<em>le</em>_(self, other)</td><td>定义小于等于号的行为：x &lt;&#x3D; y 调用 x.<strong>le</strong>(y)</td></tr><tr><td>_<em>eq</em>_(self, other)</td><td>定义等于号的行为：x &#x3D;&#x3D; y 调用 x.<strong>eq</strong>(y)</td></tr><tr><td>_<em>ne</em>_(self, other)</td><td>定义不等号的行为：x !&#x3D; y 调用 x.<strong>ne</strong>(y)</td></tr><tr><td>_<em>gt</em>_(self, other)</td><td>定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y)</td></tr><tr><td>_<em>ge</em>_(self, other)</td><td>定义大于等于号的行为：x &gt;&#x3D; y 调用 x.<strong>ge</strong>(y)</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>算数运算符</strong></td></tr><tr><td>_<em>add</em>_(self, other)</td><td>定义加法的行为：+</td></tr><tr><td>_<em>sub</em>_(self, other)</td><td>定义减法的行为：-</td></tr><tr><td>_<em>mul</em>_(self, other)</td><td>定义乘法的行为：*</td></tr><tr><td>_<em>truediv</em>_(self, other)</td><td>定义真除法的行为：&#x2F;</td></tr><tr><td>_<em>floordiv</em>_(self, other)</td><td>定义整数除法的行为：&#x2F;&#x2F;</td></tr><tr><td>_<em>mod</em>_(self, other)</td><td>定义取模算法的行为：%</td></tr><tr><td>_<em>divmod</em>_(self, other)</td><td>定义当被 divmod() 调用时的行为</td></tr><tr><td>_<em>pow</em>_(self, other[, modulo])</td><td>定义当被 power() 调用或 ** 运算时的行为</td></tr><tr><td>_<em>lshift</em>_(self, other)</td><td>定义按位左移位的行为：&lt;&lt;</td></tr><tr><td>_<em>rshift</em>_(self, other)</td><td>定义按位右移位的行为：&gt;&gt;</td></tr><tr><td>_<em>and</em>_(self, other)</td><td>定义按位与操作的行为：&amp;</td></tr><tr><td>_<em>xor</em>_(self, other)</td><td>定义按位异或操作的行为：^</td></tr><tr><td>_<em>or</em>_(self, other)</td><td>定义按位或操作的行为：|</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>反运算</strong></td></tr><tr><td>_<em>radd</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rsub</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rmul</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rtruediv</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rfloordiv</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rmod</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rdivmod</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rpow</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rlshift</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rrshift</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>rxor</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td>_<em>ror</em>_(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>增量赋值运算</strong></td></tr><tr><td>_<em>iadd</em>_(self, other)</td><td>定义赋值加法的行为：+&#x3D;</td></tr><tr><td>_<em>isub</em>_(self, other)</td><td>定义赋值减法的行为：-&#x3D;</td></tr><tr><td>_<em>imul</em>_(self, other)</td><td>定义赋值乘法的行为：*&#x3D;</td></tr><tr><td>_<em>itruediv</em>_(self, other)</td><td>定义赋值真除法的行为：&#x2F;&#x3D;</td></tr><tr><td>_<em>ifloordiv</em>_(self, other)</td><td>定义赋值整数除法的行为：&#x2F;&#x2F;&#x3D;</td></tr><tr><td>_<em>imod</em>_(self, other)</td><td>定义赋值取模算法的行为：%&#x3D;</td></tr><tr><td>_<em>ipow</em>_(self, other[, modulo])</td><td>定义赋值幂运算的行为：**&#x3D;</td></tr><tr><td>_<em>ilshift</em>_(self, other)</td><td>定义赋值按位左移位的行为：&lt;&lt;&#x3D;</td></tr><tr><td>_<em>irshift</em>_(self, other)</td><td>定义赋值按位右移位的行为：&gt;&gt;&#x3D;</td></tr><tr><td>_<em>iand</em>_(self, other)</td><td>定义赋值按位与操作的行为：&amp;&#x3D;</td></tr><tr><td>_<em>ixor</em>_(self, other)</td><td>定义赋值按位异或操作的行为：^&#x3D;</td></tr><tr><td>_<em>ior</em>_(self, other)</td><td>定义赋值按位或操作的行为：|&#x3D;</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>一元操作符</strong></td></tr><tr><td>_<em>neg</em>_(self)</td><td>定义正号的行为：+x</td></tr><tr><td>_<em>pos</em>_(self)</td><td>定义负号的行为：-x</td></tr><tr><td>_<em>abs</em>_(self)</td><td>定义当被 abs() 调用时的行为</td></tr><tr><td>_<em>invert</em>_(self)</td><td>定义按位求反的行为：~x</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>类型转换</strong></td></tr><tr><td>_<em>complex</em>_(self)</td><td>定义当被 complex() 调用时的行为（需要返回恰当的值）</td></tr><tr><td>_<em>int</em>_(self)</td><td>定义当被 int() 调用时的行为（需要返回恰当的值）</td></tr><tr><td>_<em>float</em>_(self)</td><td>定义当被 float() 调用时的行为（需要返回恰当的值）</td></tr><tr><td>_<em>round</em>_(self[, n])</td><td>定义当被 round() 调用时的行为（需要返回恰当的值）</td></tr><tr><td>_<em>index</em>_(self)</td><td>1. 当对象是被应用在切片表达式中时，实现整形强制转换 2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong> 3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>上下文管理（with 语句）</strong></td></tr><tr><td>_<em>enter</em>_(self)</td><td>1. 定义当使用 with 语句时的初始化行为 2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定</td></tr><tr><td>_<em>exit</em>_(self, exc_type, exc_value, traceback)</td><td>1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么 2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</td></tr><tr><td></td><td></td></tr><tr><td></td><td><strong>容器类型</strong></td></tr><tr><td>_<em>len</em>_(self)</td><td>定义当被 len() 调用时的行为（返回容器中元素的个数）</td></tr><tr><td>_<em>getitem</em>_(self, key)</td><td>定义获取容器中指定元素的行为，相当于 self[key]</td></tr><tr><td>_<em>setitem</em>_(self, key, value)</td><td>定义设置容器中指定元素的行为，相当于 self[key] &#x3D; value</td></tr><tr><td>_<em>delitem</em>_(self, key)</td><td>定义删除容器中指定元素的行为，相当于 del self[key]</td></tr><tr><td>_<em>iter</em>_(self)</td><td>定义当迭代容器中的元素的行为</td></tr><tr><td>_<em>reversed</em>_(self)</td><td>定义当被 reversed() 调用时的行为</td></tr><tr><td>_<em>contains</em>_(self, item)</td><td>定义当使用成员测试运算符（in 或 not in）时的行为</td></tr></tbody></table><h3 id="new"><a href="#new" class="headerlink" title="_new_"></a>_<em>new</em>_</h3><h3 id="repr"><a href="#repr" class="headerlink" title="_repr_"></a>_<em>repr</em>_</h3><h3 id="del"><a href="#del" class="headerlink" title="_del_"></a>_<em>del</em>_</h3><p>​在编写程序时，如果之前创建的类实例化对象后续不再使用，可对对象进行销毁，释放其占用的内存空间（python的垃圾回收机制）</p><p>无论是手动销毁，还是 Python 自动销毁，都会调用 _<em>del</em>_() 方法。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CLanguage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用 __init__() 方法构造对象&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用__del__() 销毁对象，释放其空间&quot;</span>)</span><br><span class="line">clangs = CLanguage()</span><br><span class="line"><span class="keyword">del</span> clangs</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用 __init__() 方法构造对象</span><br><span class="line">调用__del__() 销毁对象，释放其空间</span><br></pre></td></tr></table></figure><p> 但是，千万不要误认为，只要为该实例对象调用 <strong>del</strong>() 方法，该对象所占用的内存空间就会被释放。举个例子： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CLanguage</span>:    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用 __init__() 方法构造对象&quot;</span>)    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用__del__() 销毁对象，释放其空间&quot;</span>)</span><br><span class="line">clangs = CLanguage()<span class="comment">#添加一个引用clangs对象的实例对象</span></span><br><span class="line">cl = clangs</span><br><span class="line"><span class="keyword">del</span> clangs</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;***********&quot;</span>)</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用 <span class="built_in">__init__</span>() 方法构造对象</span><br><span class="line">***********</span><br><span class="line">调用<span class="built_in">__del__</span>() 销毁对象，释放其空间</span><br></pre></td></tr></table></figure><blockquote><p>注意，最后一行输出信息，是程序执行即将结束时调用 _<em>del</em>_() 方法输出的。</p></blockquote><p>可以看到，当程序中有其它变量（比如这里的 cl）引用该实例对象时，即便手动调用 __del__() 方法，该方法也不会立即执行。这和 Python 的垃圾回收机制的引用计数有关，只有对象的的计数器值为 0，Python 才会真正调用 __del__() 方法将其回收。</p><p> 以上面程序中的 clangs 为例，实际上构建 clangs 实例对象的过程分为 2 步，先使用 CLanguage() 调用该类中的 __init__() 方法构造出一个该类的对象（将其称为 C，计数器为 0），并立即用 clangs 这个变量作为所建实例对象的引用（ C 的计数器值 + 1）。在此基础上，又有一个 cl 变量引用 clangs（其实相当于引用 CLanguage()，此时 C 的计数器再 +1 ），这时如果调用<code>del clangs</code>语句，只会导致 C 的计数器减 1（值变为 1），因为 C 的计数器值不为 0，因此 C 不会被销毁（不会执行 __del__() 方法）。 </p><p>如果在上面程序结尾，添加如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> cl</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------&quot;</span>)</span><br></pre></td></tr></table></figure><p>则程序的执行结果为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用 <span class="built_in">__init__</span>() 方法构造对象</span><br><span class="line">***********</span><br><span class="line">调用<span class="built_in">__del__</span>() 销毁对象，释放其空间</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p>可以看到，当执行 del cl 语句时，其应用的对象实例对象 C 的计数器继续 -1（变为 0），对于计数器为 0 的实例对象，Python 会自动将其视为垃圾进行回收。</p><p><strong>如果我们重写子类的 __del__() 方法（父类为非 object 的类），则必须显式调用父类的__del__() 方法，这样才能保证在回收子类对象时，其占用的资源（可能包含继承自父类的部分资源）能被彻底释放。</strong></p><p>为了说明这一点，这里举一个反例： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CLanguage</span>:    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用父类 __del__() 方法&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cl</span>(<span class="title class_ inherited__">CLanguage</span>):    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用子类 __del__() 方法&quot;</span>)</span><br><span class="line">        </span><br><span class="line">c = cl()</span><br><span class="line"><span class="keyword">del</span> c</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用子类 <span class="built_in">__del__</span>() 方法</span><br></pre></td></tr></table></figure><h3 id="dir"><a href="#dir" class="headerlink" title="_dir_"></a>_<em>dir</em>_</h3><h3 id="dict"><a href="#dict" class="headerlink" title="_dict_"></a>_<em>dict</em>_</h3><h3 id="call"><a href="#call" class="headerlink" title="_call_"></a>_<em>call</em>_</h3><h3 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr()"></a>hasattr()</h3><h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h3><h3 id="setattr"><a href="#setattr" class="headerlink" title="setattr()"></a>setattr()</h3><h3 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass()"></a>issubclass()</h3><ul><li><p>issubclass( cls, class_or_tuple )</p></li><li><p>检查 cls 是否为后一个类或元组包含的多个类中任意类的子类。</p></li></ul><h3 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h3><ul><li><p>isinstance( obj, class_or_tuple )</p></li><li><p>检查 obj 是否为后一个类或元组包含的多个类中任意类的对象。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;魔法方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;基本的魔法方法&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;em&gt;ne</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="https://mygodonload.github.io/2020/09/26/%E7%88%AC%E8%99%AB/index.html"/>
    <id>https://mygodonload.github.io/2020/09/26/%E7%88%AC%E8%99%AB/index.html</id>
    <published>2020-09-26T09:28:45.000Z</published>
    <updated>2020-10-04T10:03:50.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h3><h4 id="基本请求参数"><a href="#基本请求参数" class="headerlink" title="基本请求参数"></a>基本请求参数</h4><ul><li><p>USER_AGENT</p></li><li><p>cookies 与 cookiejar</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie_dict = request.utils.dict_from_cookiejar(response.cookies)</span><br><span class="line"></span><br><span class="line">cookie_jar = request.utils.cookiejar_from_dict(cookie_dict)</span><br></pre></td></tr></table></figure><ul><li>timeout：超时参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url, timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><p>代理</p><p>匿名度</p><ul><li><p>透明代理：虽然直接隐藏了本地IP，但依旧能够查询到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REMOTE_ADDR = Proxy IP</span><br><span class="line">HTTP_VIA = Proxy IP</span><br><span class="line">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure></li><li><p>匿名代理：能知道使用了代理，但无法查询本地IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REMOTE_ADDR = Proxy IP</span><br><span class="line">HTTP_VIA = Proxy IP</span><br><span class="line">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure></li><li><p>高匿代理：无法判断是否使用了代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REMOTE_ADDR = Proxy IP</span><br><span class="line">HTTP_VIA = <span class="keyword">not</span> determined</span><br><span class="line">HTTP_X_FORWARDED_FOR = <span class="keyword">not</span> determined</span><br></pre></td></tr></table></figure></li></ul><p>协议</p><ul><li>HTTP</li><li>HTTPS</li><li>socks隧道代理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url, proxies=proxies)</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8888&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:<span class="string">&quot;https://127.0.0.1:8888&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 若有多个配置，发送请求时将按照url地址的协议选择使用相应的代理ip</span></span><br></pre></td></tr></table></figure></li><li><p>verify  忽略CA证书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li></ul><p>交互获取参数：input()</p><p>命令行获取参数：sys.argv</p><h4 id="post请求参数"><a href="#post请求参数" class="headerlink" title="post请求参数"></a>post请求参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.post(url, data)</span><br></pre></td></tr></table></figure><ul><li>post数据来源<ul><li>固定值</li><li>输入值</li><li>预设值–静态文件中</li><li>预设值–发送请求获取</li><li>在客户端生成，分析js文件</li></ul></li></ul><h4 id="session状态保持"><a href="#session状态保持" class="headerlink" title="session状态保持"></a>session状态保持</h4><ul><li><p>requests.session</p><ul><li>自动处理cookie，下一次请求会带上前一次的cookie</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url, headers, ...)</span><br><span class="line">response = session.post(url, data, ...)</span><br></pre></td></tr></table></figure><blockquote><p>session对象与requests模块发送请求处理一致</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># session</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="comment"># headers</span></span><br><span class="line">    session.headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取token</span></span><br><span class="line">    <span class="comment"># 发送请求获取响应</span></span><br><span class="line">    token_url = <span class="string">&#x27;https://github.com/login&#x27;</span></span><br><span class="line">    response = session.get(token_url)</span><br><span class="line">    <span class="comment"># 正则提取数据</span></span><br><span class="line">    content = response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    html = etree.HTML(content)</span><br><span class="line">    token = html.xpath(<span class="string">&quot;//input[contains(@name,&#x27;authenticity_token&#x27;)]/@value&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><h4 id="响应内容分类"><a href="#响应内容分类" class="headerlink" title="响应内容分类"></a>响应内容分类</h4><ul><li>结构化响应内容<ul><li>json字符串</li><li>xml数据</li></ul></li><li>非结构化响应内容<ul><li>html数据</li></ul></li></ul><h4 id="xml与html的区别"><a href="#xml与html的区别" class="headerlink" title="xml与html的区别"></a>xml与html的区别</h4><ul><li><p>xml是一种可扩展标记语言，和html很相似，功能更专注于传输和存储数据，重点在 数据</p><p>html是超文本标记语言，在于显示数据以及更好展示数据，重点在 显示</p></li></ul><h4 id="常用数据解析方法"><a href="#常用数据解析方法" class="headerlink" title="常用数据解析方法"></a>常用数据解析方法</h4><p><img src="/2020/09/26/%E7%88%AC%E8%99%AB/index/%E7%88%AC%E8%99%AB%5C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95.png" alt="1601799677692"></p><h4 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h4><ul><li>按照key对字典进行批量数据提取</li><li>pip install jsonpath</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsonpath(a, <span class="string">&#x27;jsonpath语法规则字符串&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/09/26/%E7%88%AC%E8%99%AB/index/%E7%88%AC%E8%99%AB%5Cjsonpath%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99.png" alt="1601800851193"></p><h2 id="Scrapy框架学习"><a href="#Scrapy框架学习" class="headerlink" title="Scrapy框架学习"></a>Scrapy框架学习</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="/2020/09/26/%E7%88%AC%E8%99%AB/index/scrapy%E6%B5%81%E7%A8%8B.png" alt="1601112654263"></p><p><strong>scrapy内置对象</strong></p><ul><li>request请求对象</li><li>response响应对象</li><li>item数据对象（字典）</li></ul><p><strong>模块</strong></p><ul><li><p>Scrapy Engine（引擎）：负责数据和信号在不同模块之间的传递</p><p>（Scrappy已实现）</p></li><li><p>Scheduler（调度器）：队列，用来存放request请求（URL）</p><p>（Scrappy已实现）</p></li><li><p>Downloader（下载器）：下载引擎发送的request请求，并返回给引擎</p><p>（Scrappy已实现）</p></li><li><p>Spider（爬虫）：处理引擎发送的response，提取数据，并返回给引擎</p><p>（需要编写）</p></li><li><p>Item Pipeline（管道）：处理引擎传递的数据，如存储</p><p>（需要编写）</p></li><li><p>Downloader Middleware（下载中间件）：可以自定义的下载扩展，如设置代理</p><p>（根据需求）</p></li><li><p>Spider Middleware（爬虫中间件）：可以自定义request请求进行和response过滤</p><p>（根据需求）</p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install scrapy</span><br><span class="line">或</span><br><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;项目名&gt;</span><br></pre></td></tr></table></figure><h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在项目路径下执行</span></span><br><span class="line">scrapy genspider &lt;爬虫名&gt; &lt;允许爬取的域名&gt;</span><br><span class="line"></span><br><span class="line">scrapy genspider baidu baidu.com</span><br></pre></td></tr></table></figure><h3 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h3><ul><li>约束和规范爬取的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyscrapyItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># 规范爬取的数据</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    item = MyscrapyItem()</span><br><span class="line">    item[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;title&#x27;</span>] = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;desc&#x27;</span>] = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h3 id="完善爬虫"><a href="#完善爬虫" class="headerlink" title="完善爬虫"></a>完善爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> myscrapy.items <span class="keyword">import</span> MyscrapyItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItcastSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;itcaset.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.itcast.cn/channel/teacher.shtml#ajavaee&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 解析start_urls的response获取url列表</span></span><br><span class="line">        node_list = response.xpath(<span class="string">&quot;//div[@class=&#x27;li_txt&#x27;]&quot;</span>)</span><br><span class="line">        <span class="comment"># print(len(node_list))</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="comment"># temp = dict()</span></span><br><span class="line">            temp = MyscrapyItem()</span><br><span class="line">            <span class="comment"># xpath返回选择器对象列表SelectorList object，而非字符串</span></span><br><span class="line">            <span class="comment"># extract() 从选择器中提取数据</span></span><br><span class="line">            <span class="comment"># extract_first() 获取选择器列表的第一个对象，列表为空时不会报错</span></span><br><span class="line">            temp[<span class="string">&#x27;name&#x27;</span>] = node.xpath(<span class="string">&quot;./h3/text()&quot;</span>).extract_first()</span><br><span class="line">            temp[<span class="string">&#x27;title&#x27;</span>] = node.xpath(<span class="string">&quot;./h4/text()&quot;</span>)[<span class="number">0</span>].extract()  <span class="comment"># 列表为空时报错</span></span><br><span class="line">            temp[<span class="string">&#x27;desc&#x27;</span>] = node.xpath(<span class="string">&quot;./p/text()&quot;</span>)[<span class="number">0</span>].extract()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># temp = dict(temp)  # 转为dict后传入管道（不推荐，最好在数据处理方法中进行转换）</span></span><br><span class="line">            <span class="comment"># 使用yield，比return的好处？</span></span><br><span class="line">            <span class="keyword">yield</span> temp</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(response.url)</span></span><br><span class="line">        <span class="comment"># print(response.request.url)</span></span><br><span class="line">        <span class="comment"># print(response.headers)</span></span><br><span class="line">        <span class="comment"># print(response.request.headers)</span></span><br></pre></td></tr></table></figure><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><blockquote><p>利用管道pipeline处理数据</p></blockquote><ul><li>定义管道类</li><li>重写管道类的process_item方法</li><li>process_item方法将item返回给引擎</li></ul><p>在配置文件中启用管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;myscrapy.pipelines.MyscrapyPipeline&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 数字代表管道执行的优先度，多个管道存在时 值越小 优先度越高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyscrapyPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 打开的文件必须关闭，必须有关闭文件操作</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&#x27;itcast.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        数据处理的管道, 从管道中每取出一条数据调用一次该方法</span></span><br><span class="line"><span class="string">        :param item: scrapy.Spider.parse()的返回</span></span><br><span class="line"><span class="string">        :param spider: 运行的爬虫对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pipeline:&#x27;</span>, item)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(item))  <span class="comment"># &lt;class &#x27;myscrapy.items.MyscrapyItem&#x27;&gt; (使用数据模型后)</span></span><br><span class="line">        <span class="comment"># 虽然输出形式与字典相同，但并非dict的子类，无dict方法</span></span><br><span class="line">        <span class="comment"># 将MyscrapyItem对象强转为dict</span></span><br><span class="line">        item = <span class="built_in">dict</span>(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对文件的操作不能写在该方法中，文件每次的读写io会严重影响运行速度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字典序列化</span></span><br><span class="line">        json_data = json.dumps(item, ensure_ascii=<span class="literal">False</span>) + <span class="string">&#x27;,\n&#x27;</span></span><br><span class="line">        <span class="comment"># 将数据写入文件</span></span><br><span class="line">        self.file.write(json_data)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行scrapy"><a href="#运行scrapy" class="headerlink" title="运行scrapy"></a>运行scrapy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl &lt;爬虫名&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/09/26/%E7%88%AC%E8%99%AB/index/%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97.png" alt="1601126920745"></p><h3 id="构造Request对象，发送请求"><a href="#构造Request对象，发送请求" class="headerlink" title="构造Request对象，发送请求"></a>构造Request对象，发送请求</h3><ol><li>确定url</li><li>构造请求  <code>scrapy.Request(url, callback)</code><ul><li><code>callback</code>：指定解析函数，表示该请求返回的响应使用该函数解析</li></ul></li><li>把请求交给引擎：<code>yield scrapy.Request(url, callback)</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;requests模块&quot;&gt;&lt;a href=&quot;#requests模块&quot; class=&quot;headerlink&quot; title=&quot;reque</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日常报错收集</title>
    <link href="https://mygodonload.github.io/2020/09/26/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86/index.html"/>
    <id>https://mygodonload.github.io/2020/09/26/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86/index.html</id>
    <published>2020-09-26T08:51:15.000Z</published>
    <updated>2020-09-26T12:17:53.238Z</updated>
    
    <content type="html"><![CDATA[<h4 id="error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-status-1"><a href="#error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-status-1" class="headerlink" title="error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1"></a>error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</h4><blockquote><p>环境：Ubuntu20 python3.8  </p><p>安装scrapy的过程中报错</p></blockquote><p>解决：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install python3-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h4 id="ImportError-cannot-import-name-ensure-file-on-disk"><a href="#ImportError-cannot-import-name-ensure-file-on-disk" class="headerlink" title="ImportError: cannot import name ensure_file_on_disk"></a>ImportError: cannot import name ensure_file_on_disk</h4><blockquote><p>环境：Ubuntu18 python3.6</p><p>安装virtualenv 和 virtualenvwrapper后，创建虚拟环境报错</p></blockquote><p>解决：</p><p>使用sudo apt install 安装，勿使用 pip安装</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-status-1&quot;&gt;&lt;a href=&quot;#error-command-‘x86-64-linux-gnu-gcc’-failed-with-exit-stat</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker使用</title>
    <link href="https://mygodonload.github.io/2020/09/19/docker%E4%BD%BF%E7%94%A8/index.html"/>
    <id>https://mygodonload.github.io/2020/09/19/docker%E4%BD%BF%E7%94%A8/index.html</id>
    <published>2020-09-19T10:14:09.000Z</published>
    <updated>2020-09-26T16:31:54.409Z</updated>
    
    <content type="html"><![CDATA[<p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search 关键词</span><br><span class="line"></span><br><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd   --privileged=<span class="literal">true</span> --name myCentos centos /usr/sbin/init</span><br><span class="line"></span><br><span class="line">docker run -it myCentos centos /bin/bash <span class="comment"># 不能使用systemctl命令</span></span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器 /bin/bash</span><br></pre></td></tr></table></figure><p>容器重命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename 原容器名 新容器名</span><br></pre></td></tr></table></figure><h3 id="从容器创建一个镜像"><a href="#从容器创建一个镜像" class="headerlink" title="从容器创建一个镜像"></a>从容器创建一个镜像</h3><p><img src="/2020/09/19/docker%E4%BD%BF%E7%94%A8/index/1600510512905.png" alt="img"></p><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入镜像命令格式：</span><br><span class="line">docker <span class="built_in">load</span> &lt; [<span class="built_in">image</span>.tar_name]</span><br><span class="line">docker <span class="built_in">load</span> --input [<span class="built_in">image</span>.tar_name]</span><br></pre></td></tr></table></figure><blockquote><p>注意: docker load 不能指定镜像的名称</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">导入镜像文件</span><br><span class="line">docker load &lt; nginx.tar</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">gunzip -c xxx.tar.gz | docker load</span><br></pre></td></tr></table></figure><h3 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h3><p>将已经下载好的镜像，导出到本地，以备后用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">docker save -o [包文件] [镜像]</span><br><span class="line">docker save [镜像1] ... [镜像n] &gt; [包文件]</span><br></pre></td></tr></table></figure><blockquote><p>注意：docker save 会保存镜像的所有历史记录和元数据信息</p></blockquote><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">save</span> -o nginx.tar sswang-nginx</span><br></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><h4 id="docker容器内使用systemctl命令报错"><a href="#docker容器内使用systemctl命令报错" class="headerlink" title="docker容器内使用systemctl命令报错"></a>docker容器内使用systemctl命令报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System has not been booted with systemd as init system (PID 1). Can<span class="string">&#x27;t operate.</span></span><br><span class="line"><span class="string">Failed to connect to bus: Host is down</span></span><br></pre></td></tr></table></figure><p>解决方法：</p><blockquote><p> 创建容器命令：’ docker run -itd   –privileged&#x3D;true –name myCentos centos &#x2F;usr&#x2F;sbin&#x2F;init ‘  </p><p>docker run -itd -p 80:8000 -p 8081:8081 -p 8888:8888 –privileged&#x3D;true –name django_apps_v2 django_apps:v2 &#x2F;usr&#x2F;sbin&#x2F;init</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载镜像&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xx.so文件缺失</title>
    <link href="https://mygodonload.github.io/2020/09/19/xx-so%E6%96%87%E4%BB%B6%E7%BC%BA%E5%A4%B1/index.html"/>
    <id>https://mygodonload.github.io/2020/09/19/xx-so%E6%96%87%E4%BB%B6%E7%BC%BA%E5%A4%B1/index.html</id>
    <published>2020-09-19T09:59:52.000Z</published>
    <updated>2020-09-19T10:02:27.435Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全局搜索</span><br><span class="line">find / -iname xx.so</span><br><span class="line"></span><br><span class="line">若没有</span><br><span class="line">yum search xx</span><br><span class="line">yum install xx</span><br><span class="line"></span><br><span class="line">创建软连接</span><br><span class="line"><span class="built_in">ln</span> -s 源文件 软连接文件名</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决PyUtilib.enum报错</title>
    <link href="https://mygodonload.github.io/2020/09/19/%E8%A7%A3%E5%86%B3PyUtilib-enum%E6%8A%A5%E9%94%99/index.html"/>
    <id>https://mygodonload.github.io/2020/09/19/%E8%A7%A3%E5%86%B3PyUtilib-enum%E6%8A%A5%E9%94%99/index.html</id>
    <published>2020-09-19T09:03:46.000Z</published>
    <updated>2020-09-19T09:05:25.372Z</updated>
    
    <content type="html"><![CDATA[<p>在安装eomof时会自动安装错误版本的PyUtilib。重新安装PyUtilib&#x3D;&#x3D;5.8.0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在安装eomof时会自动安装错误版本的PyUtilib。重新安装PyUtilib&amp;#x3D;&amp;#x3D;5.8.0&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自定义django_filter过滤器</title>
    <link href="https://mygodonload.github.io/2020/09/03/%E8%87%AA%E5%AE%9A%E4%B9%89django-filter%E8%BF%87%E6%BB%A4%E5%99%A8/index.html"/>
    <id>https://mygodonload.github.io/2020/09/03/%E8%87%AA%E5%AE%9A%E4%B9%89django-filter%E8%BF%87%E6%BB%A4%E5%99%A8/index.html</id>
    <published>2020-09-03T08:41:03.000Z</published>
    <updated>2020-09-03T08:42:17.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义django-filter过滤器"><a href="#自定义django-filter过滤器" class="headerlink" title="自定义django_filter过滤器"></a>自定义django_filter过滤器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django_filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> apps.project.models <span class="keyword">import</span> Project</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectFilter</span>(django_filters.rest_framework.FilterSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义过滤类</span></span><br><span class="line"><span class="string">    name是对应model中的字段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    industry = django_filters.CharFilter(field_name=<span class="string">&#x27;industry&#x27;</span>, lookup_expr=<span class="string">&#x27;icontains&#x27;</span>)</span><br><span class="line">    location = django_filters.CharFilter(field_name=<span class="string">&#x27;location&#x27;</span>, lookup_expr=<span class="string">&#x27;icontains&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Project</span><br><span class="line">        fields = [<span class="string">&#x27;industry&#x27;</span>, <span class="string">&#x27;location&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># field_name（必选）：模型类的属性</span></span><br><span class="line"><span class="comment"># lookup_expr（可选）：判断条件</span></span><br><span class="line"><span class="comment">#     iexact：表示精确匹配, 并且忽略大小写</span></span><br><span class="line"><span class="comment">#     icontains：表示模糊查询（包含），并且忽略大小写</span></span><br><span class="line"><span class="comment">#     exact：表示精确匹配</span></span><br><span class="line"><span class="comment">#     gte：用于规定范围，大于等于</span></span><br><span class="line"><span class="comment">#     lte： 用于范围，小于等于</span></span><br><span class="line"><span class="comment"># method： 自己定义一个方法</span></span><br><span class="line"><span class="comment"># help_text： 帮助说明</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义django-filter过滤器&quot;&gt;&lt;a href=&quot;#自定义django-filter过滤器&quot; class=&quot;headerlink&quot; title=&quot;自定义django_filter过滤器&quot;&gt;&lt;/a&gt;自定义django_filter过滤器&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    
    <category term="django" scheme="https://mygodonload.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>搭建简易web服务器</title>
    <link href="https://mygodonload.github.io/2020/07/20/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html"/>
    <id>https://mygodonload.github.io/2020/07/20/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html</id>
    <published>2020-07-20T04:56:48.000Z</published>
    <updated>2020-09-26T16:37:22.738Z</updated>
    
    <content type="html"><![CDATA[<p>使用python搭建简易的文件服务器，如下图</p><p><img src="/2020/07/20/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index/15132792-6997f710e4aa9338.webp" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> 进入指定目录下 启动服务</span></span><br><span class="line">python -m http.server 8888  # 自行指定端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下步骤未尝试，先行记录</p><blockquote><p>如果没有显示，不要急，完成第五步</p><ul><li>在文件夹中建一个index.html文件，这样访问的时候，就会自动跳转到该目录下的index.html界面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>北方姑娘的小窝<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;h1&gt;Welcome to beifanggirl&#x27;s home&lt;/h1&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day08&quot;</span>&gt;</span>day8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="comment">&lt;!--所有子目录--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day2&quot;</span>&gt;</span>day2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day3&quot;</span>&gt;</span>day3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day4&quot;</span>&gt;</span>day4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day5&quot;</span>&gt;</span>day5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用python搭建简易的文件服务器，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/07/20/%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93web%E6%9C%8D%E5%8A%A1%E5%99%A8/index/15132792-699</summary>
      
    
    
    
    
    <category term="web" scheme="https://mygodonload.github.io/tags/web/"/>
    
    <category term="python" scheme="https://mygodonload.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq</title>
    <link href="https://mygodonload.github.io/2020/07/19/rabbitmq/index.html"/>
    <id>https://mygodonload.github.io/2020/07/19/rabbitmq/index.html</id>
    <published>2020-07-19T12:14:38.000Z</published>
    <updated>2020-09-20T06:56:28.531Z</updated>
    
    <content type="html"><![CDATA[<h4 id="开启管理页面"><a href="#开启管理页面" class="headerlink" title="开启管理页面"></a>开启管理页面</h4><p>在新版本中，后台管理界面默认关闭，如需开启，使用下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq启动成功后,启动后台管理插件</span><br><span class="line">sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>安装完后会有很多插件，可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>若远程访问失败，需打开端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo ufw allow 15672</span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">sudo firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=15672/tcp --permanent</span><br></pre></td></tr></table></figure><p>在新版本中，因安全策略，guest账号只能在localhost:15672中使用，已不能远程登录，需要创建新的账号</p><h4 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h4><p>创建账号 并赋予权限</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建账号</span></span><br><span class="line">rabbitmqctl add_user <span class="literal">admin</span> <span class="literal">admin</span></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">rabbitmqctl set_permissions -p <span class="string">&quot;/&quot;</span> <span class="literal">admin</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line"><span class="comment"># 设置管理员</span></span><br><span class="line">rabbitmqctl set_user_tags <span class="literal">admin</span> administrator</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line"><span class="attribute">rabbitmqctl</span> list_users</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;开启管理页面&quot;&gt;&lt;a href=&quot;#开启管理页面&quot; class=&quot;headerlink&quot; title=&quot;开启管理页面&quot;&gt;&lt;/a&gt;开启管理页面&lt;/h4&gt;&lt;p&gt;在新版本中，后台管理界面默认关闭，如需开启，使用下面命令&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="rabbitmq" scheme="https://mygodonload.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>python3报错:No module named &#39;_tkinter&#39; or &#39;tkinter&#39;</title>
    <link href="https://mygodonload.github.io/2020/06/28/tkinter/index.html"/>
    <id>https://mygodonload.github.io/2020/06/28/tkinter/index.html</id>
    <published>2020-06-28T09:09:25.000Z</published>
    <updated>2020-12-30T08:44:25.128Z</updated>
    
    <content type="html"><![CDATA[<h4 id="检查ctl与tk是否已安装"><a href="#检查ctl与tk是否已安装" class="headerlink" title="检查ctl与tk是否已安装"></a>检查ctl与tk是否已安装</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> ctl</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> ^tk</span><br></pre></td></tr></table></figure><h4 id="本次解决方法"><a href="#本次解决方法" class="headerlink" title="本次解决方法"></a>本次解决方法</h4><p><strong>centos</strong></p><ul><li>No module named ‘_tkinter’</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将./configure、make以后在build/lib.linux-x86_64-2.7目录下面生成的_tkinter.so，拷贝到Python的安装目录 lib/python/lib-dynload中，运行import Tkinter就OK了。</span><br></pre></td></tr></table></figure><ul><li>No module named ‘tkinter’</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum search tkinter 搜索有无安装包</span><br><span class="line"></span><br><span class="line">yum install python3-tkinter</span><br><span class="line">yum install tk-devel</span><br></pre></td></tr></table></figure><p><strong>ubuntu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-tk</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;检查ctl与tk是否已安装&quot;&gt;&lt;a href=&quot;#检查ctl与tk是否已安装&quot; class=&quot;headerlink&quot; title=&quot;检查ctl与tk是否已安装&quot;&gt;&lt;/a&gt;检查ctl与tk是否已安装&lt;/h4&gt;&lt;figure class=&quot;highlight vim&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>随笔-数据库</title>
    <link href="https://mygodonload.github.io/2020/06/24/%E9%9A%8F%E7%AC%94-%E6%95%B0%E6%8D%AE%E5%BA%93/index.html"/>
    <id>https://mygodonload.github.io/2020/06/24/%E9%9A%8F%E7%AC%94-%E6%95%B0%E6%8D%AE%E5%BA%93/index.html</id>
    <published>2020-06-24T09:33:11.000Z</published>
    <updated>2020-07-19T05:47:56.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-5.7.30-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">rpm -Uvh *.rpm --nodeps --force</span><br><span class="line"><span class="comment"># 安装完毕</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置mysql</span></span><br><span class="line"><span class="comment"># 先关闭mysql服务</span></span><br><span class="line">service mysqld stop</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"><span class="comment">### Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">skip-grant-tables     <span class="comment">#添加这句话，这时候登入mysql就不需要密码</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment">#------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启mysql服务</span></span><br><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无需账号密码登陆</span></span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class="line">mysql&gt; flush privileges;  <span class="comment">#更新权限</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123456&#x27;</span>); </span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line">mysql&gt;flush privileges; <span class="comment">#更新权限</span></span><br><span class="line">mysql&gt;quit; <span class="comment">#退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service mysqld stop <span class="comment"># 停止mysql服务, 恢复mysql配置</span></span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf     <span class="comment">#修改配置文件</span></span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="comment"># skip-grant-tables # 注释掉这句话</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">service mysqld start <span class="comment"># 启动mysql服务</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -p <span class="comment"># 输入新密码登录</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="开启远程登录"><a href="#开启远程登录" class="headerlink" title="开启远程登录"></a>开启远程登录</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123123&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><ul><li>by后面的就是远程登录密码，远程登录密码可以和用户密码不一样</li></ul><h4 id="设置密码策略"><a href="#设置密码策略" class="headerlink" title="设置密码策略"></a>设置密码策略</h4><p>查看密码策略</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW <span class="keyword">VARIABLES</span> LIKE <span class="comment">&#x27;validate_password%&#x27;</span>; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">validate_password_length  固定密码的总长度；</span><br><span class="line">validate_password_dictionary_file 指定密码验证的文件路径；</span><br><span class="line">validate_password_mixed_case_count  整个密码中至少要包含大/小写字母的总个数；</span><br><span class="line">validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；</span><br><span class="line">validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM</span><br></pre></td></tr></table></figure><p>修改密码策略</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以validate_password_policy为例</span><br><span class="line"><span class="built_in">set</span> global <span class="attribute">validate_password_policy</span>=LOW;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="将查询结果插入到另一个表"><a href="#将查询结果插入到另一个表" class="headerlink" title="将查询结果插入到另一个表"></a>将查询结果插入到另一个表</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一：如果要插入目标表不存在：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> 目标表 <span class="keyword">from</span> 表 <span class="keyword">where</span> ...</span><br><span class="line"></span><br><span class="line">二：如果要插入目标表已经存在：</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 目的表 <span class="keyword">select</span> * <span class="keyword">from</span> 表 <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line">三：如果是跨数据库操作的话： 怎么把A数据库的atable表所查询的东西，全部插入到B 数据库的btable表中</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> B.btable <span class="keyword">from</span> A.atable <span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p><strong>1209 - The MySQL server is running with the–read-only option so it cannot execute this statement</strong></p><p>一般这个错误有两种原因：</p><ol><li><p>连到从库了。从库一般设置为只读。</p></li><li><p>主库的read_only参数被修改为1</p></li></ol><p><strong>暂时解决</strong></p><p>查看mysql配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> @@read_only;</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">| @@read_only |</span><br><span class="line"></span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">|          1 |</span><br><span class="line"></span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">修改为0</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global read_only=0;</span><br></pre></td></tr></table></figure><p><strong>永久解决</strong></p><p>因为写入数据量太大, 内存溢出导致了mysql的重启</p><p>配置文件中设置了read_only ，所以重启会导致read_only&#x3D;1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep read_only my.cnf</span><br><span class="line"></span><br><span class="line">read_only             = on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改为 read_only = 0</span><br></pre></td></tr></table></figure><p><strong>Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(<code>admin</code>) where user&#x3D;’root’’ at line 1</strong></p><p>MySQL修改密码报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(&quot;newpasswd&quot;) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;; </span><br></pre></td></tr></table></figure><p>使用下面方法成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>  将加密方式改为和旧版本兼容 ,安装mysql 8 默认的强加密方式，旧版本的加密方式是’mysql_native_password’, </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://mygodonload.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>随笔-服务器</title>
    <link href="https://mygodonload.github.io/2020/06/24/%E9%9A%8F%E7%AC%94-%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html"/>
    <id>https://mygodonload.github.io/2020/06/24/%E9%9A%8F%E7%AC%94-%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html</id>
    <published>2020-06-24T09:28:28.000Z</published>
    <updated>2020-07-19T12:39:21.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CentO-S防火墙"><a href="#CentO-S防火墙" class="headerlink" title="CentO S防火墙"></a>CentO S防火墙</h3><h4 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=3306/tcp --permanent</span><br></pre></td></tr></table></figure><ul><li>–zone                            #作用域<br>  –add-port&#x3D;80&#x2F;tcp   #添加端口，格式为：端口&#x2F;通讯协议<br>  –permanent                #永久生效，没有此参数重启后失效</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure><p><strong>即使已经关闭了防火墙, 也需要开放端口操作</strong></p><h3 id="Ubuntu防火墙"><a href="#Ubuntu防火墙" class="headerlink" title="Ubuntu防火墙"></a>Ubuntu防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙当前状态</span></span><br><span class="line">sudo ufw status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启防火墙</span></span><br><span class="line">sudo ufw enable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">sudo ufw disable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙版本</span></span><br><span class="line">sudo ufw version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认允许外部访问本机</span></span><br><span class="line">sudo ufw default allow</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认拒绝外部访问主机</span></span><br><span class="line">sudo ufw default deny</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许外部访问53端口</span></span><br><span class="line">sudo ufw allow 53</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝外部访问53端口</span></span><br><span class="line">sudo ufw deny 53</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许某个IP地址访问本机所有端口</span></span><br><span class="line">sudo ufw allow from 192.168.0.1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CentO-S防火墙&quot;&gt;&lt;a href=&quot;#CentO-S防火墙&quot; class=&quot;headerlink&quot; title=&quot;CentO S防火墙&quot;&gt;&lt;/a&gt;CentO S防火墙&lt;/h3&gt;&lt;h4 id=&quot;防火墙开放端口&quot;&gt;&lt;a href=&quot;#防火墙开放端口&quot; class</summary>
      
    
    
    
    
    <category term="服务器" scheme="https://mygodonload.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Centos7离线部署django项目</title>
    <link href="https://mygodonload.github.io/2020/06/12/Centos7%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/index.html"/>
    <id>https://mygodonload.github.io/2020/06/12/Centos7%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/index.html</id>
    <published>2020-06-12T01:43:44.000Z</published>
    <updated>2020-06-28T09:58:16.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>这里是我在部署中用到的一些资源</p><p>链接：<a href="https://pan.baidu.com/s/1SzVqpHCi60ZEQTFrPFRZiA">https://pan.baidu.com/s/1SzVqpHCi60ZEQTFrPFRZiA</a><br>提取码：9d09 </p><h3 id="下载RPM依赖包"><a href="#下载RPM依赖包" class="headerlink" title="下载RPM依赖包"></a>下载RPM依赖包</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到指定目录（依赖包会一起下载）</span></span><br><span class="line">yum <span class="keyword">install</span> --downloadonly --downloaddir=/root/httpd  (包名)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若downloadonly命令不存在，安装插件</span></span><br><span class="line">yum <span class="keyword">install</span> yum-plugin-downloadonly</span><br></pre></td></tr></table></figure><h3 id="下载项目依赖"><a href="#下载项目依赖" class="headerlink" title="下载项目依赖"></a>下载项目依赖</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在外网环境下载依赖包  packages:存储依赖包的文件夹</span><br><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br><span class="line">pip download -d packages -r requirements.txt  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"># 安装项目的python包</span><br><span class="line">pip install <span class="comment">--no-index --find-links=packages -r requirements.txt </span></span><br><span class="line"></span><br><span class="line"># 加入环境变量  使能够使用celery</span><br><span class="line">export <span class="type">PATH</span>=/usr/<span class="keyword">local</span>/python3<span class="number">.6</span>/bin:$<span class="type">PATH</span></span><br></pre></td></tr></table></figure><h2 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h2><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd xxx</span><br><span class="line">passwd (用户名)</span><br><span class="line"><span class="meta"># 授权sudo权限</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//blog.csdn.net/abcdad/article/details/93744898</span></span></span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p>参考：<a href="https://blog.csdn.net/akipa11/article/details/81414875">https://blog.csdn.net/akipa11/article/details/81414875</a></p><h4 id="网络不可用"><a href="#网络不可用" class="headerlink" title="网络不可用"></a>网络不可用</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dhclient  <span class="comment"># 自动获取IP地址</span></span><br><span class="line">ip <span class="keyword">addr </span> <span class="comment"># 代替ifconfig</span></span><br><span class="line"><span class="comment"># ping可通</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">将<span class="attribute">ONBOOT</span>=<span class="literal">no</span>改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static</span><br><span class="line">并在后面增加几行内容：  自行修改ip</span><br><span class="line"><span class="attribute">IPADDR</span>=192.168.127.128</span><br><span class="line"><span class="attribute">NETMASK</span>=255.255.255.0</span><br><span class="line"><span class="attribute">GATEWAY</span>=192.168.127.2</span><br><span class="line"><span class="attribute">DNS1</span>=119.29.29.29</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络服务</span></span><br><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;eth0&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;dbb5fe6c-c3a3-48dd-a9cf-2ba69b25a4cb&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;eth0&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;172.188.10.171&quot;</span></span><br><span class="line"><span class="attr">PREFIX</span>=<span class="string">&quot;24&quot;</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;172.188.10.254&quot;</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;172.188.10.211&quot;</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line"><span class="attr">IPV6_PRIVACY</span>=<span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网卡启动失败：failed to start LSB: Bring up/down networking</span></span><br><span class="line"><span class="params">system</span>ctl stop NetworkManager</span><br><span class="line"><span class="params">system</span>ctl restart network.service</span><br></pre></td></tr></table></figure><h4 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h4><ul><li>安装    命令ifconfig  netstat</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpm</span> -ivh net-tools-<span class="number">2</span>.<span class="number">0</span>-<span class="number">0</span>.<span class="number">6</span>.<span class="number">20130109</span>git.fc19.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul><li>资源：Centos_package</li></ul><h4 id="安装gcc环境"><a href="#安装gcc环境" class="headerlink" title="安装gcc环境"></a>安装gcc环境</h4><ul><li>使用命令<code>cd /root/softwares/01-gcc</code>进入gcc文件夹</li><li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li><li>安装完成后，输入命令<code>gcc -v</code>，如果得到gcc的版本表示安装成功</li></ul><h4 id="安装Python环境的依赖项"><a href="#安装Python环境的依赖项" class="headerlink" title="安装Python环境的依赖项"></a>安装Python环境的依赖项</h4><ul><li>使用命令<code>cd /root/softwares/05-python-dependency</code>进入05-python-dependency文件夹</li><li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li></ul><h3 id="方式二-（步骤不全）"><a href="#方式二-（步骤不全）" class="headerlink" title="方式二 （步骤不全）"></a>方式二 （步骤不全）</h3><p><a href="https://blog.csdn.net/LENOVOJXN/article/details/85334530">https://blog.csdn.net/LENOVOJXN/article/details/85334530</a></p><h4 id="安装python依赖包"><a href="#安装python依赖包" class="headerlink" title="安装python依赖包"></a>安装python依赖包</h4><h5 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h5><p><a href="https://blog.csdn.net/qq_28198181/article/details/82978830">https://blog.csdn.net/qq_28198181/article/details/82978830</a></p><p><a href="https://blog.csdn.net/yuan_ren_sheng/article/details/81021563">https://blog.csdn.net/yuan_ren_sheng/article/details/81021563</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf gcc_rpm.tar.gz</span><br><span class="line"><span class="built_in">cd</span> gcc_rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装所有rpm文件</span></span><br><span class="line"><span class="comment"># 给文件添加x权限 </span></span><br><span class="line"><span class="built_in">chmod</span> u+x install_gcc.sh</span><br><span class="line">sh install_gcc.sh</span><br></pre></td></tr></table></figure><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><h5 id="解压python安装包"><a href="#解压python安装包" class="headerlink" title="解压python安装包"></a>解压python安装包</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xvJf  Python-<span class="number">3</span>.<span class="number">7</span>.<span class="number">0</span>.tar.xz  # 使用python3.<span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/python3 <span class="comment"># 创建编译安装目录</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.7.0　　　　　　<span class="comment"># 进入python的解压目录</span></span><br><span class="line">./configure --prefix=/usr/local/python3 --enable-optimizations</span><br><span class="line">make　　　<span class="comment"># 编译</span></span><br><span class="line">make install  <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><h5 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/local/</span>bin/python3</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/pip3 /u</span>sr<span class="regexp">/local/</span>bin/pip3</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pytho<span class="symbol">n3</span> -V</span><br><span class="line">pip<span class="number">3</span> -V</span><br></pre></td></tr></table></figure><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// pip安装mysqlclient 依赖</span><br><span class="line">rpm -ivh mariadb-devel<span class="number">-5.5</span><span class="number">.65</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在外网环境下载依赖包  packages:存储依赖包的文件夹</span><br><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br><span class="line">pip download -d packages -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 安装项目的python包</span><br><span class="line">pip install <span class="comment">--no-index --find-links=packages -r requirements.txt</span></span><br><span class="line"></span><br><span class="line">export <span class="type">PATH</span>=/usr/<span class="keyword">local</span>/python3<span class="number">.6</span>/bin:$<span class="type">PATH</span></span><br></pre></td></tr></table></figure><h2 id="Mysql安装"><a href="#Mysql安装" class="headerlink" title="Mysql安装"></a>Mysql安装</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-5.7.30-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">rpm -Uvh *.rpm --nodeps --force</span><br><span class="line"><span class="comment"># 安装完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置mysql</span></span><br><span class="line"><span class="comment"># 先关闭mysql服务</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>mysqld stop</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"><span class="comment">### Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">skip-grant-tables     #添加这句话，这时候登入mysql就不需要密码</span><br><span class="line"><span class="attribute">symbolic-links</span>=0</span><br><span class="line"><span class="comment">#------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启mysql服务</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>mysqld start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无需账号密码登陆</span></span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="built_in">ERROR</span> 1290 (HY000): The MySQL<span class="built_in"> server </span>is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class="line">mysql&gt; flush privileges;  #更新权限</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123456&#x27;</span>); </span><br><span class="line">Query OK, 0 rows affected, 1 <span class="built_in">warning</span> (0.00 sec)</span><br><span class="line">mysql&gt;flush privileges; #更新权限</span><br><span class="line">mysql&gt;quit; #退出</span><br><span class="line"></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>mysqld stop # 停止mysql服务, 恢复mysql配置</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf     #修改配置文件</span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="comment"># skip-grant-tables # 注释掉这句话</span></span><br><span class="line"><span class="attribute">symbolic-links</span>=0</span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>mysqld start # 启动mysql服务</span><br><span class="line"></span><br><span class="line">mysql -uroot -p # 输入新密码登录</span><br></pre></td></tr></table></figure><h2 id="Rabbitmq安装"><a href="#Rabbitmq安装" class="headerlink" title="Rabbitmq安装"></a>Rabbitmq安装</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh *.rpm</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>rabbitmq-server start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若启动失败</span></span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line"><span class="comment"># 若报错Failed to start LSB: Enable AMQP service provided by RabbitMQ broker.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先 </span></span><br><span class="line">/etc/hostname</span><br><span class="line">&gt; localhost.localdomain</span><br><span class="line">/etc/hosts</span><br><span class="line">添加ip地址  192.168.187.130 localhost localhost.localdomain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次启动</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>rabbitmq-server start</span><br><span class="line"></span><br><span class="line"><span class="comment"># vi /etc/rabbitmq/rabbitmq-env.conf</span></span><br><span class="line"><span class="comment"># 新建文件，并在文件中写一句“NODENAME=rabbit@localhost”，保存就OK啦；</span></span><br><span class="line"><span class="attribute">NODENAME</span>=rabbit@localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># rabbitmq启动成功后,启动后台管理插件</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完后会有很多插件，可以使用</span></span><br><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><h2 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/python3.6/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/usr/local/python3.6/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile.d/python3.sh  <span class="comment"># 避免重启丢失</span></span><br></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">/etc/selinux/config</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/06/12/Centos7%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/index/../../../../%E5%B7%A5%E4%BD%9C/%E8%8B%8F%E5%B7%9E/%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95.assets/1591934162821.png" alt="1591934162821"></p><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器已可访问nginx，打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 安装并运行成功</span></span><br></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">whereis</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入安装目录后</span></span><br><span class="line">vi nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装coin-cbc"><a href="#安装coin-cbc" class="headerlink" title="安装coin-cbc"></a>安装coin-cbc</h3><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">CoinUtils</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">若报错coinutiils is not available</span><br><span class="line">解决方法:</span><br><span class="line">将源码安装的依赖的lib中文件拷贝到/usr/lib64或/usr/lib64/pkgconfig中</span><br></pre></td></tr></table></figure><h4 id="coinbrew工具安装"><a href="#coinbrew工具安装" class="headerlink" title="coinbrew工具安装"></a>coinbrew工具安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://www.github.com/coin-or/coinbrew</span><br><span class="line"><span class="built_in">cd</span> coinbrew</span><br><span class="line"><span class="built_in">chmod</span> u+x coinbrew</span><br><span class="line">./coinbrew</span><br></pre></td></tr></table></figure><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="variable">coinbrew</span> <span class="variable">fetch</span> <span class="function"><span class="title">Ipopt</span>(工具名)</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;: /usr/bin/env: &quot;</span>bash\r<span class="string">&quot;: 没有那个文件或目录</span></span><br></pre></td></tr></table></figure><p>需要用vim打开sh脚本文件， 重新设置文件的格式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">：<span class="built_in">set</span> ff 然后回车  再重新设置下文件格式：</span><br><span class="line">：<span class="built_in">set</span> <span class="attribute">ff</span>=unix 然后保存退出</span><br><span class="line">：wq! 回车</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;这里是我在部署中用到的一些资源&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1Sz</summary>
      
    
    
    
    
    <category term="Centos" scheme="https://mygodonload.github.io/tags/Centos/"/>
    
    <category term="离线部署" scheme="https://mygodonload.github.io/tags/%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置一键生成</title>
    <link href="https://mygodonload.github.io/2020/06/05/Nginx%E9%85%8D%E7%BD%AE%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90/index.html"/>
    <id>https://mygodonload.github.io/2020/06/05/Nginx%E9%85%8D%E7%BD%AE%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90/index.html</id>
    <published>2020-06-05T03:58:57.000Z</published>
    <updated>2020-06-05T04:15:28.277Z</updated>
    
    <content type="html"><![CDATA[<p>工具: <a href="https://www.digitalocean.com/community/tools/nginx">Nginx Config</a></p><p>配置很齐全, 但有些配置从来没用过 不知道应该怎么配置…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工具: &lt;a href=&quot;https://www.digitalocean.com/community/tools/nginx&quot;&gt;Nginx Config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置很齐全, 但有些配置从来没用过 不知道应该怎么配置…..&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Nginx" scheme="https://mygodonload.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>G0-运算符</title>
    <link href="https://mygodonload.github.io/2020/06/04/G0-%E8%BF%90%E7%AE%97%E7%AC%A6/index.html"/>
    <id>https://mygodonload.github.io/2020/06/04/G0-%E8%BF%90%E7%AE%97%E7%AC%A6/index.html</id>
    <published>2020-06-04T08:11:18.000Z</published>
    <updated>2020-06-04T08:16:28.554Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><ul><li>假定 A 值为 10，B 值为 20。</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">相加</td><td align="left">A + B 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">相减</td><td align="left">A - B 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">相乘</td><td align="left">A * B 输出结果 200</td></tr><tr><td align="left">&#x2F;</td><td align="left">相除</td><td align="left">B &#x2F; A 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">求余</td><td align="left">B % A 输出结果 0</td></tr><tr><td align="left">++</td><td align="left">自增</td><td align="left">A++ 输出结果 11</td></tr><tr><td align="left">–</td><td align="left">自减</td><td align="left">A– 输出结果 9</td></tr></tbody></table><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul><li>假定 A 值为 10，B 值为 20。</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td><td align="left">(A &#x3D;&#x3D; B) 为 False</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td><td align="left">(A !&#x3D; B) 为 True</td></tr><tr><td align="left">&gt;</td><td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td><td align="left">(A &gt; B) 为 False</td></tr><tr><td align="left">&lt;</td><td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td><td align="left">(A &lt; B) 为 True</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td><td align="left">(A &gt;&#x3D; B) 为 False</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td><td align="left">(A &lt;&#x3D; B) 为 True</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>假定 A 值为 True，B 值为 False。</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td><td align="left">(A &amp;&amp; B) 为 False</td></tr><tr><td align="left">||</td><td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td><td align="left">(A || B) 为 True</td></tr><tr><td align="left">!</td><td align="left">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td><td align="left">!(A &amp;&amp; B) 为 True</td></tr></tbody></table><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符”&amp;”是双目运算符。 其功能是参与运算的两数各对应的二进位相与。</td><td align="left">(A &amp; B) 结果为 12, 二进制为 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符”|”是双目运算符。 其功能是参与运算的两数各对应的二进位相或</td><td align="left">(A | B) 结果为 61, 二进制为 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符”^”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</td><td align="left">(A ^ B) 结果为 49, 二进制为 0011 0001</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移运算符”&lt;&lt;”是双目运算符。左移n位就是乘以2的n次方。 其功能把”&lt;&lt;”左边的运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">A &lt;&lt; 2 结果为 240 ，二进制为 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移运算符”&gt;&gt;”是双目运算符。右移n位就是除以2的n次方。 其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td><td align="left">A &gt;&gt; 2 结果为 15 ，二进制为 0000 1111</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td><td align="left">C &#x3D; A + B 将 A + B 表达式结果赋值给 C</td></tr><tr><td align="left">+&#x3D;</td><td align="left">相加后再赋值</td><td align="left">C +&#x3D; A 等于 C &#x3D; C + A</td></tr><tr><td align="left">-&#x3D;</td><td align="left">相减后再赋值</td><td align="left">C -&#x3D; A 等于 C &#x3D; C - A</td></tr><tr><td align="left">*&#x3D;</td><td align="left">相乘后再赋值</td><td align="left">C *&#x3D; A 等于 C &#x3D; C * A</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">相除后再赋值</td><td align="left">C &#x2F;&#x3D; A 等于 C &#x3D; C &#x2F; A</td></tr><tr><td align="left">%&#x3D;</td><td align="left">求余后再赋值</td><td align="left">C %&#x3D; A 等于 C &#x3D; C % A</td></tr><tr><td align="left">&lt;&lt;&#x3D;</td><td align="left">左移后赋值</td><td align="left">C &lt;&lt;&#x3D; 2 等于 C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt;&#x3D;</td><td align="left">右移后赋值</td><td align="left">C &gt;&gt;&#x3D; 2 等于 C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="left">&amp;&#x3D;</td><td align="left">按位与后赋值</td><td align="left">C &amp;&#x3D; 2 等于 C &#x3D; C &amp; 2</td></tr><tr><td align="left">^&#x3D;</td><td align="left">按位异或后赋值</td><td align="left">C ^&#x3D; 2 等于 C &#x3D; C ^ 2</td></tr><tr><td align="left">|&#x3D;</td><td align="left">按位或后赋值</td><td align="left">C |&#x3D; 2 等于 C &#x3D; C | 2</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;算数运算符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;假定 A 值为 10，B 值为 20。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
</summary>
      
    
    
    
    
    <category term="Go" scheme="https://mygodonload.github.io/tags/Go/"/>
    
  </entry>
  
</feed>
